[tool.poetry]
name = "trading"
version = "0.1.0"
description = "Trading Strategy Platform with MA Cross, Portfolio Optimization, and GraphQL API"
authors = ["Cole Morton"]
readme = "README.md"
package-mode = true
packages = [
    {include = "app"}
]

[tool.poetry.scripts]
trading-cli = "app.cli.main:cli_main"

[tool.poetry.dependencies]
python = "^3.11"
numpy = ">=1.16.5,<2.0.0"
yfinance = "^0.2.41"
seaborn = "^0.13.2"
polars = "^1.5.0"
python-dotenv = "^1.0.1"
skfolio = "^0.6.0"
fastapi = "^0.110.0"
uvicorn = "^0.27.0"
pydantic = "^2.6.0"
psutil = "^7.0.0"
asyncpg = "^0.29.0"
sqlalchemy = "^2.0.25"
alembic = "^1.13.0"
redis = "^5.0.1"
pydantic-settings = "^2.9.1"
vectorbt = "^0.28.0"
pyarrow = "^20.0.0"
cachetools = "^6.1.0"
typer = "^0.12.0"
rich = "^13.0.0"
pyyaml = "^6.0.0"
plotly = "5.24.1"
arq = "^0.25.0"
bcrypt = "^4.0.0"
sqlmodel = "^0.0.27"
aiohttp = "^3.9.0"
httpx = "^0.27.0"
itsdangerous = "^2.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^1.0.0"
pytest-cov = "^6.1.1"
ruff = "^0.8.0"
mypy = "^1.16.0"
bandit = "^1.7.0"
pre-commit = "^3.6.0"
types-requests = "^2.32.0.20250602"
pytest-mock = "^3.14.1"
pytest-timeout = "^2.4.0"
pytest-xdist = "^3.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
# This is the canonical mypy configuration - all settings are managed here
# Pre-commit hooks use: --config-file=pyproject.toml
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Make MyPy more practical for large codebases
ignore_errors = false
show_error_codes = true
# Allow untyped calls for now - we'll gradually improve
disallow_untyped_calls = false
# Focus on critical errors first - gradually enabling type checking
disable_error_code = ["misc", "union-attr", "attr-defined", "import-untyped", "unreachable", "index", "literal-required", "call-arg", "assignment", "arg-type", "name-defined", "method-assign"]
# Alternatively, use a more permissive approach for now
ignore_missing_imports = true

# Ignore third-party packages without type stubs
[[tool.mypy.overrides]]
module = [
    "vectorbt.*",
    "yfinance.*",
    "seaborn.*",
    "polars.*",
    "skfolio.*",
    "plotly.*",
    "pandas_ta.*",
    "ta.*"
]
ignore_missing_imports = true

# Exclude vendor/external code
[[tool.mypy.overrides]]
module = "app.trading_bot.trendspider.*"
ignore_errors = true

[tool.pylint.messages_control]
disable = "C0103,C0114,C0115,C0116,R0903,R0913,W0613"

[tool.pylint.format]
max-line-length = 88

[tool.vulture]
min_confidence = 80
paths = ["app", "tests"]
exclude = ["*/migrations/*", "*/tests/*"]

[tool.ruff]
# Ruff configuration - modern, fast Python linter
line-length = 88
target-version = "py310"

# Exclude directories
extend-exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".tox",
    ".venv",
    "build",
    "dist",
    "__pycache__",
    "node_modules",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
    "RET",   # flake8-return
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "ERA",   # eradicate (commented out code)
    "PL",    # pylint
    "RUF",   # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",    # line too long (handled by black)
    "TD002",   # missing TODO author
    "TD003",   # missing TODO link
    "FIX002",  # line contains TODO
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "RET504",  # unnecessary variable assignment before return
    "SIM108",  # use ternary operator (sometimes less readable)
]

[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__.py files
"__init__.py" = ["F401", "E402"]
# Relax some rules for tests
"tests/**/*.py" = ["PLR2004", "S101", "S105", "S106"]
# Relax rules for scripts
"scripts/**/*.py" = ["T201", "S101"]

[tool.ruff.lint.isort]
# Make isort compatible with black and standalone isort
combine-as-imports = true
force-sort-within-sections = false
known-first-party = ["app"]
lines-after-imports = 2
force-single-line = false
# Match isort profile="black"
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity
max-complexity = 10

[tool.ruff.format]
# Use Black-compatible formatting
quote-style = "double"
indent-style = "space"
line-ending = "auto"
