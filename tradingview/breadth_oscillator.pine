//@version=5
indicator("Breadth Oscillator", shorttitle="V3", overlay=false)

// Description:
// This indicator calculates how many strategies from a predefined collection
// are currently in a bullish position. It functions as a breadth oscillator that shows
// market sentiment based on multiple strategies simultaneously.

// ================ Main Configuration ================
var float centerBand = 50.0     // Minimum oscillator value

// Default Colors
color bullColor = color.new(#26c6da, 0)
color bearColor = color.new(#7e57c2, 0)
color neutralColor = color.new(#3179f5, 0)

// Optional user inputs for time frame selection
timeframeInput = input.timeframe("D", "Strategy Timeframe", options=["H", "D", "W", "M"])

// Ticker selection for filtering strategies
tickerInput = input.string("SOL", "Ticker for Strategies", options=["SOL"])

// ================ Strategy Functions ================

// Function to calculate SMA Crossover signal
smaCrossSignal(shortWindow, longWindow) =>
    shortSMA = ta.sma(close, shortWindow)
    longSMA = ta.sma(close, longWindow)

    // Current state
    crossUp = shortSMA > longSMA

    // Return the signal (true if bullish)
    crossUp

// Function to calculate EMA Crossover signal
emaCrossSignal(shortWindow, longWindow) =>
    shortEMA = ta.ema(close, shortWindow)
    longEMA = ta.ema(close, longWindow)

    // Current state
    crossUp = shortEMA > longEMA

    // Return the signal (true if bullish)
    crossUp

// Function to calculate MACD signal
macdSignal(shortWindow, longWindow, signalWindow) =>
    [macdLine, signalLine, _] = ta.macd(close, shortWindow, longWindow, signalWindow)

    // Current state
    crossUp = macdLine > signalLine

    // Return the signal (true if bullish)
    crossUp

// ================ Error Handling Function ================
checkParameter(param, paramName) =>
    if param <= 0
        runtime.error("Invalid " + paramName + ": " + str.tostring(param) + ". Must be positive.")
        0
    else
        param

// ================ Strategy Configuration ================
// Strategy configuration - Hardcoded directly in calculateBreadth() function
// All strategies are for MSTR

// ================ Dynamic Strategy Processing ================
calculateBreadth() =>
    float allocation = 0

    // Process each strategy directly with hardcoded parameters

    if smaCrossSignal(29, 30)
        allocation += 20

    if smaCrossSignal(21, 22)
        allocation += 20

    if macdSignal(13, 19, 5)
        allocation += 20

    if smaCrossSignal(26, 32)
        allocation += 20

    if smaCrossSignal(7, 8)
        allocation += 20

    // Return both the active strategies and the total applicable strategies
    allocation

// Request data using the specified timeframe
allocation = request.security(syminfo.tickerid, timeframeInput, calculateBreadth())

// ================ Calculate Oscillator And Bands ================

// Moving averages for signal lines
slowMA = ta.sma(allocation, 20)
fastMA = ta.sma(allocation, 5)

// Thresholds
threshold = input.int(50, "Center", minval=0, maxval=100)

// ================ Visualization ================

// Colors based on the position relative to thresholds
oscillatorColor = allocation > threshold ? bullColor :
                  allocation < threshold ? bearColor :
                  neutralColor

// Plotting the oscillator
plot(allocation, "Active Strategies", color=oscillatorColor, linewidth=2)
// plot(slowMA, "20-day SMA", color=color.new(#ffffff, 0), linewidth=1)

// Plot upper and lower reference lines - using dashed lines instead of style parameter
plot(threshold, "Threshold", color=neutralColor, linewidth=1)

// ================ Alerts ================
// Create alerts for trading signals
crossingUp = ta.crossover(allocation, threshold)
crossingDown = ta.crossunder(allocation, threshold)

// Alert conditions
alertcondition(crossingUp, "Breadth crossing up from oversold", "{{ticker}} breadth crossing above oversold level")
alertcondition(crossingDown, "Breadth crossing down from overbought", "{{ticker}} breadth crossing below overbought level")

// Display aggregate statistics
var table infoTable = table.new(position.bottom_right, 2, 2, border_width=1)
if barstate.islast
    table.cell(infoTable, 0, 0, "Active Strategies", bgcolor=color.new(#000000, 90), text_color=color.white)
    table.cell(infoTable, 1, 0, str.tostring(allocation / 20) + " / " + str.tostring(5), bgcolor=color.new(#000000, 90), text_color=oscillatorColor)
    table.cell(infoTable, 0, 1, "Percentage", bgcolor=color.new(#000000, 90), text_color=color.white)
    table.cell(infoTable, 1, 1, str.tostring(math.round(allocation)) + "%", bgcolor=color.new(#000000, 90), text_color=oscillatorColor)
