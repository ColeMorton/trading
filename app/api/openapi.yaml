openapi: 3.0.3
info:
  title: Trading API
  description: |
    FastAPI server for executing trading scripts and retrieving data files. 
    Serves as the backend for Sensylate, a React PWA for CSV-based portfolio analysis and strategy visualization.
    
    ## Features
    - Execute Python scripts with parameters (sync/async)
    - Real-time status updates via Server-Sent Events (SSE)
    - Retrieve CSV and JSON data files with security validation
    - Specialized portfolio update workflows
    - MCP server integration for AI assistant access
    
    ## Sensylate Integration
    This API handles the complete portfolio analysis workflow:
    1. Initial data loading via file listings
    2. CSV portfolio data retrieval and display
    3. Real-time portfolio updates with SSE streaming
    4. Automated trading signal detection
  version: 0.1.0
  contact:
    name: Trading API
    url: http://127.0.0.1:8000
  license:
    name: MIT

servers:
  - url: http://127.0.0.1:8000
    description: Development server
  - url: http://localhost:8000
    description: Local server

paths:
  # Root and Health Endpoints
  /:
    get:
      tags:
        - root
      summary: Get API information
      description: Returns basic information about the Trading API
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Trading API"
                  version:
                    type: string
                    example: "0.1.0"
                  description:
                    type: string
                    example: "API for executing trading scripts and retrieving data"

  /health:
    get:
      tags:
        - health
      summary: Health check
      description: Returns the health status of the API
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

  # Script Execution Endpoints
  /api/scripts/execute:
    post:
      tags:
        - scripts
      summary: Execute a script
      description: |
        Execute a Python script with the provided parameters. 
        The script can be executed synchronously or asynchronously.
        
        **Allowed script directories:**
        - `app/ma_cross/`
        - `app/concurrency/`
        - `app/strategies/`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptExecutionRequest'
            examples:
              async_execution:
                summary: Asynchronous execution example
                value:
                  script_path: "app/ma_cross/1_get_portfolios.py"
                  async_execution: true
                  parameters:
                    TICKER: ["NVDA", "NFLX"]
                    WINDOWS: 89
                    DIRECTION: "Long"
              sync_execution:
                summary: Synchronous execution example
                value:
                  script_path: "app/strategies/correlation.py"
                  async_execution: false
                  parameters:
                    portfolio: "crypto.json"
      responses:
        '200':
          description: Synchronous execution completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptExecutionResponse'
        '202':
          description: Asynchronous execution accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncScriptExecutionResponse'
        '400':
          description: Bad request - invalid script path or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Script not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/scripts/update-portfolio:
    post:
      tags:
        - scripts
      summary: Update portfolio
      description: |
        Execute the update_portfolios.py script with the specified portfolio file.
        This is a specialized endpoint for Sensylate portfolio updates.
        
        **Workflow:**
        1. Accepts portfolio filename
        2. Executes `app/strategies/update_portfolios.py` asynchronously
        3. Downloads fresh market data for all strategies
        4. Generates synthetic pairs and calculates SMA signals
        5. Updates CSV file with new metrics and signals
        6. Returns execution_id for status tracking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolio:
                  type: string
                  description: Portfolio filename (e.g., "DAILY_test.csv")
                  example: "DAILY_test.csv"
              required:
                - portfolio
            example:
              portfolio: "DAILY_test.csv"
      responses:
        '202':
          description: Portfolio update started
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/AsyncScriptExecutionResponse'
                  - type: object
                    properties:
                      script_path:
                        type: string
                        example: "app/strategies/update_portfolios.py"
              example:
                status: "accepted"
                execution_id: "9322338b-68ee-4ed6-ae5c-2db7f965584e"
                message: "Portfolio update started"
                script_path: "app/strategies/update_portfolios.py"
        '400':
          description: Bad request - missing portfolio parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/scripts/status/{execution_id}:
    get:
      tags:
        - scripts
      summary: Get script execution status
      description: Get the current status of a script execution by its execution ID
      parameters:
        - in: path
          name: execution_id
          required: true
          schema:
            type: string
            format: uuid
          description: Unique execution identifier
          example: "9322338b-68ee-4ed6-ae5c-2db7f965584e"
      responses:
        '200':
          description: Script execution status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptStatusResponse'
              examples:
                completed:
                  summary: Completed portfolio update
                  value:
                    execution_id: "9322338b-68ee-4ed6-ae5c-2db7f965584e"
                    status: "completed"
                    progress: 100
                    message: "Portfolio update completed in 10.62 seconds"
                    start_time: "2025-05-26T13:48:07.787000"
                    elapsed_time: 10.617
                    result:
                      success: true
                      message: "Portfolio update completed in 10.62 seconds"
                      data:
                        total_strategies: 3
                        total_open_trades: 2
                        total_signal_entries: 1
                        signal_entry_ratio: 0.3333
                        breadth_ratio: 0.6667
                running:
                  summary: Script in progress
                  value:
                    execution_id: "9322338b-68ee-4ed6-ae5c-2db7f965584e"
                    status: "running"
                    progress: 66
                    message: "Processing strategy configuration for BTC-USD_QQQ"
                    start_time: "2025-05-26T13:48:07.787000"
                    elapsed_time: 5.234
        '404':
          description: Execution ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/scripts/status-stream/{execution_id}:
    get:
      tags:
        - scripts
      summary: Stream script execution status
      description: |
        Stream real-time status updates for a script execution using Server-Sent Events (SSE).
        
        **Usage in Sensylate:**
        - Provides real-time progress updates during portfolio updates
        - Updates every 0.5 seconds until completion
        - Automatically closes connection when script completes or fails
        
        **Event Format:**
        ```
        data: {"status": "running", "execution_id": "...", "message": "...", "progress": 33}
        
        data: {"status": "completed", "execution_id": "...", "result": {...}}
        ```
      parameters:
        - in: path
          name: execution_id
          required: true
          schema:
            type: string
            format: uuid
          description: Unique execution identifier
          example: "9322338b-68ee-4ed6-ae5c-2db7f965584e"
      responses:
        '200':
          description: Server-Sent Events stream
          content:
            text/event-stream:
              schema:
                type: string
                description: |
                  SSE stream with JSON-encoded status updates.
                  
                  Example events:
                  ```
                  data: {"status": "running", "execution_id": "9322338b-68ee-4ed6-ae5c-2db7f965584e", "message": "Processing strategy configuration for BTC-USD_RSP", "progress": 33}
                  
                  data: {"status": "running", "execution_id": "9322338b-68ee-4ed6-ae5c-2db7f965584e", "message": "Processing strategy configuration for BTC-USD_QQQ", "progress": 66}
                  
                  data: {"status": "completed", "execution_id": "9322338b-68ee-4ed6-ae5c-2db7f965584e", "message": "Portfolio update completed in 10.62 seconds", "result": {"success": true, "total_strategies": 3, "signal_entries": 1, "breadth_ratio": 0.6667}}
                  ```
          headers:
            Cache-Control:
              schema:
                type: string
                example: "no-cache"
            Connection:
              schema:
                type: string
                example: "keep-alive"
            Content-Type:
              schema:
                type: string
                example: "text/event-stream"
        '404':
          description: Execution ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/scripts/list:
    get:
      tags:
        - scripts
      summary: List available scripts
      description: Get a list of all available scripts that can be executed
      responses:
        '200':
          description: List of available scripts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # MA Cross Analysis Endpoints
  /api/ma-cross/analyze:
    post:
      tags:
        - ma-cross
      summary: Full portfolio analysis with parameter sensitivity testing
      description: |
        Perform comprehensive portfolio analysis with parameter sensitivity testing for Moving Average Crossover strategies. Supports both Simple Moving Average (SMA) and Exponential Moving Average (EMA).

        **Key Features:**
        - Full backtesting across multiple parameter combinations
        - Real-time progress tracking via SSE streams
        - Automatic portfolio filtering based on performance criteria
        - CSV export of results to standard locations
        - Support for both synchronous and asynchronous execution

        **Performance Metrics:**
        - Total return and risk-adjusted returns
        - Sharpe, Sortino, and Calmar ratios
        - Maximum drawdown and recovery factor
        - Win rate, profit factor, and expectancy
        - Kelly criterion and position sizing
        - VaR and CVaR risk metrics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MACrossRequest'
            examples:
              basic_analysis:
                summary: Basic MA Cross analysis
                value:
                  ticker: "BTC-USD"
                  windows: 8
              advanced_analysis:
                summary: Advanced analysis with multiple tickers
                value:
                  ticker: ["BTC-USD", "ETH-USD", "SOL-USD"]
                  windows: 12
                  strategy_types: ["SMA", "EMA"]
                  async_execution: true
              custom_criteria:
                summary: Analysis with filtering criteria
                value:
                  ticker: "AAPL"
                  windows: 252
                  strategy_types: ["SMA"]
                  min_criteria:
                    trades: 10
                    win_rate: 0.6
                    profit_factor: 1.5
      responses:
        '200':
          description: Successful analysis response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MACrossResponse'
        '202':
          description: Asynchronous execution accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MACrossAsyncResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ma-cross/status/{execution_id}:
    get:
      tags:
        - ma-cross
      summary: Get analysis task status
      description: Check the status of an asynchronous MA Cross analysis task
      parameters:
        - name: execution_id
          in: path
          required: true
          description: Execution ID returned from async analysis request
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MACrossStatusResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ma-cross/stream/{execution_id}:
    get:
      tags:
        - ma-cross
      summary: Stream analysis progress
      description: |
        Get real-time updates for MA Cross analysis via Server-Sent Events.
        The stream provides progress updates and partial results as the analysis runs.
      parameters:
        - name: execution_id
          in: path
          required: true
          description: Execution ID for the analysis to stream
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Server-Sent Events stream
          content:
            text/event-stream:
              schema:
                type: string
                description: |
                  SSE stream with analysis progress updates.
                  
                  Example events:
                  ```
                  data: {"status": "running", "progress": 10, "message": "Initializing SMA analysis", "progress_details": {"phase": "initializing", "current": 1, "total": 10, "percentage": 10.0}}
                  
                  data: {"status": "running", "progress": 30, "message": "Processing BTC-USD", "progress_details": {"phase": "backtesting", "current": 3, "total": 10, "percentage": 30.0}}
                  
                  data: {"status": "running", "progress": 60, "message": "Filtering portfolios", "progress_details": {"phase": "filtering", "current": 6, "total": 10, "percentage": 60.0}}
                  
                  data: {"status": "completed", "progress": 100, "message": "Analysis complete", "result": {"success": true, "portfolios": [...]}}
                  
                  data: [DONE]
                  ```
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ma-cross/metrics:
    get:
      tags:
        - ma-cross
      summary: Get service metrics
      description: |
        Retrieve performance metrics for the MA Cross service including:
        - Request statistics
        - Cache performance
        - Average response times
        - Active/completed task counts
      responses:
        '200':
          description: Service metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MACrossMetricsResponse'

  /api/ma-cross/health:
    get:
      tags:
        - ma-cross
      summary: Check MA Cross service health
      description: Health check endpoint specific to the MA Cross service
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  # Data Retrieval Endpoints
  /api/data/csv/{file_path}:
    get:
      tags:
        - data
      summary: Get CSV data
      description: |
        Retrieve and parse CSV file data with security validation.
        
        **Sensylate Usage:**
        - Primary endpoint for loading portfolio data
        - Returns parsed CSV with column headers and data rows
        - Used for displaying strategy metrics in data tables
        
        **Allowed directories:**
        - `csv/` - All CSV data files
        - `csv/strategies/` - Portfolio strategy files
        - `csv/price_data/` - Market price data
      parameters:
        - in: path
          name: file_path
          required: true
          schema:
            type: string
          description: Path to the CSV file (relative to project root)
          example: "csv/strategies/DAILY_test.csv"
      responses:
        '200':
          description: CSV data retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CSVData'
                      file_path:
                        type: string
                        description: Path to the file
                        example: "csv/strategies/DAILY_test.csv"
              example:
                status: "success"
                data:
                  data:
                    - Ticker: "BTC-USD_RSP"
                      Short Window: 61
                      Long Window: 66
                      Strategy Type: "SMA"
                      Signal Entry: false
                      Signal Exit: false
                      Total Trades: 39
                      Score: 2.0971743838296493
                      Win Rate [%]: 74.35897435897436
                      Total Return [%]: 6283.200931687664
                    - Ticker: "BTC-USD_QQQ"
                      Short Window: 71
                      Long Window: 77
                      Strategy Type: "SMA"
                      Signal Entry: false
                      Signal Exit: false
                      Total Trades: 37
                      Score: 2.090154800932333
                      Win Rate [%]: 70.27027027027027
                      Total Return [%]: 7327.536342956961
                    - Ticker: "BTC-USD_SPY"
                      Short Window: 73
                      Long Window: 76
                      Strategy Type: "SMA"
                      Signal Entry: true
                      Signal Exit: false
                      Total Trades: 41
                      Score: 2.0720115150269995
                      Win Rate [%]: 70.73170731707317
                      Total Return [%]: 12779.198986911862
                  columns: ["Ticker", "Short Window", "Long Window", "Strategy Type", "Signal Entry", "Signal Exit", "Total Trades", "Score", "Win Rate [%]", "Total Return [%]"]
                format: "csv"
                file_path: "csv/strategies/DAILY_test.csv"
        '400':
          description: Bad request - invalid file path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                message: "File path must be within allowed directories"
                detail: "Attempted to access: ../../../etc/passwd"
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: "error"
                message: "File not found: nonexistent.csv"
                detail: "The requested file does not exist or is not accessible"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/data/json/{file_path}:
    get:
      tags:
        - data
      summary: Get JSON data
      description: |
        Retrieve JSON file data with security validation.
        
        **Common Use Cases:**
        - Portfolio configuration files
        - Strategy parameter files
        - Market data exports
      parameters:
        - in: path
          name: file_path
          required: true
          schema:
            type: string
          description: Path to the JSON file (relative to project root)
          example: "json/portfolios/crypto.json"
      responses:
        '200':
          description: JSON data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Bad request - invalid file path
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/data/list:
    get:
      tags:
        - data
      summary: List files in default directory
      description: |
        List files in the default directory (csv).
        
        **Query Parameters:**
        - `directory` - Override default directory
      parameters:
        - in: query
          name: directory
          schema:
            type: string
            default: "csv"
          description: Directory to list files from
          example: "strategies"
      responses:
        '200':
          description: File list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileListResponse'
        '400':
          description: Bad request - invalid directory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Directory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/data/list/{directory}:
    get:
      tags:
        - data
      summary: List files in specific directory
      description: |
        List files in a specific directory.
        
        **Sensylate Usage:**
        - Primary endpoint for loading strategy file lists
        - Called on app initialization to populate file selector
        - Often results in duplicate requests due to React behavior
      parameters:
        - in: path
          name: directory
          required: true
          schema:
            type: string
          description: Directory to list files from
          example: "strategies"
      responses:
        '200':
          description: File list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileListResponse'
              example:
                status: "success"
                files:
                  - name: "DAILY.csv"
                    path: "csv/strategies/DAILY.csv"
                    type: "file"
                    size: 12345
                    last_modified: "2025-05-26T13:47:38.000Z"
                  - name: "DAILY_test.csv"
                    path: "csv/strategies/DAILY_test.csv"
                    type: "file"
                    size: 34567
                    last_modified: "2025-05-26T13:47:59.000Z"
                directory: "csv/strategies"
        '400':
          description: Bad request - invalid directory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Directory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # Request Models
    ScriptExecutionRequest:
      type: object
      required:
        - script_path
      properties:
        script_path:
          type: string
          description: Path to the script to execute (must be in allowed directories)
          example: "app/ma_cross/1_get_portfolios.py"
        async_execution:
          type: boolean
          default: false
          description: Whether to execute the script asynchronously
        parameters:
          type: object
          additionalProperties: true
          description: Parameters to pass to the script
          example:
            TICKER: ["NVDA", "NFLX"]
            WINDOWS: 89
            DIRECTION: "Long"

    # MA Cross Models
    MACrossRequest:
      type: object
      required:
        - ticker
      properties:
        ticker:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Trading symbol(s) to analyze
          example: "BTC-USD"
        windows:
          type: integer
          minimum: 2
          maximum: 500
          default: 252
          description: Number of parameter combinations to test
        strategy_types:
          type: array
          items:
            type: string
            enum: ["SMA", "EMA"]
          default: ["SMA", "EMA"]
          description: Moving average types to analyze
        direction:
          type: string
          enum: ["Long", "Short"]
          default: "Long"
          description: Trading direction
        use_hourly:
          type: boolean
          default: false
          description: Use hourly data instead of daily
        start_date:
          type: string
          format: date
          description: Start date for analysis (YYYY-MM-DD)
        end_date:
          type: string
          format: date
          description: End date for analysis (YYYY-MM-DD)
        min_criteria:
          $ref: '#/components/schemas/MinimumCriteria'
        async_execution:
          type: boolean
          default: false
          description: Execute analysis asynchronously

    MinimumCriteria:
      type: object
      description: Minimum criteria for filtering portfolio results
      properties:
        trades:
          type: integer
          minimum: 0
          default: 10
          description: Minimum number of trades
        win_rate:
          type: number
          minimum: 0
          maximum: 1
          default: 0.5
          description: Minimum win rate (0-1)
        expectancy_per_trade:
          type: number
          default: 0.001
          description: Minimum expectancy per trade
        profit_factor:
          type: number
          minimum: 0
          default: 1.0
          description: Minimum profit factor
        score:
          type: number
          default: 1.0
          description: Minimum portfolio score
        sortino_ratio:
          type: number
          default: 0.0
          description: Minimum Sortino ratio
        beats_bnh:
          type: number
          default: 0.0
          description: Minimum percentage to beat Buy and Hold

    MACrossResponse:
      type: object
      required:
        - success
        - execution_id
        - ticker
        - strategy_types
        - portfolios
      properties:
        success:
          type: boolean
          description: Whether the analysis succeeded
        execution_id:
          type: string
          format: uuid
          description: Unique execution identifier
        ticker:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Analyzed ticker(s)
        strategy_types:
          type: array
          items:
            type: string
          description: Strategy types analyzed
        windows:
          type: integer
          description: Number of window combinations tested
        portfolios:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioMetrics'
          description: Analyzed portfolio results
        total_portfolios_analyzed:
          type: integer
          description: Total number of portfolios analyzed
        total_portfolios_filtered:
          type: integer
          description: Number of portfolios after filtering
        portfolio_exports:
          type: object
          properties:
            portfolios:
              type: array
              items:
                type: string
              description: Paths to exported portfolio CSV files
            portfolios_filtered:
              type: array
              items:
                type: string
              description: Paths to filtered portfolio CSV files
            portfolios_best:
              type: array
              items:
                type: string
              description: Paths to best portfolio CSV files
          description: Export file paths
        execution_time:
          type: number
          description: Analysis execution time in seconds
        message:
          type: string
          description: Status message

    PortfolioMetrics:
      type: object
      required:
        - ticker
        - strategy
        - fast_window
        - slow_window
        - total_return
      properties:
        ticker:
          type: string
          description: Ticker symbol
        timeframe:
          type: string
          default: "D"
          description: Data timeframe (D=Daily, H=Hourly)
        strategy:
          type: string
          enum: ["SMA", "EMA"]
          description: Moving average type
        fast_window:
          type: integer
          description: Fast MA period
        slow_window:
          type: integer
          description: Slow MA period
        total_return:
          type: number
          description: Total return percentage
        sharpe_ratio:
          type: number
          default: 0.0
          description: Sharpe ratio
        max_drawdown:
          type: number
          default: 0.0
          description: Maximum drawdown percentage
        win_rate:
          type: number
          default: 0.0
          description: Win rate (0-1)
        num_trades:
          type: integer
          default: 0
          description: Total number of trades
        avg_trade_return:
          type: number
          default: 0.0
          description: Average return per trade
        profit_factor:
          type: number
          default: 0.0
          description: Profit factor
        recovery_factor:
          type: number
          default: 0.0
          description: Recovery factor
        calmar_ratio:
          type: number
          default: 0.0
          description: Calmar ratio
        sortino_ratio:
          type: number
          default: 0.0
          description: Sortino ratio
        total_fees:
          type: number
          default: 0.0
          description: Total trading fees
        net_pnl:
          type: number
          default: 0.0
          description: Net profit/loss
        start_date:
          type: string
          nullable: true
          description: Backtest start date
        end_date:
          type: string
          nullable: true
          description: Backtest end date
        total_days:
          type: integer
          default: 0
          description: Total trading days
        market_exposure:
          type: number
          default: 0.0
          description: Market exposure percentage
        risk_adjusted_return:
          type: number
          default: 0.0
          description: Risk-adjusted return
        volatility:
          type: number
          default: 0.0
          description: Return volatility
        var_95:
          type: number
          default: 0.0
          description: 95% Value at Risk
        cvar_95:
          type: number
          default: 0.0
          description: 95% Conditional Value at Risk
        best_trade:
          type: number
          default: 0.0
          description: Best trade return
        worst_trade:
          type: number
          default: 0.0
          description: Worst trade return
        avg_win:
          type: number
          default: 0.0
          description: Average winning trade
        avg_loss:
          type: number
          default: 0.0
          description: Average losing trade
        win_loss_ratio:
          type: number
          default: 0.0
          description: Win/loss ratio
        expectancy:
          type: number
          default: 0.0
          description: Expectancy per trade
        kelly_criterion:
          type: number
          default: 0.0
          description: Kelly criterion
        tail_ratio:
          type: number
          default: 0.0
          description: Tail ratio
        common_sense_ratio:
          type: number
          default: 0.0
          description: Common sense ratio
        cpc_ratio:
          type: number
          default: 0.0
          description: CPC ratio
        outlier_win_ratio:
          type: number
          default: 0.0
          description: Outlier win ratio
        outlier_loss_ratio:
          type: number
          default: 0.0
          description: Outlier loss ratio
        total_closed_trades:
          type: integer
          default: 0
          description: Total closed trades
        total_open_trades:
          type: integer
          default: 0
          description: Total open trades
        won_trades:
          type: integer
          default: 0
          description: Number of winning trades
        lost_trades:
          type: integer
          default: 0
          description: Number of losing trades

    MACrossAsyncResponse:
      type: object
      required:
        - success
        - execution_id
        - ticker
        - strategy_types
        - message
      properties:
        success:
          type: boolean
          description: Whether the request was accepted
        execution_id:
          type: string
          format: uuid
          description: Task ID for tracking
        ticker:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Ticker(s) being analyzed
        strategy_types:
          type: array
          items:
            type: string
          description: Strategy types being analyzed
        windows:
          type: integer
          description: Number of window combinations
        message:
          type: string
          default: "Analysis started"
          description: Status message

    MACrossStatusResponse:
      type: object
      required:
        - execution_id
        - status
        - progress
      properties:
        execution_id:
          type: string
          format: uuid
          description: Execution identifier
        status:
          type: string
          enum: ["pending", "running", "completed", "failed"]
          description: Current task status
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Progress percentage
        message:
          type: string
          nullable: true
          description: Current status message
        progress_details:
          type: object
          nullable: true
          properties:
            phase:
              type: string
              description: Current execution phase
            current:
              type: integer
              description: Current step number
            total:
              type: integer
              description: Total steps
            percentage:
              type: number
              description: Progress percentage
            elapsed_time:
              type: number
              description: Elapsed time in seconds
          description: Detailed progress information
        result:
          $ref: '#/components/schemas/MACrossResponse'
          nullable: true
          description: Final result (when completed)
        error:
          type: string
          nullable: true
          description: Error message (if failed)
        start_time:
          type: string
          format: date-time
          nullable: true
          description: Task start time
        elapsed_time:
          type: number
          nullable: true
          description: Elapsed time in seconds

    MACrossMetricsResponse:
      type: object
      required:
        - requests_total
        - requests_success
        - requests_failed
        - avg_response_time
        - cache_hits
        - cache_misses
        - cache_hit_rate
        - active_tasks
        - completed_tasks
        - failed_tasks
      properties:
        requests_total:
          type: integer
          description: Total requests received
        requests_success:
          type: integer
          description: Successful requests
        requests_failed:
          type: integer
          description: Failed requests
        avg_response_time:
          type: number
          description: Average response time in seconds
        cache_hits:
          type: integer
          description: Number of cache hits
        cache_misses:
          type: integer
          description: Number of cache misses
        cache_hit_rate:
          type: number
          description: Cache hit rate (0-1)
        active_tasks:
          type: integer
          description: Currently running tasks
        completed_tasks:
          type: integer
          description: Completed tasks
        failed_tasks:
          type: integer
          description: Failed tasks
        uptime_seconds:
          type: number
          description: Service uptime in seconds
        last_reset:
          type: string
          format: date-time
          description: Last metrics reset time

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - version
        - dependencies
      properties:
        status:
          type: string
          enum: ["healthy", "degraded", "unhealthy"]
          description: Overall health status
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
        version:
          type: string
          description: Service version
        dependencies:
          type: object
          properties:
            database:
              type: string
              enum: ["healthy", "unhealthy"]
            cache:
              type: string
              enum: ["healthy", "unhealthy"]
            external_api:
              type: string
              enum: ["healthy", "unhealthy"]
        metrics:
          type: object
          properties:
            memory_usage_mb:
              type: number
              description: Memory usage in MB
            cpu_usage_percent:
              type: number
              description: CPU usage percentage
            active_connections:
              type: integer
              description: Active connections
    # Response Models
    BaseResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [success, error, accepted]
          description: Status of the response
        message:
          type: string
          description: Optional message

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - message
          properties:
            status:
              type: string
              enum: [error]
              example: "error"
            message:
              type: string
              description: Error message
              example: "File not found"
            error_id:
              type: string
              description: Unique identifier for the error
              example: "a1b2c3d4e5f6"
            detail:
              type: string
              description: Detailed error information
              example: "The requested file does not exist or is not accessible"

    ScriptExecutionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - result
          properties:
            status:
              type: string
              enum: [success]
              example: "success"
            execution_id:
              type: string
              nullable: true
              description: Always null for synchronous execution
              example: null
            result:
              type: object
              additionalProperties: true
              description: Result of the script execution

    AsyncScriptExecutionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - execution_id
          properties:
            status:
              type: string
              enum: [accepted]
              example: "accepted"
            execution_id:
              type: string
              format: uuid
              description: Unique identifier for the execution
              example: "9322338b-68ee-4ed6-ae5c-2db7f965584e"
            message:
              type: string
              example: "Script execution started"

    ScriptStatusResponse:
      type: object
      required:
        - execution_id
        - status
        - start_time
        - elapsed_time
      properties:
        execution_id:
          type: string
          format: uuid
          description: Unique identifier for the execution
          example: "9322338b-68ee-4ed6-ae5c-2db7f965584e"
        status:
          type: string
          enum: [pending, running, completed, failed]
          description: Current status of the execution
          example: "completed"
        progress:
          type: integer
          minimum: 0
          maximum: 100
          nullable: true
          description: Progress percentage (0-100)
          example: 100
        message:
          type: string
          nullable: true
          description: Status message
          example: "Portfolio update completed in 10.62 seconds"
        start_time:
          type: string
          format: date-time
          description: When the execution started
          example: "2025-05-26T13:48:07.787000"
        elapsed_time:
          type: number
          format: float
          description: Elapsed time in seconds
          example: 10.617
        result:
          type: object
          additionalProperties: true
          nullable: true
          description: Result if completed
          example:
            success: true
            message: "Portfolio update completed in 10.62 seconds"
            data:
              total_strategies: 3
              total_open_trades: 2
              total_signal_entries: 1
              signal_entry_ratio: 0.3333
              breadth_ratio: 0.6667
        error:
          type: string
          nullable: true
          description: Error message if failed
          example: "Script execution failed: Invalid data format"

    DataResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - data
            - format
          properties:
            status:
              type: string
              enum: [success]
              example: "success"
            data:
              oneOf:
                - $ref: '#/components/schemas/CSVData'
                - type: object
                  additionalProperties: true
              description: The retrieved data (structure depends on format)
            format:
              type: string
              enum: [csv, json]
              description: Format of the data
              example: "csv"

    CSVData:
      type: object
      required:
        - data
        - columns
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties: true
          description: Array of row objects with column headers as keys
          example:
            - Ticker: "BTC-USD_RSP"
              Short Window: 61
              Long Window: 66
              Strategy Type: "SMA"
              Signal Entry: false
              Total Trades: 39
              Score: 2.0971743838296493
        columns:
          type: array
          items:
            type: string
          description: Array of column header names
          example: ["Ticker", "Short Window", "Long Window", "Strategy Type", "Signal Entry"]

    FileInfo:
      type: object
      required:
        - name
        - path
        - type
        - last_modified
      properties:
        name:
          type: string
          description: Name of the file
          example: "DAILY_test.csv"
        path:
          type: string
          description: Full path to the file
          example: "csv/strategies/DAILY_test.csv"
        type:
          type: string
          enum: [file, directory]
          description: Type of the file system entry
          example: "file"
        size:
          type: integer
          nullable: true
          description: Size of the file in bytes (null for directories)
          example: 34567
        last_modified:
          type: string
          format: date-time
          description: When the file was last modified
          example: "2025-05-26T13:47:59.000Z"

    FileListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - files
            - directory
          properties:
            status:
              type: string
              enum: [success]
              example: "success"
            files:
              type: array
              items:
                $ref: '#/components/schemas/FileInfo'
              description: List of files in the directory
            directory:
              type: string
              description: Directory that was listed
              example: "csv/strategies"

    ScriptInfo:
      type: object
      required:
        - path
        - parameters
      properties:
        path:
          type: string
          description: Path to the script
          example: "app/ma_cross/1_get_portfolios.py"
        description:
          type: string
          nullable: true
          description: Description of the script
          example: "Generate moving average crossover portfolios"
        parameters:
          type: object
          additionalProperties:
            type: string
          description: Parameters accepted by the script with their descriptions
          example:
            TICKER: "Stock ticker symbol(s)"
            WINDOWS: "Moving average window size"
            DIRECTION: "Trading direction (Long/Short)"

    ScriptListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          required:
            - scripts
          properties:
            status:
              type: string
              enum: [success]
              example: "success"
            scripts:
              type: array
              items:
                $ref: '#/components/schemas/ScriptInfo'
              description: List of available scripts

  # Security Schemes
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (future implementation)

# Global security (currently disabled for development)
# security:
#   - ApiKeyAuth: []

tags:
  - name: root
    description: Root endpoints for API information
  - name: health
    description: Health check endpoints
  - name: scripts
    description: Script execution and management
  - name: ma-cross
    description: Moving Average Crossover strategy analysis
  - name: data
    description: Data file retrieval and listing

externalDocs:
  description: Trading API Documentation
  url: http://127.0.0.1:8000/docs