name: Tests

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  schedule:
    # Run E2E tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests (Fast Feedback)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry

      - name: Validate test markers
        run: |
          poetry run python tests/validate_markers.py --stats
          echo "📊 Marker validation complete"

      - name: Run unit tests
        run: |
          poetry run pytest -m unit \
            -n auto \
            --maxfail=10 \
            --tb=short \
            --color=yes \
            -v \
            --junitxml=test-results/unit-tests.xml
        timeout-minutes: 8

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 30

      - name: Test Summary
        if: always()
        run: |
          if [ -f test-results/unit-tests.xml ]; then
            echo "✅ Unit tests completed"
            grep -oP 'tests="\K[0-9]+' test-results/unit-tests.xml || echo "0"
          fi

  integration-tests:
    name: Integration Tests (Parallel)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        test-group:
          - export
          - position
          - api
          - other

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry

      - name: Install fakeredis for in-memory Redis
        run: poetry add --group dev fakeredis

      - name: Run integration tests - Export Group
        if: matrix.test-group == 'export'
        run: |
          poetry run pytest tests/cli/integration/test_export_matrix.py \
                          tests/cli/integration/test_export_schemas.py \
                          tests/integration/test_empty_export_integration.py \
                          -v -m "integration" \
                          --maxfail=5 \
                          --tb=short \
                          -n 4 \
                          --dist worksteal \
                          --strict-isolation

      - name: Run integration tests - Position Group
        if: matrix.test-group == 'position'
        run: |
          poetry run pytest tests/integration/test_position_workflows.py \
                          tests/database/ \
                          -v -m "integration" \
                          --maxfail=5 \
                          --tb=short \
                          -n 2

      - name: Run integration tests - API Group
        if: matrix.test-group == 'api'
        run: |
          poetry run pytest tests/api/ \
                          -v -m "integration" \
                          --maxfail=5 \
                          --tb=short \
                          -n 4

      - name: Run integration tests - Other
        if: matrix.test-group == 'other'
        run: |
          poetry run pytest tests/ \
                          -v -m "integration" \
                          --ignore=tests/api/ \
                          --ignore=tests/cli/integration/test_export_matrix.py \
                          --ignore=tests/cli/integration/test_export_schemas.py \
                          --ignore=tests/integration/test_empty_export_integration.py \
                          --ignore=tests/integration/test_position_workflows.py \
                          --ignore=tests/database/ \
                          --maxfail=10 \
                          --tb=short \
                          -n auto

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ matrix.test-group }}
          path: htmlcov/
          retention-days: 30

  e2e-tests:
    name: E2E Tests (Full Stack)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Only run E2E on main branch pushes, scheduled runs, or manual dispatch
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry

      - name: Start Docker Compose stack
        run: |
          docker compose -f docker-compose.e2e.yml up -d
          echo "⏳ Waiting for services to be healthy..."

      - name: Wait for API health
        run: |
          for i in {1..180}; do
            if curl -sf http://localhost:8000/health/ >/dev/null; then
              echo "✅ API is healthy"
              exit 0
            fi
            echo "Waiting for API... ($i/180)"
            sleep 1
          done
          echo "❌ API did not become healthy in time"
          docker compose -f docker-compose.e2e.yml logs
          exit 1

      - name: Verify service health
        run: |
          echo "🔍 Checking service health..."
          curl -v http://localhost:8000/health/detailed || true
          docker compose -f docker-compose.e2e.yml ps

      - name: Run E2E tests
        run: |
          poetry run pytest -m e2e \
            -v \
            --maxfail=5 \
            --tb=long \
            --color=yes \
            --junitxml=test-results/e2e-tests.xml
        timeout-minutes: 20

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 30

      - name: Upload Docker logs on failure
        if: failure()
        run: |
          docker compose -f docker-compose.e2e.yml logs > docker-logs.txt

      - name: Upload Docker logs artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: docker-logs.txt
          retention-days: 30

      - name: Cleanup Docker stack
        if: always()
        run: |
          docker compose -f docker-compose.e2e.yml down -v
          docker system prune -f

      - name: Test Summary
        if: always()
        run: |
          echo "📊 E2E Test Summary"
          if [ -f test-results/e2e-tests.xml ]; then
            grep -oP 'tests="\K[0-9]+' test-results/e2e-tests.xml || echo "0 tests"
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          unit_result="${{ needs.unit-tests.result }}"
          integration_result="${{ needs.integration-tests.result }}"
          e2e_result="${{ needs.e2e-tests.result }}"

          echo "📊 Test Results Summary"
          echo "Unit Tests: $unit_result"
          echo "Integration Tests: $integration_result"
          echo "E2E Tests: $e2e_result"

          # E2E tests may be skipped, so only check if they ran
          if [ "$unit_result" == "failure" ] || [ "$integration_result" == "failure" ]; then
            echo "::error::Tests failed"
            exit 1
          fi

          if [ "$e2e_result" == "failure" ]; then
            echo "::error::E2E tests failed"
            exit 1
          fi

          echo "::notice::All tests passed"
