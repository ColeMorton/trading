name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # CodeQL Analysis for SAST
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}/custom'
          # Use custom category to avoid conflict with default setup
          upload: true

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --only main

      - name: Run Safety check
        run: |
          pip install safety
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          safety check --file requirements.txt --json > safety-report.json || true

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 90

  # Container image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: false
          load: true
          tags: trading-api:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: trading-api:scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0' # Don't fail build, just report

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-scan'

      - name: Run Trivy in table format
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: trading-api:scan
          format: 'table'
          severity: 'CRITICAL,HIGH'

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_SUMMARY: true

  # Python security linting
  bandit-scan:
    name: Bandit Security Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --only dev

      - name: Run Bandit security scanner
        run: |
          poetry run bandit -r app/ -ll -f json -o bandit-report.json || true
          poetry run bandit -r app/ -ll -f screen

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json
          retention-days: 90

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, container-scan, secret-scan, bandit-scan]
    if: always()
    steps:
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.codeql.result }}" == "success" ]; then
            echo "✅ **CodeQL Analysis**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CodeQL Analysis**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "✅ **Dependency Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.container-scan.result }}" == "success" ]; then
            echo "✅ **Container Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Container Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ **Secret Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Secret Scan**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.bandit-scan.result }}" == "success" ]; then
            echo "✅ **Bandit Security Lint**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Bandit Security Lint**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Detailed vulnerability reports available in GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Scan artifacts retained for 90 days" >> $GITHUB_STEP_SUMMARY
          echo "- Daily automated scans scheduled at 3 AM UTC" >> $GITHUB_STEP_SUMMARY
