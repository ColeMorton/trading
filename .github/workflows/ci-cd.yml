name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Version validation - ensures consistency across Docker and CI/CD
  validate-versions:
    name: Validate Tool Versions
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate version consistency
        run: |
          chmod +x scripts/validate-versions.sh
          ./scripts/validate-versions.sh

  # Linting and code quality
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: validate-versions
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python with Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          dependency-groups: 'all'
          cache-key-suffix: 'lint'

      - name: Run linters
        run: |
          poetry run ruff format --check .
          poetry run ruff check .
          poetry run mypy app/ || echo "⚠️ mypy found type issues (non-blocking)"

      - name: Security scan with bandit
        run: poetry run bandit -r app/ -ll

      - name: Complexity analysis (radon)
        run: |
          echo "🔍 Analyzing code complexity..."
          poetry run radon cc app/ --min C --total-average --no-assert || echo "⚠️ High complexity functions detected (non-blocking)"
          poetry run radon mi app/ --min B --show --no-assert || echo "⚠️ Low maintainability files detected (non-blocking)"
        continue-on-error: true

      - name: Dead code detection (vulture)
        run: |
          echo "🔍 Checking for dead code..."
          poetry run vulture app/ --min-confidence 80 --exclude "*/migrations/*,*/tests/*" || echo "⚠️ Dead code detected (non-blocking)"
        continue-on-error: true

      - name: Architecture contracts (import-linter)
        run: |
          echo "🔍 Validating architecture contracts..."
          poetry run lint-imports --verbose || echo "⚠️ Architecture violations detected (non-blocking)"
        continue-on-error: true

  # Tests are now run via tests.yml workflow
  # This ensures better separation and allows tests to run independently

  # Performance tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python with Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          dependency-groups: 'all'
          cache-key-suffix: 'perf'

      - name: Run performance tests
        env:
          ENVIRONMENT: test
          PYTEST_RUNNING: 1
        run: |
          poetry run pytest tests/performance/ -v -m performance --tb=short

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            .pytest_cache/
            htmlcov/
          retention-days: 90

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile.api
            context: .
            image: api
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.sha }}

  # E2E tests now run via tests.yml workflow
  # This ensures better separation and allows E2E tests to run on schedule

  # CI/CD Summary
  ci-summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [lint, test-performance, build]
    if: always()
    steps:
      - name: Generate CI/CD Summary
        run: |
          echo "# 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "✅ **Linting**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Linting**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-performance.result }}" == "success" ]; then
            echo "✅ **Performance Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-performance.result }}" == "skipped" ]; then
            echo "⏭️ **Performance Tests**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Performance Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **Docker Build**: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.result }}" == "skipped" ]; then
            echo "⏭️ **Docker Build**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker Build**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Unit, integration, and E2E tests run via tests.yml workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Code Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Quality metrics are advisory and do not fail the build_" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Baseline (2025-10-30):**" >> $GITHUB_STEP_SUMMARY
          echo "- High Complexity Functions: 147 (target: < 50)" >> $GITHUB_STEP_SUMMARY
          echo "- Low Maintainability Files: 22 (target: < 10)" >> $GITHUB_STEP_SUMMARY
          echo "- Dead Code Instances: 36 (target: 0)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_See lint job output for current metrics_" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Performance test results available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Docker images pushed to GHCR (if applicable)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [ "${{ needs.lint.result }}" == "success" ] && \
             ([ "${{ needs.build.result }}" == "success" ] || [ "${{ needs.build.result }}" == "skipped" ]); then
            echo "## ✅ Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Overall Status: FAILURE" >> $GITHUB_STEP_SUMMARY
          fi
