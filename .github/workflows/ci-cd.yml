name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Linting and code quality
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run linters
        run: |
          poetry run black --check .
          poetry run isort --check-only .
          poetry run flake8 .
          poetry run mypy app/ || echo "⚠️ mypy found type issues (non-blocking)"

      - name: Security scan with bandit
        run: poetry run bandit -r app/ -ll

  # Unit tests
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          poetry run prisma generate
          poetry run prisma migrate deploy

      - name: Run unified test suite
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
          PYTEST_RUNNING: 1
        run: |
          poetry run python tests/run_unified_tests.py ci -c --save ci_results.json

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-test-results
          path: ci_results.json
          retention-days: 30

  # Performance tests
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run performance tests
        env:
          ENVIRONMENT: test
          PYTEST_RUNNING: 1
        run: |
          poetry run python tests/run_unified_tests.py performance --save performance_results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: performance_results.json
          retention-days: 90

      - name: Performance regression check
        run: |
          # Compare with baseline if available
          if [ -f baseline_performance.json ]; then
            poetry run python tests/check_performance_regression.py performance_results.json baseline_performance.json
          fi

  # Frontend tests
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/frontend/sensylate/package-lock.json

      - name: Install dependencies
        working-directory: app/frontend/sensylate
        run: npm ci

      - name: Run linter
        working-directory: app/frontend/sensylate
        run: npm run lint

      - name: Run tests
        working-directory: app/frontend/sensylate
        run: npm test -- --coverage

      - name: Build application
        working-directory: app/frontend/sensylate
        run: npm run build

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile.api
            context: .
            image: api
          - dockerfile: app/frontend/sensylate/Dockerfile
            context: app/frontend/sensylate
            image: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ github.sha }}

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker compose -f docker-compose.yml -f docker-compose.prod.yml config

      - name: Start services
        run: |
          docker compose -f docker-compose.prod.yml up -d

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost/health; do sleep 1; done'

      - name: Run integration tests
        run: |
          docker compose -f docker-compose.prod.yml exec -T api python tests/run_unified_tests.py e2e -v --save integration_results.json

      - name: Collect logs
        if: failure()
        run: |
          docker compose -f docker-compose.prod.yml logs

      - name: Stop services
        if: always()
        run: |
          docker compose -f docker-compose.prod.yml down -v
