[pytest]
# Unified pytest configuration for trading system testing infrastructure
# Phase 3: Testing Infrastructure Consolidation

# Test discovery
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths - comprehensive coverage across all modules
testpaths =
    tests/unit
    tests
    app/api/tests
    tests/concurrency
    tests/e2e
    tests/frontend
    tests/portfolio_testing
    tests/strategies
    tests/tools

# Core options for unified testing
addopts =
    --verbose
    --strict-markers
    --tb=short
    --color=yes
    --asyncio-mode=auto
    --maxfail=10
    --disable-warnings

# Asyncio configuration
asyncio_default_fixture_loop_scope = function
asyncio_default_test_loop_scope = function

# Coverage configuration for core trading logic (80%+ target)
# Enable with: pytest --cov
addopts_coverage =
    --cov=app.core
    --cov=app.api
    --cov=app.concurrency
    --cov=app.strategies
    --cov=app.tools
    --cov=app.portfolio_optimization
    --cov=app.trading_bot
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-branch
    --cov-fail-under=80

# Unified test markers for all modules
# STRICT TAXONOMY: Every test MUST have exactly ONE primary marker (unit/integration/e2e)
markers =
    # PRIMARY Test Layer Markers (REQUIRED - pick exactly ONE per test)
    unit: Pure unit tests - no I/O, no external deps, <100ms (can run in parallel)
    integration: Integration tests - in-memory DB, mocked services, TestClient, <5s (requires isolation)
    e2e: End-to-end tests - Docker required, real HTTP, full stack, <60s (requires docker-compose)

    # SECONDARY Performance Markers (optional)
    smoke: Quick sanity checks - critical functionality verification
    performance: Performance and scaling tests
    regression: Regression tests for known issues
    slow: Tests that take a long time to run (>30s)
    fast: Fast tests that should run quickly (<5s)
    stress: Stress tests for extreme scenarios
    memory: Memory-intensive tests
    benchmark: Performance benchmark tests

    # SECONDARY Category Markers (optional, for filtering)
    api: API-related tests
    strategy: Trading strategy tests
    data: Data processing tests
    portfolio: Portfolio management tests
    risk: Risk management tests
    concurrency: Concurrency and parallel processing tests

    # SECONDARY Infrastructure Markers (optional)
    network: Tests requiring network access
    requires_api: Tests that require a running API server on localhost:8000
    requires_docker: Tests that require Docker Compose stack
    local: Tests for local development environment
    ci: Tests for continuous integration
    production: Tests for production validation

    # Framework specific
    asyncio: Asynchronous tests
    error_handling: Tests for error handling functionality
    xdist_group: mark tests to run in the same xdist worker group

    # Legacy/deprecated markers
    phase4: Tests developed in Phase 4 - Advanced testing capabilities

# Environment configuration
env_override_existing_values = 1
env_files =
    .env.test
    app/api/test.env

# Warning filters to reduce noise
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::pytest_asyncio.plugin.PytestDeprecationWarning
    ignore::UserWarning:yfinance.*
    ignore::FutureWarning:polars.*
    ignore::RuntimeWarning:vectorbt.*

# Logging configuration for debugging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test timeout (requires pytest-timeout)
# Removed: Let CI workflows handle timeouts to avoid conflicts
# timeout = 300
# timeout_method = thread

# Parallel execution options (requires pytest-xdist)
# Enable with: pytest -n auto
# Disabled by default for stable execution
# addopts = -n auto

# Custom test collection patterns
collect_ignore =
    setup.py
    build
    dist
    .eggs
    *.egg-info
    .git
    .pytest_cache
    __pycache__
    node_modules
    .venv
    venv
    tests/api/mcp_server

# Minimum Python version
minversion = 3.10

# Required plugins for full functionality
required_plugins =
    pytest-asyncio
    pytest-cov
    pytest-mock
    pytest-timeout

# Performance test configuration
performance_test_duration = 60
performance_baseline_tolerance = 0.2

# Memory test configuration
memory_limit_mb = 1024
memory_leak_threshold = 0.1

# Test data configuration
test_data_dir = tests/data
fixtures_dir = tests/fixtures
