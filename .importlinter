[importlinter]
root_package = app

# Contract 1: Layered Architecture (Clean Architecture)
# Note: Temporarily disabled due to Import Linter module detection issues
# The layers contract appears to have difficulty detecting modules even when they exist
# in the import graph. This needs further investigation with Import Linter maintainers.
# [importlinter:contract:1]
# name = Layered Architecture Enforcement
# type = layers
# layers =
#     cli
#     api
#     strategies | portfolio_optimization | portfolio_synthesis
#     database | concurrency | infrastructure
#     core | services | exceptions

# Contract 2: Domain Independence (No circular dependencies between strategies)
# Note: Only including strategy modules that are proper Python packages (have __init__.py)
# Directories without __init__.py (atr, rsi, rate_of_decay, ma_cross, etc.) are excluded
[importlinter:contract:2]
name = Strategy Module Independence
type = independence
modules =
    app.strategies.atr
    app.strategies.macd
    app.strategies.comp

# Contract 3: Database Access Layer (prevent direct SQLAlchemy usage)
[importlinter:contract:3]
name = Database Access Layer Isolation
type = forbidden
source_modules =
    app.strategies.*
    app.portfolio_optimization.*
    app.cli.commands.*
forbidden_modules =
    app.database.models
# Allow database access only through repository pattern

# Contract 4: No Circular Dependencies in CLI Commands
[importlinter:contract:4]
name = CLI Command Independence
type = independence
modules =
    app.cli.commands.tools
    app.cli.commands.strategy
    app.cli.commands.portfolio
    app.cli.commands.concurrency
    app.cli.commands.trade_history
    app.cli.commands.spds

# Contract 5: API Layer Isolation (API should not depend on CLI)
[importlinter:contract:5]
name = API-CLI Separation
type = forbidden
source_modules =
    app.api.*
forbidden_modules =
    app.cli.*
