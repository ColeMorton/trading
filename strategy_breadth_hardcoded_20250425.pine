
//@version=5
indicator("BTC Strategy Breadth Oscillator", shorttitle="StgyBreadth", overlay=false)

// Description:
// This indicator calculates how many strategies from a predefined collection
// are currently in a bullish position. It functions as a breadth oscillator that shows
// market sentiment based on multiple strategies simultaneously.

// ================ Main Configuration ================
var int totalStrategies = 24  // Total number of strategies
var float lowerBand = 0.0     // Minimum oscillator value
var float upperBand = 24.0    // Maximum oscillator value (total strategies)

// Default Colors
color bullColor = color.new(#26c6da, 0)
color bearColor = color.new(#7e57c2, 0)
color neutralColor = color.new(#3179f5, 0)

// Optional user inputs for time frame selection
timeframeInput = input.timeframe("D", "Strategy Timeframe", options=["H", "D", "W", "M"])

// Ticker selection for filtering strategies
tickerInput = input.string("ALL", "Ticker for Strategies", options=['ALL', 'BTC-USD', 'EDV', 'MSTR', 'TLT'])

// ================ Strategy Functions ================

// Function to calculate SMA Crossover signal
smaCrossSignal(shortWindow, longWindow) =>
    shortSMA = ta.sma(close, shortWindow)
    longSMA = ta.sma(close, longWindow)
    
    // Current state
    crossUp = shortSMA > longSMA
    
    // Return the signal (true if bullish)
    crossUp

// Function to calculate EMA Crossover signal
emaCrossSignal(shortWindow, longWindow) =>
    shortEMA = ta.ema(close, shortWindow)
    longEMA = ta.ema(close, longWindow)
    
    // Current state
    crossUp = shortEMA > longEMA
    
    // Return the signal (true if bullish)
    crossUp

// Function to calculate MACD signal
macdSignal(shortWindow, longWindow, signalWindow) =>
    [macdLine, signalLine, _] = ta.macd(close, shortWindow, longWindow, signalWindow)
    
    // Current state
    crossUp = macdLine > signalLine
    
    // Return the signal (true if bullish)
    crossUp

// ================ Error Handling Function ================
checkParameter(param, paramName) =>
    if param <= 0
        runtime.error("Invalid " + paramName + ": " + str.tostring(param) + ". Must be positive.")
        0
    else
        param

// ================ Strategy Configuration ================
// Strategy configuration - Hardcoded directly in calculateBreadth() function
// Source: csv/strategies/portfolio_d_20250425.csv
// Generated: 2025-04-27 18:43:00
// Total strategies: 24
// Strategies for BTC-USD: 11
// Strategies for MSTR: 11
// Strategies for TLT: 1
// Strategies for EDV: 1

// ================ Dynamic Strategy Processing ================
calculateBreadth() =>
    int strategiesInPosition = 0
    int totalApplicableStrategies = 0
    
    // Process each strategy directly with hardcoded parameters

    // Strategy 0: SMA(104, 105)
    totalApplicableStrategies += 1
    if smaCrossSignal(104, 105)
        strategiesInPosition += 1

    // Strategy 1: MACD(13, 21, 32)
    totalApplicableStrategies += 1
    if macdSignal(13, 21, 32)
        strategiesInPosition += 1

    // Strategy 2: MACD(14, 23, 13)
    totalApplicableStrategies += 1
    if macdSignal(14, 23, 13)
        strategiesInPosition += 1

    // Strategy 3: SMA(26, 38)
    totalApplicableStrategies += 1
    if smaCrossSignal(26, 38)
        strategiesInPosition += 1

    // Strategy 4: SMA(27, 29)
    totalApplicableStrategies += 1
    if smaCrossSignal(27, 29)
        strategiesInPosition += 1

    // Strategy 5: SMA(16, 82)
    totalApplicableStrategies += 1
    if smaCrossSignal(16, 82)
        strategiesInPosition += 1

    // Strategy 6: SMA(18, 21)
    totalApplicableStrategies += 1
    if smaCrossSignal(18, 21)
        strategiesInPosition += 1

    // Strategy 7: SMA(76, 78)
    totalApplicableStrategies += 1
    if smaCrossSignal(76, 78)
        strategiesInPosition += 1

    // Strategy 8: SMA(6, 27)
    totalApplicableStrategies += 1
    if smaCrossSignal(6, 27)
        strategiesInPosition += 1

    // Strategy 9: SMA(52, 90)
    totalApplicableStrategies += 1
    if smaCrossSignal(52, 90)
        strategiesInPosition += 1

    // Strategy 10: SMA(11, 36)
    totalApplicableStrategies += 1
    if smaCrossSignal(11, 36)
        strategiesInPosition += 1

    // Strategy 11: SMA(84, 90)
    totalApplicableStrategies += 1
    if smaCrossSignal(84, 90)
        strategiesInPosition += 1

    // Strategy 12: MACD(18, 29, 18)
    totalApplicableStrategies += 1
    if macdSignal(18, 29, 18)
        strategiesInPosition += 1

    // Strategy 13: MACD(13, 31, 11)
    totalApplicableStrategies += 1
    if macdSignal(13, 31, 11)
        strategiesInPosition += 1

    // Strategy 14: MACD(9, 13, 5)
    totalApplicableStrategies += 1
    if macdSignal(9, 13, 5)
        strategiesInPosition += 1

    // Strategy 15: SMA(6, 84)
    totalApplicableStrategies += 1
    if smaCrossSignal(6, 84)
        strategiesInPosition += 1

    // Strategy 16: MACD(7, 8, 12)
    totalApplicableStrategies += 1
    if macdSignal(7, 8, 12)
        strategiesInPosition += 1

    // Strategy 17: SMA(8, 44)
    totalApplicableStrategies += 1
    if smaCrossSignal(8, 44)
        strategiesInPosition += 1

    // Strategy 18: EMA(5, 68)
    totalApplicableStrategies += 1
    if emaCrossSignal(5, 68)
        strategiesInPosition += 1

    // Strategy 19: SMA(3, 47)
    totalApplicableStrategies += 1
    if smaCrossSignal(3, 47)
        strategiesInPosition += 1

    // Strategy 20: SMA(82, 114)
    totalApplicableStrategies += 1
    if smaCrossSignal(82, 114)
        strategiesInPosition += 1

    // Strategy 21: MACD(3, 15, 3)
    totalApplicableStrategies += 1
    if macdSignal(3, 15, 3)
        strategiesInPosition += 1

    // Strategy 22: SMA(43, 77)
    totalApplicableStrategies += 1
    if smaCrossSignal(43, 77)
        strategiesInPosition += 1

    // Strategy 23: SMA(49, 67)
    totalApplicableStrategies += 1
    if smaCrossSignal(49, 67)
        strategiesInPosition += 1

    
    // Return both the active strategies and the total applicable strategies
    [strategiesInPosition, totalApplicableStrategies]

// Request data using the specified timeframe
[strategiesActive, applicableStrategies] = request.security(syminfo.tickerid, timeframeInput, calculateBreadth())

// Update the total strategies variable based on applicable strategies
totalStrategies := applicableStrategies

// ================ Calculate Oscillator And Bands ================

// Calculate percentage of active strategies
strategyPercentage = (strategiesActive / totalStrategies) * 100

// Moving averages for signal lines
slowMA = ta.sma(strategiesActive, 20)
fastMA = ta.sma(strategiesActive, 5)

// Overbought/Oversold Thresholds
overboughtThreshold = input.int(8, "Overbought Threshold", minval=1, maxval=24)
oversoldThreshold = input.int(3, "Oversold Threshold", minval=0, maxval=23)

// ================ Visualization ================

// Colors based on the position relative to thresholds
oscillatorColor = strategiesActive > overboughtThreshold ? bullColor : 
                  strategiesActive < oversoldThreshold ? bearColor : 
                  neutralColor

// Plotting the oscillator
plot(strategiesActive, "Active Strategies", color=oscillatorColor, linewidth=2)
plot(slowMA, "20-day SMA", color=color.new(#ffffff, 0), linewidth=1)

// Plot upper and lower reference lines - using dashed lines instead of style parameter
plot(overboughtThreshold, "Overbought", color=color.new(#26c6da, 40), linewidth=1)
plot(oversoldThreshold, "Oversold", color=color.new(#7e57c2, 40), linewidth=1)

// Plot range bands
hline(0, "Min", color=color.new(#787b86, 70), linestyle=hline.style_dotted)
hline(24, "Max", color=color.new(#787b86, 70), linestyle=hline.style_dotted)

// ================ Alerts ================
// Create alerts for trading signals
crossingUp = ta.crossover(strategiesActive, oversoldThreshold)
crossingDown = ta.crossunder(strategiesActive, overboughtThreshold)
crossingMAUp = ta.crossover(fastMA, slowMA) 
crossingMADown = ta.crossunder(fastMA, slowMA)

// Alert conditions
alertcondition(crossingUp, "Breadth crossing up from oversold", "{{ticker}} breadth crossing above oversold level")
alertcondition(crossingDown, "Breadth crossing down from overbought", "{{ticker}} breadth crossing below overbought level")
alertcondition(crossingMAUp, "Fast MA crossing up Slow MA", "{{ticker}} breadth fast MA crossing above slow MA")
alertcondition(crossingMADown, "Fast MA crossing down Slow MA", "{{ticker}} breadth fast MA crossing below slow MA")

// Display aggregate statistics
var table infoTable = table.new(position.bottom_right, 2, 2, border_width=1)
if barstate.islast
    table.cell(infoTable, 0, 0, "Active Strategies", bgcolor=color.new(#000000, 90), text_color=color.white)
    table.cell(infoTable, 1, 0, str.tostring(strategiesActive) + " / " + str.tostring(totalStrategies), bgcolor=color.new(#000000, 90), text_color=oscillatorColor)
    table.cell(infoTable, 0, 1, "Percentage", bgcolor=color.new(#000000, 90), text_color=color.white)
    table.cell(infoTable, 1, 1, str.tostring(math.round(strategyPercentage)) + "%", bgcolor=color.new(#000000, 90), text_color=oscillatorColor)
