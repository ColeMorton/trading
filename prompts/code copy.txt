Core Development Principles

1. Package Management
- Use Poetry for dependency management

2. Data Processing
- Use Polars as the primary data processing library
- Avoid mixing Pandas and Polars in the same module
- Leverage Polars' optimized operations for large datasets
- vectorbt requires Polars to be converted first to Pandas

3. Type System
- Use TypedDict for configuration objects
- Define explicit return types for all functions
- Use type hints for function parameters
- Follow this type hint format:
```python
def function_name(param1: type1, param2: type2) -> return_type:
    """Function docstring"""
    pass
```

4. Logging
- Use app/tools/setup_logging.py for consistent logging implementation
- Follow this logging pattern:
```python
log, log_close, _, _ = setup_logging('module_name', log_dir, 'filename.log')
try:
    # Main logic
    log_close()
    return True
except Exception as e:
    log(f"Error: {str(e)}", "error")
    log_close()
    raise
```

5. Code Organization
- Group related functionality in the tools/ directory
- Use clear module naming that reflects purpose
- Files should have a single purpose and reuse existing code to reduce duplication
- Files should be no longer than 150 lines in length

6. Documentation
- Add docstrings to all functions following this format:
```python
"""
{Brief description}

Args:
    param1 (type): Description
    param2 (type): Description

Returns:
    type: Description

Raises:
    Exception: Description of when/why
"""
```

7. Error Handling
- Use try/except blocks with specific exception types
- Log errors before re-raising
- Include context in error messages

8. Configuration
- Use TypedDict for config definitions
- Define required and optional fields clearly
- Example:
```python
class Config(TypedDict):
    """Configuration type definition.

    Required Fields:
        FIELD1 (type): Description
        FIELD2 (type): Description

    Optional Fields:
        FIELD3 (NotRequired[type]): Description
    """
    FIELD1: type
    FIELD2: type
    FIELD3: NotRequired[type]
```

9. Analysis Tools
- Use vectorbt for backtesting
- Include visualization of results
- Save plots with consistent naming

10. Utility Functions
- Place reusable functions in app/tools/
- Keep utility functions focused and well-documented
- Use type hints and docstrings consistently

12. Performance
- Use Polars' optimized operations
- Implement caching where appropriate
- Profile and optimize critical paths

13. Visualization
- Use consistent plot styling
- Save plots with descriptive filenames
- Include proper labels and titles
- Add interactive elements where useful

14. Data Management
- Use consistent data loading patterns
- Implement proper data validation
- Handle missing data appropriately
- Use efficient data structures

15. Code Style
- Follow PEP 8 guidelines
- Use consistent naming conventions
- Keep functions focused and manageable
- Add comments for complex logic