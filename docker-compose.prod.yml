services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: trading_postgres_prod
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trading_db}
      POSTGRES_USER: ${POSTGRES_USER:-trading_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --locale=C'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    networks:
      - trading_network_prod
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: trading_redis_prod
    ports:
      - '6379:6379'
    volumes:
      - redis_data_prod:/data
    networks:
      - trading_network_prod
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'redis-cli',
          '--no-auth-warning',
          '-a',
          '${REDIS_PASSWORD}',
          'ping',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # FastAPI Application (Production)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VERSION=${VERSION:-latest}
    image: trading-api:${VERSION:-latest}
    container_name: trading_api_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-trading_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-trading_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS=${WORKERS:-4}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENABLE_GRAPHQL_PLAYGROUND=${ENABLE_GRAPHQL_PLAYGROUND:-false}
    networks:
      - trading_network_prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health/detailed']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # React Frontend (Production)
  frontend:
    build:
      context: ./app/frontend/sensylate
      dockerfile: Dockerfile
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VERSION=${VERSION:-latest}
        - VITE_API_URL=${VITE_API_URL:-/api}
        - VITE_GRAPHQL_URL=${VITE_GRAPHQL_URL:-/graphql}
        - VITE_USE_GRAPHQL=${VITE_USE_GRAPHQL:-true}
    image: trading-frontend:${VERSION:-latest}
    container_name: trading_frontend_prod
    environment:
      - NODE_ENV=production
    networks:
      - trading_network_prod
    restart: unless-stopped
    depends_on:
      - api
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:80/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    logging:
      driver: 'json-file'
      options:
        max-size: '20m'
        max-file: '3'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trading_nginx_prod
    ports:
      - '${HTTP_PORT:-80}:80'
      - '${HTTPS_PORT:-443}:443'
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - trading_network_prod
    restart: unless-stopped
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_prometheus_prod
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - trading_network_prod
    restart: unless-stopped
    profiles:
      - monitoring
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - trading_network_prod
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Database backup service
  db_backup:
    image: postgres:15-alpine
    container_name: trading_db_backup_prod
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-trading_db}
      - POSTGRES_USER=${POSTGRES_USER:-trading_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - trading_network_prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup
    command: ['sh', '-c', 'crond -f -l 2']

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trading_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
