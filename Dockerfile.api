# Multi-stage Dockerfile for FastAPI application

# Development stage
FROM python:3.11-slim as development

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Configure Poetry to not create virtual environment
RUN poetry config virtualenvs.create false

# Install dependencies
RUN poetry install --no-dev

# Copy application code
COPY . .

# Create non-root user
RUN useradd --create-home --shell /bin/bash app
RUN chown -R app:app /app
USER app

# Expose port
EXPOSE 8000

# Default command (can be overridden)
CMD ["uvicorn", "app.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM python:3.11-slim as production

# Build arguments
ARG BUILD_DATE
ARG VERSION

# Labels
LABEL maintainer="trading-app"
LABEL version="${VERSION}"
LABEL build-date="${BUILD_DATE}"

# Set working directory
WORKDIR /app

# Install system dependencies (minimal for production)
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry with specific version for reproducibility
ENV POETRY_VERSION=1.7.1
RUN pip install --no-cache-dir poetry==$POETRY_VERSION

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Configure Poetry for production
RUN poetry config virtualenvs.create false \
    && poetry config installer.max-workers 10

# Install only production dependencies with cache mount
RUN --mount=type=cache,target=/root/.cache/pip \
    poetry install --only=main --no-interaction --no-ansi

# Copy application code
COPY . .

# Generate Prisma client
RUN poetry run prisma generate

# Create non-root user with specific UID/GID for security
RUN groupadd -g 1001 app && \
    useradd -r -u 1001 -g app -s /bin/false app && \
    chown -R app:app /app

# Switch to non-root user
USER app

# Set Python environment variables for production
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONHASHSEED=random \
    PYTHONPATH=/app

# Expose port
EXPOSE 8000

# Health check with more detailed endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
    CMD curl -f http://localhost:8000/health/detailed || exit 1

# Production command with optimized settings
CMD ["uvicorn", "app.api.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--loop", "uvloop", \
     "--access-log", \
     "--log-config", "/app/logging.json"]
