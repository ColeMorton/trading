
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Ticker
 * 
 */
export type Ticker = $Result.DefaultSelection<Prisma.$TickerPayload>
/**
 * Model PriceData
 * 
 */
export type PriceData = $Result.DefaultSelection<Prisma.$PriceDataPayload>
/**
 * Model Strategy
 * 
 */
export type Strategy = $Result.DefaultSelection<Prisma.$StrategyPayload>
/**
 * Model StrategyConfiguration
 * 
 */
export type StrategyConfiguration = $Result.DefaultSelection<Prisma.$StrategyConfigurationPayload>
/**
 * Model BacktestResult
 * 
 */
export type BacktestResult = $Result.DefaultSelection<Prisma.$BacktestResultPayload>
/**
 * Model Portfolio
 * 
 */
export type Portfolio = $Result.DefaultSelection<Prisma.$PortfolioPayload>
/**
 * Model PortfolioStrategy
 * 
 */
export type PortfolioStrategy = $Result.DefaultSelection<Prisma.$PortfolioStrategyPayload>
/**
 * Model PortfolioMetric
 * 
 */
export type PortfolioMetric = $Result.DefaultSelection<Prisma.$PortfolioMetricPayload>
/**
 * Model Signal
 * 
 */
export type Signal = $Result.DefaultSelection<Prisma.$SignalPayload>
/**
 * Model Configuration
 * 
 */
export type Configuration = $Result.DefaultSelection<Prisma.$ConfigurationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AssetClass: {
  STOCK: 'STOCK',
  CRYPTO: 'CRYPTO',
  ETF: 'ETF',
  INDEX: 'INDEX',
  COMMODITY: 'COMMODITY',
  FOREX: 'FOREX',
  BOND: 'BOND'
};

export type AssetClass = (typeof AssetClass)[keyof typeof AssetClass]


export const StrategyType: {
  MA_CROSS: 'MA_CROSS',
  MACD: 'MACD',
  MEAN_REVERSION: 'MEAN_REVERSION',
  RSI: 'RSI',
  ATR: 'ATR',
  RANGE: 'RANGE',
  BOLLINGER_BANDS: 'BOLLINGER_BANDS',
  CUSTOM: 'CUSTOM'
};

export type StrategyType = (typeof StrategyType)[keyof typeof StrategyType]


export const TimeframeType: {
  ONE_MINUTE: 'ONE_MINUTE',
  FIVE_MINUTES: 'FIVE_MINUTES',
  FIFTEEN_MINUTES: 'FIFTEEN_MINUTES',
  THIRTY_MINUTES: 'THIRTY_MINUTES',
  ONE_HOUR: 'ONE_HOUR',
  TWO_HOURS: 'TWO_HOURS',
  FOUR_HOURS: 'FOUR_HOURS',
  SIX_HOURS: 'SIX_HOURS',
  EIGHT_HOURS: 'EIGHT_HOURS',
  TWELVE_HOURS: 'TWELVE_HOURS',
  ONE_DAY: 'ONE_DAY',
  THREE_DAYS: 'THREE_DAYS',
  ONE_WEEK: 'ONE_WEEK',
  ONE_MONTH: 'ONE_MONTH'
};

export type TimeframeType = (typeof TimeframeType)[keyof typeof TimeframeType]


export const DirectionType: {
  LONG: 'LONG',
  SHORT: 'SHORT',
  BOTH: 'BOTH'
};

export type DirectionType = (typeof DirectionType)[keyof typeof DirectionType]


export const PortfolioType: {
  STANDARD: 'STANDARD',
  BEST: 'BEST',
  FILTERED: 'FILTERED'
};

export type PortfolioType = (typeof PortfolioType)[keyof typeof PortfolioType]


export const SignalType: {
  BUY: 'BUY',
  SELL: 'SELL',
  HOLD: 'HOLD'
};

export type SignalType = (typeof SignalType)[keyof typeof SignalType]

}

export type AssetClass = $Enums.AssetClass

export const AssetClass: typeof $Enums.AssetClass

export type StrategyType = $Enums.StrategyType

export const StrategyType: typeof $Enums.StrategyType

export type TimeframeType = $Enums.TimeframeType

export const TimeframeType: typeof $Enums.TimeframeType

export type DirectionType = $Enums.DirectionType

export const DirectionType: typeof $Enums.DirectionType

export type PortfolioType = $Enums.PortfolioType

export const PortfolioType: typeof $Enums.PortfolioType

export type SignalType = $Enums.SignalType

export const SignalType: typeof $Enums.SignalType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tickers
 * const tickers = await prisma.ticker.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tickers
   * const tickers = await prisma.ticker.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.ticker`: Exposes CRUD operations for the **Ticker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickers
    * const tickers = await prisma.ticker.findMany()
    * ```
    */
  get ticker(): Prisma.TickerDelegate<ExtArgs>;

  /**
   * `prisma.priceData`: Exposes CRUD operations for the **PriceData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceData
    * const priceData = await prisma.priceData.findMany()
    * ```
    */
  get priceData(): Prisma.PriceDataDelegate<ExtArgs>;

  /**
   * `prisma.strategy`: Exposes CRUD operations for the **Strategy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Strategies
    * const strategies = await prisma.strategy.findMany()
    * ```
    */
  get strategy(): Prisma.StrategyDelegate<ExtArgs>;

  /**
   * `prisma.strategyConfiguration`: Exposes CRUD operations for the **StrategyConfiguration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StrategyConfigurations
    * const strategyConfigurations = await prisma.strategyConfiguration.findMany()
    * ```
    */
  get strategyConfiguration(): Prisma.StrategyConfigurationDelegate<ExtArgs>;

  /**
   * `prisma.backtestResult`: Exposes CRUD operations for the **BacktestResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BacktestResults
    * const backtestResults = await prisma.backtestResult.findMany()
    * ```
    */
  get backtestResult(): Prisma.BacktestResultDelegate<ExtArgs>;

  /**
   * `prisma.portfolio`: Exposes CRUD operations for the **Portfolio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Portfolios
    * const portfolios = await prisma.portfolio.findMany()
    * ```
    */
  get portfolio(): Prisma.PortfolioDelegate<ExtArgs>;

  /**
   * `prisma.portfolioStrategy`: Exposes CRUD operations for the **PortfolioStrategy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PortfolioStrategies
    * const portfolioStrategies = await prisma.portfolioStrategy.findMany()
    * ```
    */
  get portfolioStrategy(): Prisma.PortfolioStrategyDelegate<ExtArgs>;

  /**
   * `prisma.portfolioMetric`: Exposes CRUD operations for the **PortfolioMetric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PortfolioMetrics
    * const portfolioMetrics = await prisma.portfolioMetric.findMany()
    * ```
    */
  get portfolioMetric(): Prisma.PortfolioMetricDelegate<ExtArgs>;

  /**
   * `prisma.signal`: Exposes CRUD operations for the **Signal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Signals
    * const signals = await prisma.signal.findMany()
    * ```
    */
  get signal(): Prisma.SignalDelegate<ExtArgs>;

  /**
   * `prisma.configuration`: Exposes CRUD operations for the **Configuration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Configurations
    * const configurations = await prisma.configuration.findMany()
    * ```
    */
  get configuration(): Prisma.ConfigurationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Ticker: 'Ticker',
    PriceData: 'PriceData',
    Strategy: 'Strategy',
    StrategyConfiguration: 'StrategyConfiguration',
    BacktestResult: 'BacktestResult',
    Portfolio: 'Portfolio',
    PortfolioStrategy: 'PortfolioStrategy',
    PortfolioMetric: 'PortfolioMetric',
    Signal: 'Signal',
    Configuration: 'Configuration'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'ticker' | 'priceData' | 'strategy' | 'strategyConfiguration' | 'backtestResult' | 'portfolio' | 'portfolioStrategy' | 'portfolioMetric' | 'signal' | 'configuration'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Ticker: {
        payload: Prisma.$TickerPayload<ExtArgs>
        fields: Prisma.TickerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TickerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TickerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload>
          }
          findFirst: {
            args: Prisma.TickerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TickerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload>
          }
          findMany: {
            args: Prisma.TickerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload>[]
          }
          create: {
            args: Prisma.TickerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload>
          }
          createMany: {
            args: Prisma.TickerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TickerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload>
          }
          update: {
            args: Prisma.TickerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload>
          }
          deleteMany: {
            args: Prisma.TickerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TickerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TickerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TickerPayload>
          }
          aggregate: {
            args: Prisma.TickerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTicker>
          }
          groupBy: {
            args: Prisma.TickerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TickerGroupByOutputType>[]
          }
          count: {
            args: Prisma.TickerCountArgs<ExtArgs>,
            result: $Utils.Optional<TickerCountAggregateOutputType> | number
          }
        }
      }
      PriceData: {
        payload: Prisma.$PriceDataPayload<ExtArgs>
        fields: Prisma.PriceDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload>
          }
          findFirst: {
            args: Prisma.PriceDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload>
          }
          findMany: {
            args: Prisma.PriceDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload>[]
          }
          create: {
            args: Prisma.PriceDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload>
          }
          createMany: {
            args: Prisma.PriceDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PriceDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload>
          }
          update: {
            args: Prisma.PriceDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload>
          }
          deleteMany: {
            args: Prisma.PriceDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PriceDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PriceDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceDataPayload>
          }
          aggregate: {
            args: Prisma.PriceDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePriceData>
          }
          groupBy: {
            args: Prisma.PriceDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PriceDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceDataCountArgs<ExtArgs>,
            result: $Utils.Optional<PriceDataCountAggregateOutputType> | number
          }
        }
      }
      Strategy: {
        payload: Prisma.$StrategyPayload<ExtArgs>
        fields: Prisma.StrategyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StrategyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StrategyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload>
          }
          findFirst: {
            args: Prisma.StrategyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StrategyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload>
          }
          findMany: {
            args: Prisma.StrategyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload>[]
          }
          create: {
            args: Prisma.StrategyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload>
          }
          createMany: {
            args: Prisma.StrategyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StrategyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload>
          }
          update: {
            args: Prisma.StrategyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload>
          }
          deleteMany: {
            args: Prisma.StrategyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StrategyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StrategyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyPayload>
          }
          aggregate: {
            args: Prisma.StrategyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStrategy>
          }
          groupBy: {
            args: Prisma.StrategyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StrategyGroupByOutputType>[]
          }
          count: {
            args: Prisma.StrategyCountArgs<ExtArgs>,
            result: $Utils.Optional<StrategyCountAggregateOutputType> | number
          }
        }
      }
      StrategyConfiguration: {
        payload: Prisma.$StrategyConfigurationPayload<ExtArgs>
        fields: Prisma.StrategyConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StrategyConfigurationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StrategyConfigurationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload>
          }
          findFirst: {
            args: Prisma.StrategyConfigurationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StrategyConfigurationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload>
          }
          findMany: {
            args: Prisma.StrategyConfigurationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload>[]
          }
          create: {
            args: Prisma.StrategyConfigurationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload>
          }
          createMany: {
            args: Prisma.StrategyConfigurationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StrategyConfigurationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload>
          }
          update: {
            args: Prisma.StrategyConfigurationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.StrategyConfigurationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StrategyConfigurationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StrategyConfigurationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StrategyConfigurationPayload>
          }
          aggregate: {
            args: Prisma.StrategyConfigurationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStrategyConfiguration>
          }
          groupBy: {
            args: Prisma.StrategyConfigurationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StrategyConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.StrategyConfigurationCountArgs<ExtArgs>,
            result: $Utils.Optional<StrategyConfigurationCountAggregateOutputType> | number
          }
        }
      }
      BacktestResult: {
        payload: Prisma.$BacktestResultPayload<ExtArgs>
        fields: Prisma.BacktestResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BacktestResultFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BacktestResultFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload>
          }
          findFirst: {
            args: Prisma.BacktestResultFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BacktestResultFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload>
          }
          findMany: {
            args: Prisma.BacktestResultFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload>[]
          }
          create: {
            args: Prisma.BacktestResultCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload>
          }
          createMany: {
            args: Prisma.BacktestResultCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BacktestResultDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload>
          }
          update: {
            args: Prisma.BacktestResultUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload>
          }
          deleteMany: {
            args: Prisma.BacktestResultDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BacktestResultUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BacktestResultUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BacktestResultPayload>
          }
          aggregate: {
            args: Prisma.BacktestResultAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBacktestResult>
          }
          groupBy: {
            args: Prisma.BacktestResultGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BacktestResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.BacktestResultCountArgs<ExtArgs>,
            result: $Utils.Optional<BacktestResultCountAggregateOutputType> | number
          }
        }
      }
      Portfolio: {
        payload: Prisma.$PortfolioPayload<ExtArgs>
        fields: Prisma.PortfolioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PortfolioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PortfolioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          findFirst: {
            args: Prisma.PortfolioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PortfolioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          findMany: {
            args: Prisma.PortfolioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          create: {
            args: Prisma.PortfolioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          createMany: {
            args: Prisma.PortfolioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PortfolioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          update: {
            args: Prisma.PortfolioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          deleteMany: {
            args: Prisma.PortfolioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PortfolioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PortfolioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          aggregate: {
            args: Prisma.PortfolioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePortfolio>
          }
          groupBy: {
            args: Prisma.PortfolioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PortfolioGroupByOutputType>[]
          }
          count: {
            args: Prisma.PortfolioCountArgs<ExtArgs>,
            result: $Utils.Optional<PortfolioCountAggregateOutputType> | number
          }
        }
      }
      PortfolioStrategy: {
        payload: Prisma.$PortfolioStrategyPayload<ExtArgs>
        fields: Prisma.PortfolioStrategyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PortfolioStrategyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PortfolioStrategyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload>
          }
          findFirst: {
            args: Prisma.PortfolioStrategyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PortfolioStrategyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload>
          }
          findMany: {
            args: Prisma.PortfolioStrategyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload>[]
          }
          create: {
            args: Prisma.PortfolioStrategyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload>
          }
          createMany: {
            args: Prisma.PortfolioStrategyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PortfolioStrategyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload>
          }
          update: {
            args: Prisma.PortfolioStrategyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload>
          }
          deleteMany: {
            args: Prisma.PortfolioStrategyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PortfolioStrategyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PortfolioStrategyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioStrategyPayload>
          }
          aggregate: {
            args: Prisma.PortfolioStrategyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePortfolioStrategy>
          }
          groupBy: {
            args: Prisma.PortfolioStrategyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PortfolioStrategyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PortfolioStrategyCountArgs<ExtArgs>,
            result: $Utils.Optional<PortfolioStrategyCountAggregateOutputType> | number
          }
        }
      }
      PortfolioMetric: {
        payload: Prisma.$PortfolioMetricPayload<ExtArgs>
        fields: Prisma.PortfolioMetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PortfolioMetricFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PortfolioMetricFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload>
          }
          findFirst: {
            args: Prisma.PortfolioMetricFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PortfolioMetricFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload>
          }
          findMany: {
            args: Prisma.PortfolioMetricFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload>[]
          }
          create: {
            args: Prisma.PortfolioMetricCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload>
          }
          createMany: {
            args: Prisma.PortfolioMetricCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PortfolioMetricDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload>
          }
          update: {
            args: Prisma.PortfolioMetricUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload>
          }
          deleteMany: {
            args: Prisma.PortfolioMetricDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PortfolioMetricUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PortfolioMetricUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PortfolioMetricPayload>
          }
          aggregate: {
            args: Prisma.PortfolioMetricAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePortfolioMetric>
          }
          groupBy: {
            args: Prisma.PortfolioMetricGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PortfolioMetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.PortfolioMetricCountArgs<ExtArgs>,
            result: $Utils.Optional<PortfolioMetricCountAggregateOutputType> | number
          }
        }
      }
      Signal: {
        payload: Prisma.$SignalPayload<ExtArgs>
        fields: Prisma.SignalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SignalFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SignalFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload>
          }
          findFirst: {
            args: Prisma.SignalFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SignalFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload>
          }
          findMany: {
            args: Prisma.SignalFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload>[]
          }
          create: {
            args: Prisma.SignalCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload>
          }
          createMany: {
            args: Prisma.SignalCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SignalDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload>
          }
          update: {
            args: Prisma.SignalUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload>
          }
          deleteMany: {
            args: Prisma.SignalDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SignalUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SignalUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SignalPayload>
          }
          aggregate: {
            args: Prisma.SignalAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSignal>
          }
          groupBy: {
            args: Prisma.SignalGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SignalGroupByOutputType>[]
          }
          count: {
            args: Prisma.SignalCountArgs<ExtArgs>,
            result: $Utils.Optional<SignalCountAggregateOutputType> | number
          }
        }
      }
      Configuration: {
        payload: Prisma.$ConfigurationPayload<ExtArgs>
        fields: Prisma.ConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConfigurationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConfigurationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload>
          }
          findFirst: {
            args: Prisma.ConfigurationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConfigurationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload>
          }
          findMany: {
            args: Prisma.ConfigurationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload>[]
          }
          create: {
            args: Prisma.ConfigurationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload>
          }
          createMany: {
            args: Prisma.ConfigurationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ConfigurationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload>
          }
          update: {
            args: Prisma.ConfigurationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.ConfigurationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConfigurationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConfigurationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConfigurationPayload>
          }
          aggregate: {
            args: Prisma.ConfigurationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConfiguration>
          }
          groupBy: {
            args: Prisma.ConfigurationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConfigurationCountArgs<ExtArgs>,
            result: $Utils.Optional<ConfigurationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TickerCountOutputType
   */

  export type TickerCountOutputType = {
    priceData: number
    strategyConfigs: number
  }

  export type TickerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    priceData?: boolean | TickerCountOutputTypeCountPriceDataArgs
    strategyConfigs?: boolean | TickerCountOutputTypeCountStrategyConfigsArgs
  }

  // Custom InputTypes

  /**
   * TickerCountOutputType without action
   */
  export type TickerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickerCountOutputType
     */
    select?: TickerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TickerCountOutputType without action
   */
  export type TickerCountOutputTypeCountPriceDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceDataWhereInput
  }


  /**
   * TickerCountOutputType without action
   */
  export type TickerCountOutputTypeCountStrategyConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StrategyConfigurationWhereInput
  }



  /**
   * Count Type StrategyCountOutputType
   */

  export type StrategyCountOutputType = {
    configurations: number
  }

  export type StrategyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    configurations?: boolean | StrategyCountOutputTypeCountConfigurationsArgs
  }

  // Custom InputTypes

  /**
   * StrategyCountOutputType without action
   */
  export type StrategyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyCountOutputType
     */
    select?: StrategyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StrategyCountOutputType without action
   */
  export type StrategyCountOutputTypeCountConfigurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StrategyConfigurationWhereInput
  }



  /**
   * Count Type StrategyConfigurationCountOutputType
   */

  export type StrategyConfigurationCountOutputType = {
    backtestResults: number
    portfolioItems: number
    signals: number
  }

  export type StrategyConfigurationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    backtestResults?: boolean | StrategyConfigurationCountOutputTypeCountBacktestResultsArgs
    portfolioItems?: boolean | StrategyConfigurationCountOutputTypeCountPortfolioItemsArgs
    signals?: boolean | StrategyConfigurationCountOutputTypeCountSignalsArgs
  }

  // Custom InputTypes

  /**
   * StrategyConfigurationCountOutputType without action
   */
  export type StrategyConfigurationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfigurationCountOutputType
     */
    select?: StrategyConfigurationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StrategyConfigurationCountOutputType without action
   */
  export type StrategyConfigurationCountOutputTypeCountBacktestResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BacktestResultWhereInput
  }


  /**
   * StrategyConfigurationCountOutputType without action
   */
  export type StrategyConfigurationCountOutputTypeCountPortfolioItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioStrategyWhereInput
  }


  /**
   * StrategyConfigurationCountOutputType without action
   */
  export type StrategyConfigurationCountOutputTypeCountSignalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignalWhereInput
  }



  /**
   * Count Type PortfolioCountOutputType
   */

  export type PortfolioCountOutputType = {
    strategies: number
    metrics: number
  }

  export type PortfolioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    strategies?: boolean | PortfolioCountOutputTypeCountStrategiesArgs
    metrics?: boolean | PortfolioCountOutputTypeCountMetricsArgs
  }

  // Custom InputTypes

  /**
   * PortfolioCountOutputType without action
   */
  export type PortfolioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioCountOutputType
     */
    select?: PortfolioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PortfolioCountOutputType without action
   */
  export type PortfolioCountOutputTypeCountStrategiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioStrategyWhereInput
  }


  /**
   * PortfolioCountOutputType without action
   */
  export type PortfolioCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioMetricWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Ticker
   */

  export type AggregateTicker = {
    _count: TickerCountAggregateOutputType | null
    _min: TickerMinAggregateOutputType | null
    _max: TickerMaxAggregateOutputType | null
  }

  export type TickerMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    name: string | null
    assetClass: $Enums.AssetClass | null
    exchange: string | null
    sector: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TickerMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    name: string | null
    assetClass: $Enums.AssetClass | null
    exchange: string | null
    sector: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TickerCountAggregateOutputType = {
    id: number
    symbol: number
    name: number
    assetClass: number
    exchange: number
    sector: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TickerMinAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    assetClass?: true
    exchange?: true
    sector?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TickerMaxAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    assetClass?: true
    exchange?: true
    sector?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TickerCountAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    assetClass?: true
    exchange?: true
    sector?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TickerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticker to aggregate.
     */
    where?: TickerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickers to fetch.
     */
    orderBy?: TickerOrderByWithRelationInput | TickerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TickerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickers
    **/
    _count?: true | TickerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TickerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TickerMaxAggregateInputType
  }

  export type GetTickerAggregateType<T extends TickerAggregateArgs> = {
        [P in keyof T & keyof AggregateTicker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicker[P]>
      : GetScalarType<T[P], AggregateTicker[P]>
  }




  export type TickerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TickerWhereInput
    orderBy?: TickerOrderByWithAggregationInput | TickerOrderByWithAggregationInput[]
    by: TickerScalarFieldEnum[] | TickerScalarFieldEnum
    having?: TickerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TickerCountAggregateInputType | true
    _min?: TickerMinAggregateInputType
    _max?: TickerMaxAggregateInputType
  }

  export type TickerGroupByOutputType = {
    id: string
    symbol: string
    name: string | null
    assetClass: $Enums.AssetClass
    exchange: string | null
    sector: string | null
    createdAt: Date
    updatedAt: Date
    _count: TickerCountAggregateOutputType | null
    _min: TickerMinAggregateOutputType | null
    _max: TickerMaxAggregateOutputType | null
  }

  type GetTickerGroupByPayload<T extends TickerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TickerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TickerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TickerGroupByOutputType[P]>
            : GetScalarType<T[P], TickerGroupByOutputType[P]>
        }
      >
    >


  export type TickerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    assetClass?: boolean
    exchange?: boolean
    sector?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    priceData?: boolean | Ticker$priceDataArgs<ExtArgs>
    strategyConfigs?: boolean | Ticker$strategyConfigsArgs<ExtArgs>
    _count?: boolean | TickerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticker"]>

  export type TickerSelectScalar = {
    id?: boolean
    symbol?: boolean
    name?: boolean
    assetClass?: boolean
    exchange?: boolean
    sector?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TickerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    priceData?: boolean | Ticker$priceDataArgs<ExtArgs>
    strategyConfigs?: boolean | Ticker$strategyConfigsArgs<ExtArgs>
    _count?: boolean | TickerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TickerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticker"
    objects: {
      priceData: Prisma.$PriceDataPayload<ExtArgs>[]
      strategyConfigs: Prisma.$StrategyConfigurationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      name: string | null
      assetClass: $Enums.AssetClass
      exchange: string | null
      sector: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ticker"]>
    composites: {}
  }


  type TickerGetPayload<S extends boolean | null | undefined | TickerDefaultArgs> = $Result.GetResult<Prisma.$TickerPayload, S>

  type TickerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TickerFindManyArgs, 'select' | 'include'> & {
      select?: TickerCountAggregateInputType | true
    }

  export interface TickerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticker'], meta: { name: 'Ticker' } }
    /**
     * Find zero or one Ticker that matches the filter.
     * @param {TickerFindUniqueArgs} args - Arguments to find a Ticker
     * @example
     * // Get one Ticker
     * const ticker = await prisma.ticker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TickerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TickerFindUniqueArgs<ExtArgs>>
    ): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ticker that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TickerFindUniqueOrThrowArgs} args - Arguments to find a Ticker
     * @example
     * // Get one Ticker
     * const ticker = await prisma.ticker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TickerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TickerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ticker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickerFindFirstArgs} args - Arguments to find a Ticker
     * @example
     * // Get one Ticker
     * const ticker = await prisma.ticker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TickerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TickerFindFirstArgs<ExtArgs>>
    ): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ticker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickerFindFirstOrThrowArgs} args - Arguments to find a Ticker
     * @example
     * // Get one Ticker
     * const ticker = await prisma.ticker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TickerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TickerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tickers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickers
     * const tickers = await prisma.ticker.findMany()
     * 
     * // Get first 10 Tickers
     * const tickers = await prisma.ticker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tickerWithIdOnly = await prisma.ticker.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TickerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TickerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ticker.
     * @param {TickerCreateArgs} args - Arguments to create a Ticker.
     * @example
     * // Create one Ticker
     * const Ticker = await prisma.ticker.create({
     *   data: {
     *     // ... data to create a Ticker
     *   }
     * })
     * 
    **/
    create<T extends TickerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TickerCreateArgs<ExtArgs>>
    ): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tickers.
     *     @param {TickerCreateManyArgs} args - Arguments to create many Tickers.
     *     @example
     *     // Create many Tickers
     *     const ticker = await prisma.ticker.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TickerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TickerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ticker.
     * @param {TickerDeleteArgs} args - Arguments to delete one Ticker.
     * @example
     * // Delete one Ticker
     * const Ticker = await prisma.ticker.delete({
     *   where: {
     *     // ... filter to delete one Ticker
     *   }
     * })
     * 
    **/
    delete<T extends TickerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TickerDeleteArgs<ExtArgs>>
    ): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ticker.
     * @param {TickerUpdateArgs} args - Arguments to update one Ticker.
     * @example
     * // Update one Ticker
     * const ticker = await prisma.ticker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TickerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TickerUpdateArgs<ExtArgs>>
    ): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tickers.
     * @param {TickerDeleteManyArgs} args - Arguments to filter Tickers to delete.
     * @example
     * // Delete a few Tickers
     * const { count } = await prisma.ticker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TickerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TickerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickers
     * const ticker = await prisma.ticker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TickerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TickerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticker.
     * @param {TickerUpsertArgs} args - Arguments to update or create a Ticker.
     * @example
     * // Update or create a Ticker
     * const ticker = await prisma.ticker.upsert({
     *   create: {
     *     // ... data to create a Ticker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticker we want to update
     *   }
     * })
    **/
    upsert<T extends TickerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TickerUpsertArgs<ExtArgs>>
    ): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tickers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickerCountArgs} args - Arguments to filter Tickers to count.
     * @example
     * // Count the number of Tickers
     * const count = await prisma.ticker.count({
     *   where: {
     *     // ... the filter for the Tickers we want to count
     *   }
     * })
    **/
    count<T extends TickerCountArgs>(
      args?: Subset<T, TickerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TickerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TickerAggregateArgs>(args: Subset<T, TickerAggregateArgs>): Prisma.PrismaPromise<GetTickerAggregateType<T>>

    /**
     * Group by Ticker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TickerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TickerGroupByArgs['orderBy'] }
        : { orderBy?: TickerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TickerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTickerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticker model
   */
  readonly fields: TickerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TickerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    priceData<T extends Ticker$priceDataArgs<ExtArgs> = {}>(args?: Subset<T, Ticker$priceDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'findMany'> | Null>;

    strategyConfigs<T extends Ticker$strategyConfigsArgs<ExtArgs> = {}>(args?: Subset<T, Ticker$strategyConfigsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Ticker model
   */ 
  interface TickerFieldRefs {
    readonly id: FieldRef<"Ticker", 'String'>
    readonly symbol: FieldRef<"Ticker", 'String'>
    readonly name: FieldRef<"Ticker", 'String'>
    readonly assetClass: FieldRef<"Ticker", 'AssetClass'>
    readonly exchange: FieldRef<"Ticker", 'String'>
    readonly sector: FieldRef<"Ticker", 'String'>
    readonly createdAt: FieldRef<"Ticker", 'DateTime'>
    readonly updatedAt: FieldRef<"Ticker", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Ticker findUnique
   */
  export type TickerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * Filter, which Ticker to fetch.
     */
    where: TickerWhereUniqueInput
  }


  /**
   * Ticker findUniqueOrThrow
   */
  export type TickerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * Filter, which Ticker to fetch.
     */
    where: TickerWhereUniqueInput
  }


  /**
   * Ticker findFirst
   */
  export type TickerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * Filter, which Ticker to fetch.
     */
    where?: TickerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickers to fetch.
     */
    orderBy?: TickerOrderByWithRelationInput | TickerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickers.
     */
    cursor?: TickerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickers.
     */
    distinct?: TickerScalarFieldEnum | TickerScalarFieldEnum[]
  }


  /**
   * Ticker findFirstOrThrow
   */
  export type TickerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * Filter, which Ticker to fetch.
     */
    where?: TickerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickers to fetch.
     */
    orderBy?: TickerOrderByWithRelationInput | TickerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickers.
     */
    cursor?: TickerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickers.
     */
    distinct?: TickerScalarFieldEnum | TickerScalarFieldEnum[]
  }


  /**
   * Ticker findMany
   */
  export type TickerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * Filter, which Tickers to fetch.
     */
    where?: TickerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickers to fetch.
     */
    orderBy?: TickerOrderByWithRelationInput | TickerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickers.
     */
    cursor?: TickerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickers.
     */
    skip?: number
    distinct?: TickerScalarFieldEnum | TickerScalarFieldEnum[]
  }


  /**
   * Ticker create
   */
  export type TickerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticker.
     */
    data: XOR<TickerCreateInput, TickerUncheckedCreateInput>
  }


  /**
   * Ticker createMany
   */
  export type TickerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickers.
     */
    data: TickerCreateManyInput | TickerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Ticker update
   */
  export type TickerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticker.
     */
    data: XOR<TickerUpdateInput, TickerUncheckedUpdateInput>
    /**
     * Choose, which Ticker to update.
     */
    where: TickerWhereUniqueInput
  }


  /**
   * Ticker updateMany
   */
  export type TickerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickers.
     */
    data: XOR<TickerUpdateManyMutationInput, TickerUncheckedUpdateManyInput>
    /**
     * Filter which Tickers to update
     */
    where?: TickerWhereInput
  }


  /**
   * Ticker upsert
   */
  export type TickerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticker to update in case it exists.
     */
    where: TickerWhereUniqueInput
    /**
     * In case the Ticker found by the `where` argument doesn't exist, create a new Ticker with this data.
     */
    create: XOR<TickerCreateInput, TickerUncheckedCreateInput>
    /**
     * In case the Ticker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TickerUpdateInput, TickerUncheckedUpdateInput>
  }


  /**
   * Ticker delete
   */
  export type TickerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
    /**
     * Filter which Ticker to delete.
     */
    where: TickerWhereUniqueInput
  }


  /**
   * Ticker deleteMany
   */
  export type TickerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickers to delete
     */
    where?: TickerWhereInput
  }


  /**
   * Ticker.priceData
   */
  export type Ticker$priceDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    where?: PriceDataWhereInput
    orderBy?: PriceDataOrderByWithRelationInput | PriceDataOrderByWithRelationInput[]
    cursor?: PriceDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PriceDataScalarFieldEnum | PriceDataScalarFieldEnum[]
  }


  /**
   * Ticker.strategyConfigs
   */
  export type Ticker$strategyConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    where?: StrategyConfigurationWhereInput
    orderBy?: StrategyConfigurationOrderByWithRelationInput | StrategyConfigurationOrderByWithRelationInput[]
    cursor?: StrategyConfigurationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StrategyConfigurationScalarFieldEnum | StrategyConfigurationScalarFieldEnum[]
  }


  /**
   * Ticker without action
   */
  export type TickerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticker
     */
    select?: TickerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TickerInclude<ExtArgs> | null
  }



  /**
   * Model PriceData
   */

  export type AggregatePriceData = {
    _count: PriceDataCountAggregateOutputType | null
    _avg: PriceDataAvgAggregateOutputType | null
    _sum: PriceDataSumAggregateOutputType | null
    _min: PriceDataMinAggregateOutputType | null
    _max: PriceDataMaxAggregateOutputType | null
  }

  export type PriceDataAvgAggregateOutputType = {
    open: Decimal | null
    high: Decimal | null
    low: Decimal | null
    close: Decimal | null
    volume: Decimal | null
  }

  export type PriceDataSumAggregateOutputType = {
    open: Decimal | null
    high: Decimal | null
    low: Decimal | null
    close: Decimal | null
    volume: Decimal | null
  }

  export type PriceDataMinAggregateOutputType = {
    id: string | null
    tickerId: string | null
    date: Date | null
    open: Decimal | null
    high: Decimal | null
    low: Decimal | null
    close: Decimal | null
    volume: Decimal | null
    createdAt: Date | null
  }

  export type PriceDataMaxAggregateOutputType = {
    id: string | null
    tickerId: string | null
    date: Date | null
    open: Decimal | null
    high: Decimal | null
    low: Decimal | null
    close: Decimal | null
    volume: Decimal | null
    createdAt: Date | null
  }

  export type PriceDataCountAggregateOutputType = {
    id: number
    tickerId: number
    date: number
    open: number
    high: number
    low: number
    close: number
    volume: number
    createdAt: number
    _all: number
  }


  export type PriceDataAvgAggregateInputType = {
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
  }

  export type PriceDataSumAggregateInputType = {
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
  }

  export type PriceDataMinAggregateInputType = {
    id?: true
    tickerId?: true
    date?: true
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
    createdAt?: true
  }

  export type PriceDataMaxAggregateInputType = {
    id?: true
    tickerId?: true
    date?: true
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
    createdAt?: true
  }

  export type PriceDataCountAggregateInputType = {
    id?: true
    tickerId?: true
    date?: true
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
    createdAt?: true
    _all?: true
  }

  export type PriceDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceData to aggregate.
     */
    where?: PriceDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceData to fetch.
     */
    orderBy?: PriceDataOrderByWithRelationInput | PriceDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceData
    **/
    _count?: true | PriceDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriceDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PriceDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceDataMaxAggregateInputType
  }

  export type GetPriceDataAggregateType<T extends PriceDataAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceData[P]>
      : GetScalarType<T[P], AggregatePriceData[P]>
  }




  export type PriceDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceDataWhereInput
    orderBy?: PriceDataOrderByWithAggregationInput | PriceDataOrderByWithAggregationInput[]
    by: PriceDataScalarFieldEnum[] | PriceDataScalarFieldEnum
    having?: PriceDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceDataCountAggregateInputType | true
    _avg?: PriceDataAvgAggregateInputType
    _sum?: PriceDataSumAggregateInputType
    _min?: PriceDataMinAggregateInputType
    _max?: PriceDataMaxAggregateInputType
  }

  export type PriceDataGroupByOutputType = {
    id: string
    tickerId: string
    date: Date
    open: Decimal
    high: Decimal
    low: Decimal
    close: Decimal
    volume: Decimal | null
    createdAt: Date
    _count: PriceDataCountAggregateOutputType | null
    _avg: PriceDataAvgAggregateOutputType | null
    _sum: PriceDataSumAggregateOutputType | null
    _min: PriceDataMinAggregateOutputType | null
    _max: PriceDataMaxAggregateOutputType | null
  }

  type GetPriceDataGroupByPayload<T extends PriceDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceDataGroupByOutputType[P]>
            : GetScalarType<T[P], PriceDataGroupByOutputType[P]>
        }
      >
    >


  export type PriceDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tickerId?: boolean
    date?: boolean
    open?: boolean
    high?: boolean
    low?: boolean
    close?: boolean
    volume?: boolean
    createdAt?: boolean
    ticker?: boolean | TickerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceData"]>

  export type PriceDataSelectScalar = {
    id?: boolean
    tickerId?: boolean
    date?: boolean
    open?: boolean
    high?: boolean
    low?: boolean
    close?: boolean
    volume?: boolean
    createdAt?: boolean
  }

  export type PriceDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticker?: boolean | TickerDefaultArgs<ExtArgs>
  }


  export type $PriceDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceData"
    objects: {
      ticker: Prisma.$TickerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tickerId: string
      date: Date
      open: Prisma.Decimal
      high: Prisma.Decimal
      low: Prisma.Decimal
      close: Prisma.Decimal
      volume: Prisma.Decimal | null
      createdAt: Date
    }, ExtArgs["result"]["priceData"]>
    composites: {}
  }


  type PriceDataGetPayload<S extends boolean | null | undefined | PriceDataDefaultArgs> = $Result.GetResult<Prisma.$PriceDataPayload, S>

  type PriceDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PriceDataFindManyArgs, 'select' | 'include'> & {
      select?: PriceDataCountAggregateInputType | true
    }

  export interface PriceDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceData'], meta: { name: 'PriceData' } }
    /**
     * Find zero or one PriceData that matches the filter.
     * @param {PriceDataFindUniqueArgs} args - Arguments to find a PriceData
     * @example
     * // Get one PriceData
     * const priceData = await prisma.priceData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PriceDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PriceDataFindUniqueArgs<ExtArgs>>
    ): Prisma__PriceDataClient<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PriceData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PriceDataFindUniqueOrThrowArgs} args - Arguments to find a PriceData
     * @example
     * // Get one PriceData
     * const priceData = await prisma.priceData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PriceDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PriceDataClient<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PriceData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceDataFindFirstArgs} args - Arguments to find a PriceData
     * @example
     * // Get one PriceData
     * const priceData = await prisma.priceData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PriceDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceDataFindFirstArgs<ExtArgs>>
    ): Prisma__PriceDataClient<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PriceData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceDataFindFirstOrThrowArgs} args - Arguments to find a PriceData
     * @example
     * // Get one PriceData
     * const priceData = await prisma.priceData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PriceDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PriceDataClient<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PriceData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceData
     * const priceData = await prisma.priceData.findMany()
     * 
     * // Get first 10 PriceData
     * const priceData = await prisma.priceData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceDataWithIdOnly = await prisma.priceData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PriceDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PriceData.
     * @param {PriceDataCreateArgs} args - Arguments to create a PriceData.
     * @example
     * // Create one PriceData
     * const PriceData = await prisma.priceData.create({
     *   data: {
     *     // ... data to create a PriceData
     *   }
     * })
     * 
    **/
    create<T extends PriceDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PriceDataCreateArgs<ExtArgs>>
    ): Prisma__PriceDataClient<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PriceData.
     *     @param {PriceDataCreateManyArgs} args - Arguments to create many PriceData.
     *     @example
     *     // Create many PriceData
     *     const priceData = await prisma.priceData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PriceDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PriceData.
     * @param {PriceDataDeleteArgs} args - Arguments to delete one PriceData.
     * @example
     * // Delete one PriceData
     * const PriceData = await prisma.priceData.delete({
     *   where: {
     *     // ... filter to delete one PriceData
     *   }
     * })
     * 
    **/
    delete<T extends PriceDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PriceDataDeleteArgs<ExtArgs>>
    ): Prisma__PriceDataClient<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PriceData.
     * @param {PriceDataUpdateArgs} args - Arguments to update one PriceData.
     * @example
     * // Update one PriceData
     * const priceData = await prisma.priceData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PriceDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PriceDataUpdateArgs<ExtArgs>>
    ): Prisma__PriceDataClient<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PriceData.
     * @param {PriceDataDeleteManyArgs} args - Arguments to filter PriceData to delete.
     * @example
     * // Delete a few PriceData
     * const { count } = await prisma.priceData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PriceDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceData
     * const priceData = await prisma.priceData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PriceDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PriceDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PriceData.
     * @param {PriceDataUpsertArgs} args - Arguments to update or create a PriceData.
     * @example
     * // Update or create a PriceData
     * const priceData = await prisma.priceData.upsert({
     *   create: {
     *     // ... data to create a PriceData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceData we want to update
     *   }
     * })
    **/
    upsert<T extends PriceDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PriceDataUpsertArgs<ExtArgs>>
    ): Prisma__PriceDataClient<$Result.GetResult<Prisma.$PriceDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PriceData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceDataCountArgs} args - Arguments to filter PriceData to count.
     * @example
     * // Count the number of PriceData
     * const count = await prisma.priceData.count({
     *   where: {
     *     // ... the filter for the PriceData we want to count
     *   }
     * })
    **/
    count<T extends PriceDataCountArgs>(
      args?: Subset<T, PriceDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceDataAggregateArgs>(args: Subset<T, PriceDataAggregateArgs>): Prisma.PrismaPromise<GetPriceDataAggregateType<T>>

    /**
     * Group by PriceData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceDataGroupByArgs['orderBy'] }
        : { orderBy?: PriceDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceData model
   */
  readonly fields: PriceDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ticker<T extends TickerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TickerDefaultArgs<ExtArgs>>): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PriceData model
   */ 
  interface PriceDataFieldRefs {
    readonly id: FieldRef<"PriceData", 'String'>
    readonly tickerId: FieldRef<"PriceData", 'String'>
    readonly date: FieldRef<"PriceData", 'DateTime'>
    readonly open: FieldRef<"PriceData", 'Decimal'>
    readonly high: FieldRef<"PriceData", 'Decimal'>
    readonly low: FieldRef<"PriceData", 'Decimal'>
    readonly close: FieldRef<"PriceData", 'Decimal'>
    readonly volume: FieldRef<"PriceData", 'Decimal'>
    readonly createdAt: FieldRef<"PriceData", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PriceData findUnique
   */
  export type PriceDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * Filter, which PriceData to fetch.
     */
    where: PriceDataWhereUniqueInput
  }


  /**
   * PriceData findUniqueOrThrow
   */
  export type PriceDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * Filter, which PriceData to fetch.
     */
    where: PriceDataWhereUniqueInput
  }


  /**
   * PriceData findFirst
   */
  export type PriceDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * Filter, which PriceData to fetch.
     */
    where?: PriceDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceData to fetch.
     */
    orderBy?: PriceDataOrderByWithRelationInput | PriceDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceData.
     */
    cursor?: PriceDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceData.
     */
    distinct?: PriceDataScalarFieldEnum | PriceDataScalarFieldEnum[]
  }


  /**
   * PriceData findFirstOrThrow
   */
  export type PriceDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * Filter, which PriceData to fetch.
     */
    where?: PriceDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceData to fetch.
     */
    orderBy?: PriceDataOrderByWithRelationInput | PriceDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceData.
     */
    cursor?: PriceDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceData.
     */
    distinct?: PriceDataScalarFieldEnum | PriceDataScalarFieldEnum[]
  }


  /**
   * PriceData findMany
   */
  export type PriceDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * Filter, which PriceData to fetch.
     */
    where?: PriceDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceData to fetch.
     */
    orderBy?: PriceDataOrderByWithRelationInput | PriceDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceData.
     */
    cursor?: PriceDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceData.
     */
    skip?: number
    distinct?: PriceDataScalarFieldEnum | PriceDataScalarFieldEnum[]
  }


  /**
   * PriceData create
   */
  export type PriceDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceData.
     */
    data: XOR<PriceDataCreateInput, PriceDataUncheckedCreateInput>
  }


  /**
   * PriceData createMany
   */
  export type PriceDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceData.
     */
    data: PriceDataCreateManyInput | PriceDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PriceData update
   */
  export type PriceDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceData.
     */
    data: XOR<PriceDataUpdateInput, PriceDataUncheckedUpdateInput>
    /**
     * Choose, which PriceData to update.
     */
    where: PriceDataWhereUniqueInput
  }


  /**
   * PriceData updateMany
   */
  export type PriceDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceData.
     */
    data: XOR<PriceDataUpdateManyMutationInput, PriceDataUncheckedUpdateManyInput>
    /**
     * Filter which PriceData to update
     */
    where?: PriceDataWhereInput
  }


  /**
   * PriceData upsert
   */
  export type PriceDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceData to update in case it exists.
     */
    where: PriceDataWhereUniqueInput
    /**
     * In case the PriceData found by the `where` argument doesn't exist, create a new PriceData with this data.
     */
    create: XOR<PriceDataCreateInput, PriceDataUncheckedCreateInput>
    /**
     * In case the PriceData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceDataUpdateInput, PriceDataUncheckedUpdateInput>
  }


  /**
   * PriceData delete
   */
  export type PriceDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
    /**
     * Filter which PriceData to delete.
     */
    where: PriceDataWhereUniqueInput
  }


  /**
   * PriceData deleteMany
   */
  export type PriceDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceData to delete
     */
    where?: PriceDataWhereInput
  }


  /**
   * PriceData without action
   */
  export type PriceDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceData
     */
    select?: PriceDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceDataInclude<ExtArgs> | null
  }



  /**
   * Model Strategy
   */

  export type AggregateStrategy = {
    _count: StrategyCountAggregateOutputType | null
    _min: StrategyMinAggregateOutputType | null
    _max: StrategyMaxAggregateOutputType | null
  }

  export type StrategyMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.StrategyType | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StrategyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.StrategyType | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StrategyCountAggregateOutputType = {
    id: number
    name: number
    type: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StrategyMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StrategyMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StrategyCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StrategyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Strategy to aggregate.
     */
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     */
    orderBy?: StrategyOrderByWithRelationInput | StrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Strategies
    **/
    _count?: true | StrategyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StrategyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StrategyMaxAggregateInputType
  }

  export type GetStrategyAggregateType<T extends StrategyAggregateArgs> = {
        [P in keyof T & keyof AggregateStrategy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStrategy[P]>
      : GetScalarType<T[P], AggregateStrategy[P]>
  }




  export type StrategyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StrategyWhereInput
    orderBy?: StrategyOrderByWithAggregationInput | StrategyOrderByWithAggregationInput[]
    by: StrategyScalarFieldEnum[] | StrategyScalarFieldEnum
    having?: StrategyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StrategyCountAggregateInputType | true
    _min?: StrategyMinAggregateInputType
    _max?: StrategyMaxAggregateInputType
  }

  export type StrategyGroupByOutputType = {
    id: string
    name: string
    type: $Enums.StrategyType
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: StrategyCountAggregateOutputType | null
    _min: StrategyMinAggregateOutputType | null
    _max: StrategyMaxAggregateOutputType | null
  }

  type GetStrategyGroupByPayload<T extends StrategyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StrategyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StrategyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StrategyGroupByOutputType[P]>
            : GetScalarType<T[P], StrategyGroupByOutputType[P]>
        }
      >
    >


  export type StrategySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    configurations?: boolean | Strategy$configurationsArgs<ExtArgs>
    _count?: boolean | StrategyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["strategy"]>

  export type StrategySelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StrategyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    configurations?: boolean | Strategy$configurationsArgs<ExtArgs>
    _count?: boolean | StrategyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StrategyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Strategy"
    objects: {
      configurations: Prisma.$StrategyConfigurationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.StrategyType
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["strategy"]>
    composites: {}
  }


  type StrategyGetPayload<S extends boolean | null | undefined | StrategyDefaultArgs> = $Result.GetResult<Prisma.$StrategyPayload, S>

  type StrategyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StrategyFindManyArgs, 'select' | 'include'> & {
      select?: StrategyCountAggregateInputType | true
    }

  export interface StrategyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Strategy'], meta: { name: 'Strategy' } }
    /**
     * Find zero or one Strategy that matches the filter.
     * @param {StrategyFindUniqueArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StrategyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyFindUniqueArgs<ExtArgs>>
    ): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Strategy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StrategyFindUniqueOrThrowArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StrategyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Strategy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyFindFirstArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StrategyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyFindFirstArgs<ExtArgs>>
    ): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Strategy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyFindFirstOrThrowArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StrategyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Strategies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Strategies
     * const strategies = await prisma.strategy.findMany()
     * 
     * // Get first 10 Strategies
     * const strategies = await prisma.strategy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const strategyWithIdOnly = await prisma.strategy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StrategyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Strategy.
     * @param {StrategyCreateArgs} args - Arguments to create a Strategy.
     * @example
     * // Create one Strategy
     * const Strategy = await prisma.strategy.create({
     *   data: {
     *     // ... data to create a Strategy
     *   }
     * })
     * 
    **/
    create<T extends StrategyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyCreateArgs<ExtArgs>>
    ): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Strategies.
     *     @param {StrategyCreateManyArgs} args - Arguments to create many Strategies.
     *     @example
     *     // Create many Strategies
     *     const strategy = await prisma.strategy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StrategyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Strategy.
     * @param {StrategyDeleteArgs} args - Arguments to delete one Strategy.
     * @example
     * // Delete one Strategy
     * const Strategy = await prisma.strategy.delete({
     *   where: {
     *     // ... filter to delete one Strategy
     *   }
     * })
     * 
    **/
    delete<T extends StrategyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyDeleteArgs<ExtArgs>>
    ): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Strategy.
     * @param {StrategyUpdateArgs} args - Arguments to update one Strategy.
     * @example
     * // Update one Strategy
     * const strategy = await prisma.strategy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StrategyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyUpdateArgs<ExtArgs>>
    ): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Strategies.
     * @param {StrategyDeleteManyArgs} args - Arguments to filter Strategies to delete.
     * @example
     * // Delete a few Strategies
     * const { count } = await prisma.strategy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StrategyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Strategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Strategies
     * const strategy = await prisma.strategy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StrategyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Strategy.
     * @param {StrategyUpsertArgs} args - Arguments to update or create a Strategy.
     * @example
     * // Update or create a Strategy
     * const strategy = await prisma.strategy.upsert({
     *   create: {
     *     // ... data to create a Strategy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Strategy we want to update
     *   }
     * })
    **/
    upsert<T extends StrategyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyUpsertArgs<ExtArgs>>
    ): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Strategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyCountArgs} args - Arguments to filter Strategies to count.
     * @example
     * // Count the number of Strategies
     * const count = await prisma.strategy.count({
     *   where: {
     *     // ... the filter for the Strategies we want to count
     *   }
     * })
    **/
    count<T extends StrategyCountArgs>(
      args?: Subset<T, StrategyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StrategyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Strategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StrategyAggregateArgs>(args: Subset<T, StrategyAggregateArgs>): Prisma.PrismaPromise<GetStrategyAggregateType<T>>

    /**
     * Group by Strategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StrategyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StrategyGroupByArgs['orderBy'] }
        : { orderBy?: StrategyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StrategyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStrategyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Strategy model
   */
  readonly fields: StrategyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Strategy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StrategyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    configurations<T extends Strategy$configurationsArgs<ExtArgs> = {}>(args?: Subset<T, Strategy$configurationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Strategy model
   */ 
  interface StrategyFieldRefs {
    readonly id: FieldRef<"Strategy", 'String'>
    readonly name: FieldRef<"Strategy", 'String'>
    readonly type: FieldRef<"Strategy", 'StrategyType'>
    readonly description: FieldRef<"Strategy", 'String'>
    readonly createdAt: FieldRef<"Strategy", 'DateTime'>
    readonly updatedAt: FieldRef<"Strategy", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Strategy findUnique
   */
  export type StrategyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * Filter, which Strategy to fetch.
     */
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy findUniqueOrThrow
   */
  export type StrategyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * Filter, which Strategy to fetch.
     */
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy findFirst
   */
  export type StrategyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * Filter, which Strategy to fetch.
     */
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     */
    orderBy?: StrategyOrderByWithRelationInput | StrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Strategies.
     */
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Strategies.
     */
    distinct?: StrategyScalarFieldEnum | StrategyScalarFieldEnum[]
  }


  /**
   * Strategy findFirstOrThrow
   */
  export type StrategyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * Filter, which Strategy to fetch.
     */
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     */
    orderBy?: StrategyOrderByWithRelationInput | StrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Strategies.
     */
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Strategies.
     */
    distinct?: StrategyScalarFieldEnum | StrategyScalarFieldEnum[]
  }


  /**
   * Strategy findMany
   */
  export type StrategyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * Filter, which Strategies to fetch.
     */
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     */
    orderBy?: StrategyOrderByWithRelationInput | StrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Strategies.
     */
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     */
    skip?: number
    distinct?: StrategyScalarFieldEnum | StrategyScalarFieldEnum[]
  }


  /**
   * Strategy create
   */
  export type StrategyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * The data needed to create a Strategy.
     */
    data: XOR<StrategyCreateInput, StrategyUncheckedCreateInput>
  }


  /**
   * Strategy createMany
   */
  export type StrategyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Strategies.
     */
    data: StrategyCreateManyInput | StrategyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Strategy update
   */
  export type StrategyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * The data needed to update a Strategy.
     */
    data: XOR<StrategyUpdateInput, StrategyUncheckedUpdateInput>
    /**
     * Choose, which Strategy to update.
     */
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy updateMany
   */
  export type StrategyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Strategies.
     */
    data: XOR<StrategyUpdateManyMutationInput, StrategyUncheckedUpdateManyInput>
    /**
     * Filter which Strategies to update
     */
    where?: StrategyWhereInput
  }


  /**
   * Strategy upsert
   */
  export type StrategyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * The filter to search for the Strategy to update in case it exists.
     */
    where: StrategyWhereUniqueInput
    /**
     * In case the Strategy found by the `where` argument doesn't exist, create a new Strategy with this data.
     */
    create: XOR<StrategyCreateInput, StrategyUncheckedCreateInput>
    /**
     * In case the Strategy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StrategyUpdateInput, StrategyUncheckedUpdateInput>
  }


  /**
   * Strategy delete
   */
  export type StrategyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
    /**
     * Filter which Strategy to delete.
     */
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy deleteMany
   */
  export type StrategyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Strategies to delete
     */
    where?: StrategyWhereInput
  }


  /**
   * Strategy.configurations
   */
  export type Strategy$configurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    where?: StrategyConfigurationWhereInput
    orderBy?: StrategyConfigurationOrderByWithRelationInput | StrategyConfigurationOrderByWithRelationInput[]
    cursor?: StrategyConfigurationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StrategyConfigurationScalarFieldEnum | StrategyConfigurationScalarFieldEnum[]
  }


  /**
   * Strategy without action
   */
  export type StrategyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Strategy
     */
    select?: StrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyInclude<ExtArgs> | null
  }



  /**
   * Model StrategyConfiguration
   */

  export type AggregateStrategyConfiguration = {
    _count: StrategyConfigurationCountAggregateOutputType | null
    _avg: StrategyConfigurationAvgAggregateOutputType | null
    _sum: StrategyConfigurationSumAggregateOutputType | null
    _min: StrategyConfigurationMinAggregateOutputType | null
    _max: StrategyConfigurationMaxAggregateOutputType | null
  }

  export type StrategyConfigurationAvgAggregateOutputType = {
    shortWindow: number | null
    longWindow: number | null
    signalWindow: number | null
    stopLossPct: Decimal | null
    rsiPeriod: number | null
    rsiThreshold: Decimal | null
    allocationPct: Decimal | null
  }

  export type StrategyConfigurationSumAggregateOutputType = {
    shortWindow: number | null
    longWindow: number | null
    signalWindow: number | null
    stopLossPct: Decimal | null
    rsiPeriod: number | null
    rsiThreshold: Decimal | null
    allocationPct: Decimal | null
  }

  export type StrategyConfigurationMinAggregateOutputType = {
    id: string | null
    strategyId: string | null
    tickerId: string | null
    timeframe: $Enums.TimeframeType | null
    shortWindow: number | null
    longWindow: number | null
    signalWindow: number | null
    stopLossPct: Decimal | null
    rsiPeriod: number | null
    rsiThreshold: Decimal | null
    signalEntry: string | null
    signalExit: string | null
    direction: $Enums.DirectionType | null
    allocationPct: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StrategyConfigurationMaxAggregateOutputType = {
    id: string | null
    strategyId: string | null
    tickerId: string | null
    timeframe: $Enums.TimeframeType | null
    shortWindow: number | null
    longWindow: number | null
    signalWindow: number | null
    stopLossPct: Decimal | null
    rsiPeriod: number | null
    rsiThreshold: Decimal | null
    signalEntry: string | null
    signalExit: string | null
    direction: $Enums.DirectionType | null
    allocationPct: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StrategyConfigurationCountAggregateOutputType = {
    id: number
    strategyId: number
    tickerId: number
    timeframe: number
    shortWindow: number
    longWindow: number
    signalWindow: number
    stopLossPct: number
    rsiPeriod: number
    rsiThreshold: number
    signalEntry: number
    signalExit: number
    direction: number
    allocationPct: number
    parameters: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StrategyConfigurationAvgAggregateInputType = {
    shortWindow?: true
    longWindow?: true
    signalWindow?: true
    stopLossPct?: true
    rsiPeriod?: true
    rsiThreshold?: true
    allocationPct?: true
  }

  export type StrategyConfigurationSumAggregateInputType = {
    shortWindow?: true
    longWindow?: true
    signalWindow?: true
    stopLossPct?: true
    rsiPeriod?: true
    rsiThreshold?: true
    allocationPct?: true
  }

  export type StrategyConfigurationMinAggregateInputType = {
    id?: true
    strategyId?: true
    tickerId?: true
    timeframe?: true
    shortWindow?: true
    longWindow?: true
    signalWindow?: true
    stopLossPct?: true
    rsiPeriod?: true
    rsiThreshold?: true
    signalEntry?: true
    signalExit?: true
    direction?: true
    allocationPct?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StrategyConfigurationMaxAggregateInputType = {
    id?: true
    strategyId?: true
    tickerId?: true
    timeframe?: true
    shortWindow?: true
    longWindow?: true
    signalWindow?: true
    stopLossPct?: true
    rsiPeriod?: true
    rsiThreshold?: true
    signalEntry?: true
    signalExit?: true
    direction?: true
    allocationPct?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StrategyConfigurationCountAggregateInputType = {
    id?: true
    strategyId?: true
    tickerId?: true
    timeframe?: true
    shortWindow?: true
    longWindow?: true
    signalWindow?: true
    stopLossPct?: true
    rsiPeriod?: true
    rsiThreshold?: true
    signalEntry?: true
    signalExit?: true
    direction?: true
    allocationPct?: true
    parameters?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StrategyConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StrategyConfiguration to aggregate.
     */
    where?: StrategyConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StrategyConfigurations to fetch.
     */
    orderBy?: StrategyConfigurationOrderByWithRelationInput | StrategyConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StrategyConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StrategyConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StrategyConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StrategyConfigurations
    **/
    _count?: true | StrategyConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StrategyConfigurationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StrategyConfigurationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StrategyConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StrategyConfigurationMaxAggregateInputType
  }

  export type GetStrategyConfigurationAggregateType<T extends StrategyConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregateStrategyConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStrategyConfiguration[P]>
      : GetScalarType<T[P], AggregateStrategyConfiguration[P]>
  }




  export type StrategyConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StrategyConfigurationWhereInput
    orderBy?: StrategyConfigurationOrderByWithAggregationInput | StrategyConfigurationOrderByWithAggregationInput[]
    by: StrategyConfigurationScalarFieldEnum[] | StrategyConfigurationScalarFieldEnum
    having?: StrategyConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StrategyConfigurationCountAggregateInputType | true
    _avg?: StrategyConfigurationAvgAggregateInputType
    _sum?: StrategyConfigurationSumAggregateInputType
    _min?: StrategyConfigurationMinAggregateInputType
    _max?: StrategyConfigurationMaxAggregateInputType
  }

  export type StrategyConfigurationGroupByOutputType = {
    id: string
    strategyId: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow: number | null
    longWindow: number | null
    signalWindow: number | null
    stopLossPct: Decimal | null
    rsiPeriod: number | null
    rsiThreshold: Decimal | null
    signalEntry: string | null
    signalExit: string | null
    direction: $Enums.DirectionType
    allocationPct: Decimal | null
    parameters: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: StrategyConfigurationCountAggregateOutputType | null
    _avg: StrategyConfigurationAvgAggregateOutputType | null
    _sum: StrategyConfigurationSumAggregateOutputType | null
    _min: StrategyConfigurationMinAggregateOutputType | null
    _max: StrategyConfigurationMaxAggregateOutputType | null
  }

  type GetStrategyConfigurationGroupByPayload<T extends StrategyConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StrategyConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StrategyConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StrategyConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], StrategyConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type StrategyConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    strategyId?: boolean
    tickerId?: boolean
    timeframe?: boolean
    shortWindow?: boolean
    longWindow?: boolean
    signalWindow?: boolean
    stopLossPct?: boolean
    rsiPeriod?: boolean
    rsiThreshold?: boolean
    signalEntry?: boolean
    signalExit?: boolean
    direction?: boolean
    allocationPct?: boolean
    parameters?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    strategy?: boolean | StrategyDefaultArgs<ExtArgs>
    ticker?: boolean | TickerDefaultArgs<ExtArgs>
    backtestResults?: boolean | StrategyConfiguration$backtestResultsArgs<ExtArgs>
    portfolioItems?: boolean | StrategyConfiguration$portfolioItemsArgs<ExtArgs>
    signals?: boolean | StrategyConfiguration$signalsArgs<ExtArgs>
    _count?: boolean | StrategyConfigurationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["strategyConfiguration"]>

  export type StrategyConfigurationSelectScalar = {
    id?: boolean
    strategyId?: boolean
    tickerId?: boolean
    timeframe?: boolean
    shortWindow?: boolean
    longWindow?: boolean
    signalWindow?: boolean
    stopLossPct?: boolean
    rsiPeriod?: boolean
    rsiThreshold?: boolean
    signalEntry?: boolean
    signalExit?: boolean
    direction?: boolean
    allocationPct?: boolean
    parameters?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StrategyConfigurationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    strategy?: boolean | StrategyDefaultArgs<ExtArgs>
    ticker?: boolean | TickerDefaultArgs<ExtArgs>
    backtestResults?: boolean | StrategyConfiguration$backtestResultsArgs<ExtArgs>
    portfolioItems?: boolean | StrategyConfiguration$portfolioItemsArgs<ExtArgs>
    signals?: boolean | StrategyConfiguration$signalsArgs<ExtArgs>
    _count?: boolean | StrategyConfigurationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StrategyConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StrategyConfiguration"
    objects: {
      strategy: Prisma.$StrategyPayload<ExtArgs>
      ticker: Prisma.$TickerPayload<ExtArgs>
      backtestResults: Prisma.$BacktestResultPayload<ExtArgs>[]
      portfolioItems: Prisma.$PortfolioStrategyPayload<ExtArgs>[]
      signals: Prisma.$SignalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      strategyId: string
      tickerId: string
      timeframe: $Enums.TimeframeType
      shortWindow: number | null
      longWindow: number | null
      signalWindow: number | null
      stopLossPct: Prisma.Decimal | null
      rsiPeriod: number | null
      rsiThreshold: Prisma.Decimal | null
      signalEntry: string | null
      signalExit: string | null
      direction: $Enums.DirectionType
      allocationPct: Prisma.Decimal | null
      parameters: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["strategyConfiguration"]>
    composites: {}
  }


  type StrategyConfigurationGetPayload<S extends boolean | null | undefined | StrategyConfigurationDefaultArgs> = $Result.GetResult<Prisma.$StrategyConfigurationPayload, S>

  type StrategyConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StrategyConfigurationFindManyArgs, 'select' | 'include'> & {
      select?: StrategyConfigurationCountAggregateInputType | true
    }

  export interface StrategyConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StrategyConfiguration'], meta: { name: 'StrategyConfiguration' } }
    /**
     * Find zero or one StrategyConfiguration that matches the filter.
     * @param {StrategyConfigurationFindUniqueArgs} args - Arguments to find a StrategyConfiguration
     * @example
     * // Get one StrategyConfiguration
     * const strategyConfiguration = await prisma.strategyConfiguration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StrategyConfigurationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyConfigurationFindUniqueArgs<ExtArgs>>
    ): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StrategyConfiguration that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StrategyConfigurationFindUniqueOrThrowArgs} args - Arguments to find a StrategyConfiguration
     * @example
     * // Get one StrategyConfiguration
     * const strategyConfiguration = await prisma.strategyConfiguration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StrategyConfigurationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyConfigurationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StrategyConfiguration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyConfigurationFindFirstArgs} args - Arguments to find a StrategyConfiguration
     * @example
     * // Get one StrategyConfiguration
     * const strategyConfiguration = await prisma.strategyConfiguration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StrategyConfigurationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyConfigurationFindFirstArgs<ExtArgs>>
    ): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StrategyConfiguration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyConfigurationFindFirstOrThrowArgs} args - Arguments to find a StrategyConfiguration
     * @example
     * // Get one StrategyConfiguration
     * const strategyConfiguration = await prisma.strategyConfiguration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StrategyConfigurationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyConfigurationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StrategyConfigurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyConfigurationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StrategyConfigurations
     * const strategyConfigurations = await prisma.strategyConfiguration.findMany()
     * 
     * // Get first 10 StrategyConfigurations
     * const strategyConfigurations = await prisma.strategyConfiguration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const strategyConfigurationWithIdOnly = await prisma.strategyConfiguration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StrategyConfigurationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyConfigurationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StrategyConfiguration.
     * @param {StrategyConfigurationCreateArgs} args - Arguments to create a StrategyConfiguration.
     * @example
     * // Create one StrategyConfiguration
     * const StrategyConfiguration = await prisma.strategyConfiguration.create({
     *   data: {
     *     // ... data to create a StrategyConfiguration
     *   }
     * })
     * 
    **/
    create<T extends StrategyConfigurationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyConfigurationCreateArgs<ExtArgs>>
    ): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StrategyConfigurations.
     *     @param {StrategyConfigurationCreateManyArgs} args - Arguments to create many StrategyConfigurations.
     *     @example
     *     // Create many StrategyConfigurations
     *     const strategyConfiguration = await prisma.strategyConfiguration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StrategyConfigurationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyConfigurationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StrategyConfiguration.
     * @param {StrategyConfigurationDeleteArgs} args - Arguments to delete one StrategyConfiguration.
     * @example
     * // Delete one StrategyConfiguration
     * const StrategyConfiguration = await prisma.strategyConfiguration.delete({
     *   where: {
     *     // ... filter to delete one StrategyConfiguration
     *   }
     * })
     * 
    **/
    delete<T extends StrategyConfigurationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyConfigurationDeleteArgs<ExtArgs>>
    ): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StrategyConfiguration.
     * @param {StrategyConfigurationUpdateArgs} args - Arguments to update one StrategyConfiguration.
     * @example
     * // Update one StrategyConfiguration
     * const strategyConfiguration = await prisma.strategyConfiguration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StrategyConfigurationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyConfigurationUpdateArgs<ExtArgs>>
    ): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StrategyConfigurations.
     * @param {StrategyConfigurationDeleteManyArgs} args - Arguments to filter StrategyConfigurations to delete.
     * @example
     * // Delete a few StrategyConfigurations
     * const { count } = await prisma.strategyConfiguration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StrategyConfigurationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StrategyConfigurationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StrategyConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StrategyConfigurations
     * const strategyConfiguration = await prisma.strategyConfiguration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StrategyConfigurationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyConfigurationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StrategyConfiguration.
     * @param {StrategyConfigurationUpsertArgs} args - Arguments to update or create a StrategyConfiguration.
     * @example
     * // Update or create a StrategyConfiguration
     * const strategyConfiguration = await prisma.strategyConfiguration.upsert({
     *   create: {
     *     // ... data to create a StrategyConfiguration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StrategyConfiguration we want to update
     *   }
     * })
    **/
    upsert<T extends StrategyConfigurationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StrategyConfigurationUpsertArgs<ExtArgs>>
    ): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StrategyConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyConfigurationCountArgs} args - Arguments to filter StrategyConfigurations to count.
     * @example
     * // Count the number of StrategyConfigurations
     * const count = await prisma.strategyConfiguration.count({
     *   where: {
     *     // ... the filter for the StrategyConfigurations we want to count
     *   }
     * })
    **/
    count<T extends StrategyConfigurationCountArgs>(
      args?: Subset<T, StrategyConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StrategyConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StrategyConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StrategyConfigurationAggregateArgs>(args: Subset<T, StrategyConfigurationAggregateArgs>): Prisma.PrismaPromise<GetStrategyConfigurationAggregateType<T>>

    /**
     * Group by StrategyConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StrategyConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StrategyConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: StrategyConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StrategyConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStrategyConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StrategyConfiguration model
   */
  readonly fields: StrategyConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StrategyConfiguration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StrategyConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    strategy<T extends StrategyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StrategyDefaultArgs<ExtArgs>>): Prisma__StrategyClient<$Result.GetResult<Prisma.$StrategyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ticker<T extends TickerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TickerDefaultArgs<ExtArgs>>): Prisma__TickerClient<$Result.GetResult<Prisma.$TickerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    backtestResults<T extends StrategyConfiguration$backtestResultsArgs<ExtArgs> = {}>(args?: Subset<T, StrategyConfiguration$backtestResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'findMany'> | Null>;

    portfolioItems<T extends StrategyConfiguration$portfolioItemsArgs<ExtArgs> = {}>(args?: Subset<T, StrategyConfiguration$portfolioItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'findMany'> | Null>;

    signals<T extends StrategyConfiguration$signalsArgs<ExtArgs> = {}>(args?: Subset<T, StrategyConfiguration$signalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StrategyConfiguration model
   */ 
  interface StrategyConfigurationFieldRefs {
    readonly id: FieldRef<"StrategyConfiguration", 'String'>
    readonly strategyId: FieldRef<"StrategyConfiguration", 'String'>
    readonly tickerId: FieldRef<"StrategyConfiguration", 'String'>
    readonly timeframe: FieldRef<"StrategyConfiguration", 'TimeframeType'>
    readonly shortWindow: FieldRef<"StrategyConfiguration", 'Int'>
    readonly longWindow: FieldRef<"StrategyConfiguration", 'Int'>
    readonly signalWindow: FieldRef<"StrategyConfiguration", 'Int'>
    readonly stopLossPct: FieldRef<"StrategyConfiguration", 'Decimal'>
    readonly rsiPeriod: FieldRef<"StrategyConfiguration", 'Int'>
    readonly rsiThreshold: FieldRef<"StrategyConfiguration", 'Decimal'>
    readonly signalEntry: FieldRef<"StrategyConfiguration", 'String'>
    readonly signalExit: FieldRef<"StrategyConfiguration", 'String'>
    readonly direction: FieldRef<"StrategyConfiguration", 'DirectionType'>
    readonly allocationPct: FieldRef<"StrategyConfiguration", 'Decimal'>
    readonly parameters: FieldRef<"StrategyConfiguration", 'Json'>
    readonly createdAt: FieldRef<"StrategyConfiguration", 'DateTime'>
    readonly updatedAt: FieldRef<"StrategyConfiguration", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * StrategyConfiguration findUnique
   */
  export type StrategyConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which StrategyConfiguration to fetch.
     */
    where: StrategyConfigurationWhereUniqueInput
  }


  /**
   * StrategyConfiguration findUniqueOrThrow
   */
  export type StrategyConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which StrategyConfiguration to fetch.
     */
    where: StrategyConfigurationWhereUniqueInput
  }


  /**
   * StrategyConfiguration findFirst
   */
  export type StrategyConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which StrategyConfiguration to fetch.
     */
    where?: StrategyConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StrategyConfigurations to fetch.
     */
    orderBy?: StrategyConfigurationOrderByWithRelationInput | StrategyConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StrategyConfigurations.
     */
    cursor?: StrategyConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StrategyConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StrategyConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StrategyConfigurations.
     */
    distinct?: StrategyConfigurationScalarFieldEnum | StrategyConfigurationScalarFieldEnum[]
  }


  /**
   * StrategyConfiguration findFirstOrThrow
   */
  export type StrategyConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which StrategyConfiguration to fetch.
     */
    where?: StrategyConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StrategyConfigurations to fetch.
     */
    orderBy?: StrategyConfigurationOrderByWithRelationInput | StrategyConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StrategyConfigurations.
     */
    cursor?: StrategyConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StrategyConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StrategyConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StrategyConfigurations.
     */
    distinct?: StrategyConfigurationScalarFieldEnum | StrategyConfigurationScalarFieldEnum[]
  }


  /**
   * StrategyConfiguration findMany
   */
  export type StrategyConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which StrategyConfigurations to fetch.
     */
    where?: StrategyConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StrategyConfigurations to fetch.
     */
    orderBy?: StrategyConfigurationOrderByWithRelationInput | StrategyConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StrategyConfigurations.
     */
    cursor?: StrategyConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StrategyConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StrategyConfigurations.
     */
    skip?: number
    distinct?: StrategyConfigurationScalarFieldEnum | StrategyConfigurationScalarFieldEnum[]
  }


  /**
   * StrategyConfiguration create
   */
  export type StrategyConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * The data needed to create a StrategyConfiguration.
     */
    data: XOR<StrategyConfigurationCreateInput, StrategyConfigurationUncheckedCreateInput>
  }


  /**
   * StrategyConfiguration createMany
   */
  export type StrategyConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StrategyConfigurations.
     */
    data: StrategyConfigurationCreateManyInput | StrategyConfigurationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StrategyConfiguration update
   */
  export type StrategyConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * The data needed to update a StrategyConfiguration.
     */
    data: XOR<StrategyConfigurationUpdateInput, StrategyConfigurationUncheckedUpdateInput>
    /**
     * Choose, which StrategyConfiguration to update.
     */
    where: StrategyConfigurationWhereUniqueInput
  }


  /**
   * StrategyConfiguration updateMany
   */
  export type StrategyConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StrategyConfigurations.
     */
    data: XOR<StrategyConfigurationUpdateManyMutationInput, StrategyConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which StrategyConfigurations to update
     */
    where?: StrategyConfigurationWhereInput
  }


  /**
   * StrategyConfiguration upsert
   */
  export type StrategyConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * The filter to search for the StrategyConfiguration to update in case it exists.
     */
    where: StrategyConfigurationWhereUniqueInput
    /**
     * In case the StrategyConfiguration found by the `where` argument doesn't exist, create a new StrategyConfiguration with this data.
     */
    create: XOR<StrategyConfigurationCreateInput, StrategyConfigurationUncheckedCreateInput>
    /**
     * In case the StrategyConfiguration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StrategyConfigurationUpdateInput, StrategyConfigurationUncheckedUpdateInput>
  }


  /**
   * StrategyConfiguration delete
   */
  export type StrategyConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
    /**
     * Filter which StrategyConfiguration to delete.
     */
    where: StrategyConfigurationWhereUniqueInput
  }


  /**
   * StrategyConfiguration deleteMany
   */
  export type StrategyConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StrategyConfigurations to delete
     */
    where?: StrategyConfigurationWhereInput
  }


  /**
   * StrategyConfiguration.backtestResults
   */
  export type StrategyConfiguration$backtestResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    where?: BacktestResultWhereInput
    orderBy?: BacktestResultOrderByWithRelationInput | BacktestResultOrderByWithRelationInput[]
    cursor?: BacktestResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BacktestResultScalarFieldEnum | BacktestResultScalarFieldEnum[]
  }


  /**
   * StrategyConfiguration.portfolioItems
   */
  export type StrategyConfiguration$portfolioItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    where?: PortfolioStrategyWhereInput
    orderBy?: PortfolioStrategyOrderByWithRelationInput | PortfolioStrategyOrderByWithRelationInput[]
    cursor?: PortfolioStrategyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortfolioStrategyScalarFieldEnum | PortfolioStrategyScalarFieldEnum[]
  }


  /**
   * StrategyConfiguration.signals
   */
  export type StrategyConfiguration$signalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    where?: SignalWhereInput
    orderBy?: SignalOrderByWithRelationInput | SignalOrderByWithRelationInput[]
    cursor?: SignalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SignalScalarFieldEnum | SignalScalarFieldEnum[]
  }


  /**
   * StrategyConfiguration without action
   */
  export type StrategyConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StrategyConfiguration
     */
    select?: StrategyConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StrategyConfigurationInclude<ExtArgs> | null
  }



  /**
   * Model BacktestResult
   */

  export type AggregateBacktestResult = {
    _count: BacktestResultCountAggregateOutputType | null
    _avg: BacktestResultAvgAggregateOutputType | null
    _sum: BacktestResultSumAggregateOutputType | null
    _min: BacktestResultMinAggregateOutputType | null
    _max: BacktestResultMaxAggregateOutputType | null
  }

  export type BacktestResultAvgAggregateOutputType = {
    totalReturnPct: Decimal | null
    annualReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    calmarRatio: Decimal | null
    totalTrades: number | null
    winningTrades: number | null
    losingTrades: number | null
    winRatePct: Decimal | null
    profitFactor: Decimal | null
    expectancyPerTrade: Decimal | null
    avgTradeDuration: Decimal | null
    avgWinningTrade: Decimal | null
    avgLosingTrade: Decimal | null
    valueAtRisk95: Decimal | null
    conditionalValueAtRisk: Decimal | null
    beta: Decimal | null
    alpha: Decimal | null
    benchmarkReturnPct: Decimal | null
    outperformancePct: Decimal | null
    trackingError: Decimal | null
    informationRatio: Decimal | null
    score: Decimal | null
    openTrades: number | null
    tradesPerDay: Decimal | null
    tradesPerMonth: Decimal | null
  }

  export type BacktestResultSumAggregateOutputType = {
    totalReturnPct: Decimal | null
    annualReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    calmarRatio: Decimal | null
    totalTrades: number | null
    winningTrades: number | null
    losingTrades: number | null
    winRatePct: Decimal | null
    profitFactor: Decimal | null
    expectancyPerTrade: Decimal | null
    avgTradeDuration: Decimal | null
    avgWinningTrade: Decimal | null
    avgLosingTrade: Decimal | null
    valueAtRisk95: Decimal | null
    conditionalValueAtRisk: Decimal | null
    beta: Decimal | null
    alpha: Decimal | null
    benchmarkReturnPct: Decimal | null
    outperformancePct: Decimal | null
    trackingError: Decimal | null
    informationRatio: Decimal | null
    score: Decimal | null
    openTrades: number | null
    tradesPerDay: Decimal | null
    tradesPerMonth: Decimal | null
  }

  export type BacktestResultMinAggregateOutputType = {
    id: string | null
    strategyConfigId: string | null
    runDate: Date | null
    startDate: Date | null
    endDate: Date | null
    totalReturnPct: Decimal | null
    annualReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    calmarRatio: Decimal | null
    totalTrades: number | null
    winningTrades: number | null
    losingTrades: number | null
    winRatePct: Decimal | null
    profitFactor: Decimal | null
    expectancyPerTrade: Decimal | null
    avgTradeDuration: Decimal | null
    avgWinningTrade: Decimal | null
    avgLosingTrade: Decimal | null
    valueAtRisk95: Decimal | null
    conditionalValueAtRisk: Decimal | null
    beta: Decimal | null
    alpha: Decimal | null
    benchmarkReturnPct: Decimal | null
    outperformancePct: Decimal | null
    trackingError: Decimal | null
    informationRatio: Decimal | null
    score: Decimal | null
    openTrades: number | null
    tradesPerDay: Decimal | null
    tradesPerMonth: Decimal | null
    createdAt: Date | null
  }

  export type BacktestResultMaxAggregateOutputType = {
    id: string | null
    strategyConfigId: string | null
    runDate: Date | null
    startDate: Date | null
    endDate: Date | null
    totalReturnPct: Decimal | null
    annualReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    calmarRatio: Decimal | null
    totalTrades: number | null
    winningTrades: number | null
    losingTrades: number | null
    winRatePct: Decimal | null
    profitFactor: Decimal | null
    expectancyPerTrade: Decimal | null
    avgTradeDuration: Decimal | null
    avgWinningTrade: Decimal | null
    avgLosingTrade: Decimal | null
    valueAtRisk95: Decimal | null
    conditionalValueAtRisk: Decimal | null
    beta: Decimal | null
    alpha: Decimal | null
    benchmarkReturnPct: Decimal | null
    outperformancePct: Decimal | null
    trackingError: Decimal | null
    informationRatio: Decimal | null
    score: Decimal | null
    openTrades: number | null
    tradesPerDay: Decimal | null
    tradesPerMonth: Decimal | null
    createdAt: Date | null
  }

  export type BacktestResultCountAggregateOutputType = {
    id: number
    strategyConfigId: number
    runDate: number
    startDate: number
    endDate: number
    totalReturnPct: number
    annualReturnPct: number
    sharpeRatio: number
    sortinoRatio: number
    maxDrawdownPct: number
    calmarRatio: number
    totalTrades: number
    winningTrades: number
    losingTrades: number
    winRatePct: number
    profitFactor: number
    expectancyPerTrade: number
    avgTradeDuration: number
    avgWinningTrade: number
    avgLosingTrade: number
    valueAtRisk95: number
    conditionalValueAtRisk: number
    beta: number
    alpha: number
    benchmarkReturnPct: number
    outperformancePct: number
    trackingError: number
    informationRatio: number
    score: number
    openTrades: number
    tradesPerDay: number
    tradesPerMonth: number
    rawMetrics: number
    createdAt: number
    _all: number
  }


  export type BacktestResultAvgAggregateInputType = {
    totalReturnPct?: true
    annualReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    calmarRatio?: true
    totalTrades?: true
    winningTrades?: true
    losingTrades?: true
    winRatePct?: true
    profitFactor?: true
    expectancyPerTrade?: true
    avgTradeDuration?: true
    avgWinningTrade?: true
    avgLosingTrade?: true
    valueAtRisk95?: true
    conditionalValueAtRisk?: true
    beta?: true
    alpha?: true
    benchmarkReturnPct?: true
    outperformancePct?: true
    trackingError?: true
    informationRatio?: true
    score?: true
    openTrades?: true
    tradesPerDay?: true
    tradesPerMonth?: true
  }

  export type BacktestResultSumAggregateInputType = {
    totalReturnPct?: true
    annualReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    calmarRatio?: true
    totalTrades?: true
    winningTrades?: true
    losingTrades?: true
    winRatePct?: true
    profitFactor?: true
    expectancyPerTrade?: true
    avgTradeDuration?: true
    avgWinningTrade?: true
    avgLosingTrade?: true
    valueAtRisk95?: true
    conditionalValueAtRisk?: true
    beta?: true
    alpha?: true
    benchmarkReturnPct?: true
    outperformancePct?: true
    trackingError?: true
    informationRatio?: true
    score?: true
    openTrades?: true
    tradesPerDay?: true
    tradesPerMonth?: true
  }

  export type BacktestResultMinAggregateInputType = {
    id?: true
    strategyConfigId?: true
    runDate?: true
    startDate?: true
    endDate?: true
    totalReturnPct?: true
    annualReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    calmarRatio?: true
    totalTrades?: true
    winningTrades?: true
    losingTrades?: true
    winRatePct?: true
    profitFactor?: true
    expectancyPerTrade?: true
    avgTradeDuration?: true
    avgWinningTrade?: true
    avgLosingTrade?: true
    valueAtRisk95?: true
    conditionalValueAtRisk?: true
    beta?: true
    alpha?: true
    benchmarkReturnPct?: true
    outperformancePct?: true
    trackingError?: true
    informationRatio?: true
    score?: true
    openTrades?: true
    tradesPerDay?: true
    tradesPerMonth?: true
    createdAt?: true
  }

  export type BacktestResultMaxAggregateInputType = {
    id?: true
    strategyConfigId?: true
    runDate?: true
    startDate?: true
    endDate?: true
    totalReturnPct?: true
    annualReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    calmarRatio?: true
    totalTrades?: true
    winningTrades?: true
    losingTrades?: true
    winRatePct?: true
    profitFactor?: true
    expectancyPerTrade?: true
    avgTradeDuration?: true
    avgWinningTrade?: true
    avgLosingTrade?: true
    valueAtRisk95?: true
    conditionalValueAtRisk?: true
    beta?: true
    alpha?: true
    benchmarkReturnPct?: true
    outperformancePct?: true
    trackingError?: true
    informationRatio?: true
    score?: true
    openTrades?: true
    tradesPerDay?: true
    tradesPerMonth?: true
    createdAt?: true
  }

  export type BacktestResultCountAggregateInputType = {
    id?: true
    strategyConfigId?: true
    runDate?: true
    startDate?: true
    endDate?: true
    totalReturnPct?: true
    annualReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    calmarRatio?: true
    totalTrades?: true
    winningTrades?: true
    losingTrades?: true
    winRatePct?: true
    profitFactor?: true
    expectancyPerTrade?: true
    avgTradeDuration?: true
    avgWinningTrade?: true
    avgLosingTrade?: true
    valueAtRisk95?: true
    conditionalValueAtRisk?: true
    beta?: true
    alpha?: true
    benchmarkReturnPct?: true
    outperformancePct?: true
    trackingError?: true
    informationRatio?: true
    score?: true
    openTrades?: true
    tradesPerDay?: true
    tradesPerMonth?: true
    rawMetrics?: true
    createdAt?: true
    _all?: true
  }

  export type BacktestResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BacktestResult to aggregate.
     */
    where?: BacktestResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BacktestResults to fetch.
     */
    orderBy?: BacktestResultOrderByWithRelationInput | BacktestResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BacktestResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BacktestResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BacktestResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BacktestResults
    **/
    _count?: true | BacktestResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BacktestResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BacktestResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BacktestResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BacktestResultMaxAggregateInputType
  }

  export type GetBacktestResultAggregateType<T extends BacktestResultAggregateArgs> = {
        [P in keyof T & keyof AggregateBacktestResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBacktestResult[P]>
      : GetScalarType<T[P], AggregateBacktestResult[P]>
  }




  export type BacktestResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BacktestResultWhereInput
    orderBy?: BacktestResultOrderByWithAggregationInput | BacktestResultOrderByWithAggregationInput[]
    by: BacktestResultScalarFieldEnum[] | BacktestResultScalarFieldEnum
    having?: BacktestResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BacktestResultCountAggregateInputType | true
    _avg?: BacktestResultAvgAggregateInputType
    _sum?: BacktestResultSumAggregateInputType
    _min?: BacktestResultMinAggregateInputType
    _max?: BacktestResultMaxAggregateInputType
  }

  export type BacktestResultGroupByOutputType = {
    id: string
    strategyConfigId: string
    runDate: Date
    startDate: Date
    endDate: Date
    totalReturnPct: Decimal
    annualReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    calmarRatio: Decimal | null
    totalTrades: number
    winningTrades: number | null
    losingTrades: number | null
    winRatePct: Decimal | null
    profitFactor: Decimal | null
    expectancyPerTrade: Decimal | null
    avgTradeDuration: Decimal | null
    avgWinningTrade: Decimal | null
    avgLosingTrade: Decimal | null
    valueAtRisk95: Decimal | null
    conditionalValueAtRisk: Decimal | null
    beta: Decimal | null
    alpha: Decimal | null
    benchmarkReturnPct: Decimal | null
    outperformancePct: Decimal | null
    trackingError: Decimal | null
    informationRatio: Decimal | null
    score: Decimal | null
    openTrades: number | null
    tradesPerDay: Decimal | null
    tradesPerMonth: Decimal | null
    rawMetrics: JsonValue | null
    createdAt: Date
    _count: BacktestResultCountAggregateOutputType | null
    _avg: BacktestResultAvgAggregateOutputType | null
    _sum: BacktestResultSumAggregateOutputType | null
    _min: BacktestResultMinAggregateOutputType | null
    _max: BacktestResultMaxAggregateOutputType | null
  }

  type GetBacktestResultGroupByPayload<T extends BacktestResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BacktestResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BacktestResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BacktestResultGroupByOutputType[P]>
            : GetScalarType<T[P], BacktestResultGroupByOutputType[P]>
        }
      >
    >


  export type BacktestResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    strategyConfigId?: boolean
    runDate?: boolean
    startDate?: boolean
    endDate?: boolean
    totalReturnPct?: boolean
    annualReturnPct?: boolean
    sharpeRatio?: boolean
    sortinoRatio?: boolean
    maxDrawdownPct?: boolean
    calmarRatio?: boolean
    totalTrades?: boolean
    winningTrades?: boolean
    losingTrades?: boolean
    winRatePct?: boolean
    profitFactor?: boolean
    expectancyPerTrade?: boolean
    avgTradeDuration?: boolean
    avgWinningTrade?: boolean
    avgLosingTrade?: boolean
    valueAtRisk95?: boolean
    conditionalValueAtRisk?: boolean
    beta?: boolean
    alpha?: boolean
    benchmarkReturnPct?: boolean
    outperformancePct?: boolean
    trackingError?: boolean
    informationRatio?: boolean
    score?: boolean
    openTrades?: boolean
    tradesPerDay?: boolean
    tradesPerMonth?: boolean
    rawMetrics?: boolean
    createdAt?: boolean
    strategyConfig?: boolean | StrategyConfigurationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["backtestResult"]>

  export type BacktestResultSelectScalar = {
    id?: boolean
    strategyConfigId?: boolean
    runDate?: boolean
    startDate?: boolean
    endDate?: boolean
    totalReturnPct?: boolean
    annualReturnPct?: boolean
    sharpeRatio?: boolean
    sortinoRatio?: boolean
    maxDrawdownPct?: boolean
    calmarRatio?: boolean
    totalTrades?: boolean
    winningTrades?: boolean
    losingTrades?: boolean
    winRatePct?: boolean
    profitFactor?: boolean
    expectancyPerTrade?: boolean
    avgTradeDuration?: boolean
    avgWinningTrade?: boolean
    avgLosingTrade?: boolean
    valueAtRisk95?: boolean
    conditionalValueAtRisk?: boolean
    beta?: boolean
    alpha?: boolean
    benchmarkReturnPct?: boolean
    outperformancePct?: boolean
    trackingError?: boolean
    informationRatio?: boolean
    score?: boolean
    openTrades?: boolean
    tradesPerDay?: boolean
    tradesPerMonth?: boolean
    rawMetrics?: boolean
    createdAt?: boolean
  }

  export type BacktestResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    strategyConfig?: boolean | StrategyConfigurationDefaultArgs<ExtArgs>
  }


  export type $BacktestResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BacktestResult"
    objects: {
      strategyConfig: Prisma.$StrategyConfigurationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      strategyConfigId: string
      runDate: Date
      startDate: Date
      endDate: Date
      totalReturnPct: Prisma.Decimal
      annualReturnPct: Prisma.Decimal | null
      sharpeRatio: Prisma.Decimal | null
      sortinoRatio: Prisma.Decimal | null
      maxDrawdownPct: Prisma.Decimal | null
      calmarRatio: Prisma.Decimal | null
      totalTrades: number
      winningTrades: number | null
      losingTrades: number | null
      winRatePct: Prisma.Decimal | null
      profitFactor: Prisma.Decimal | null
      expectancyPerTrade: Prisma.Decimal | null
      avgTradeDuration: Prisma.Decimal | null
      avgWinningTrade: Prisma.Decimal | null
      avgLosingTrade: Prisma.Decimal | null
      valueAtRisk95: Prisma.Decimal | null
      conditionalValueAtRisk: Prisma.Decimal | null
      beta: Prisma.Decimal | null
      alpha: Prisma.Decimal | null
      benchmarkReturnPct: Prisma.Decimal | null
      outperformancePct: Prisma.Decimal | null
      trackingError: Prisma.Decimal | null
      informationRatio: Prisma.Decimal | null
      score: Prisma.Decimal | null
      openTrades: number | null
      tradesPerDay: Prisma.Decimal | null
      tradesPerMonth: Prisma.Decimal | null
      rawMetrics: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["backtestResult"]>
    composites: {}
  }


  type BacktestResultGetPayload<S extends boolean | null | undefined | BacktestResultDefaultArgs> = $Result.GetResult<Prisma.$BacktestResultPayload, S>

  type BacktestResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BacktestResultFindManyArgs, 'select' | 'include'> & {
      select?: BacktestResultCountAggregateInputType | true
    }

  export interface BacktestResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BacktestResult'], meta: { name: 'BacktestResult' } }
    /**
     * Find zero or one BacktestResult that matches the filter.
     * @param {BacktestResultFindUniqueArgs} args - Arguments to find a BacktestResult
     * @example
     * // Get one BacktestResult
     * const backtestResult = await prisma.backtestResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BacktestResultFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BacktestResultFindUniqueArgs<ExtArgs>>
    ): Prisma__BacktestResultClient<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BacktestResult that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BacktestResultFindUniqueOrThrowArgs} args - Arguments to find a BacktestResult
     * @example
     * // Get one BacktestResult
     * const backtestResult = await prisma.backtestResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BacktestResultFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BacktestResultFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BacktestResultClient<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BacktestResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacktestResultFindFirstArgs} args - Arguments to find a BacktestResult
     * @example
     * // Get one BacktestResult
     * const backtestResult = await prisma.backtestResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BacktestResultFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BacktestResultFindFirstArgs<ExtArgs>>
    ): Prisma__BacktestResultClient<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BacktestResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacktestResultFindFirstOrThrowArgs} args - Arguments to find a BacktestResult
     * @example
     * // Get one BacktestResult
     * const backtestResult = await prisma.backtestResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BacktestResultFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BacktestResultFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BacktestResultClient<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BacktestResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacktestResultFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BacktestResults
     * const backtestResults = await prisma.backtestResult.findMany()
     * 
     * // Get first 10 BacktestResults
     * const backtestResults = await prisma.backtestResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const backtestResultWithIdOnly = await prisma.backtestResult.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BacktestResultFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BacktestResultFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BacktestResult.
     * @param {BacktestResultCreateArgs} args - Arguments to create a BacktestResult.
     * @example
     * // Create one BacktestResult
     * const BacktestResult = await prisma.backtestResult.create({
     *   data: {
     *     // ... data to create a BacktestResult
     *   }
     * })
     * 
    **/
    create<T extends BacktestResultCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BacktestResultCreateArgs<ExtArgs>>
    ): Prisma__BacktestResultClient<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BacktestResults.
     *     @param {BacktestResultCreateManyArgs} args - Arguments to create many BacktestResults.
     *     @example
     *     // Create many BacktestResults
     *     const backtestResult = await prisma.backtestResult.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BacktestResultCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BacktestResultCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BacktestResult.
     * @param {BacktestResultDeleteArgs} args - Arguments to delete one BacktestResult.
     * @example
     * // Delete one BacktestResult
     * const BacktestResult = await prisma.backtestResult.delete({
     *   where: {
     *     // ... filter to delete one BacktestResult
     *   }
     * })
     * 
    **/
    delete<T extends BacktestResultDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BacktestResultDeleteArgs<ExtArgs>>
    ): Prisma__BacktestResultClient<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BacktestResult.
     * @param {BacktestResultUpdateArgs} args - Arguments to update one BacktestResult.
     * @example
     * // Update one BacktestResult
     * const backtestResult = await prisma.backtestResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BacktestResultUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BacktestResultUpdateArgs<ExtArgs>>
    ): Prisma__BacktestResultClient<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BacktestResults.
     * @param {BacktestResultDeleteManyArgs} args - Arguments to filter BacktestResults to delete.
     * @example
     * // Delete a few BacktestResults
     * const { count } = await prisma.backtestResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BacktestResultDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BacktestResultDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BacktestResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacktestResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BacktestResults
     * const backtestResult = await prisma.backtestResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BacktestResultUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BacktestResultUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BacktestResult.
     * @param {BacktestResultUpsertArgs} args - Arguments to update or create a BacktestResult.
     * @example
     * // Update or create a BacktestResult
     * const backtestResult = await prisma.backtestResult.upsert({
     *   create: {
     *     // ... data to create a BacktestResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BacktestResult we want to update
     *   }
     * })
    **/
    upsert<T extends BacktestResultUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BacktestResultUpsertArgs<ExtArgs>>
    ): Prisma__BacktestResultClient<$Result.GetResult<Prisma.$BacktestResultPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BacktestResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacktestResultCountArgs} args - Arguments to filter BacktestResults to count.
     * @example
     * // Count the number of BacktestResults
     * const count = await prisma.backtestResult.count({
     *   where: {
     *     // ... the filter for the BacktestResults we want to count
     *   }
     * })
    **/
    count<T extends BacktestResultCountArgs>(
      args?: Subset<T, BacktestResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BacktestResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BacktestResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacktestResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BacktestResultAggregateArgs>(args: Subset<T, BacktestResultAggregateArgs>): Prisma.PrismaPromise<GetBacktestResultAggregateType<T>>

    /**
     * Group by BacktestResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BacktestResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BacktestResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BacktestResultGroupByArgs['orderBy'] }
        : { orderBy?: BacktestResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BacktestResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBacktestResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BacktestResult model
   */
  readonly fields: BacktestResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BacktestResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BacktestResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    strategyConfig<T extends StrategyConfigurationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StrategyConfigurationDefaultArgs<ExtArgs>>): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BacktestResult model
   */ 
  interface BacktestResultFieldRefs {
    readonly id: FieldRef<"BacktestResult", 'String'>
    readonly strategyConfigId: FieldRef<"BacktestResult", 'String'>
    readonly runDate: FieldRef<"BacktestResult", 'DateTime'>
    readonly startDate: FieldRef<"BacktestResult", 'DateTime'>
    readonly endDate: FieldRef<"BacktestResult", 'DateTime'>
    readonly totalReturnPct: FieldRef<"BacktestResult", 'Decimal'>
    readonly annualReturnPct: FieldRef<"BacktestResult", 'Decimal'>
    readonly sharpeRatio: FieldRef<"BacktestResult", 'Decimal'>
    readonly sortinoRatio: FieldRef<"BacktestResult", 'Decimal'>
    readonly maxDrawdownPct: FieldRef<"BacktestResult", 'Decimal'>
    readonly calmarRatio: FieldRef<"BacktestResult", 'Decimal'>
    readonly totalTrades: FieldRef<"BacktestResult", 'Int'>
    readonly winningTrades: FieldRef<"BacktestResult", 'Int'>
    readonly losingTrades: FieldRef<"BacktestResult", 'Int'>
    readonly winRatePct: FieldRef<"BacktestResult", 'Decimal'>
    readonly profitFactor: FieldRef<"BacktestResult", 'Decimal'>
    readonly expectancyPerTrade: FieldRef<"BacktestResult", 'Decimal'>
    readonly avgTradeDuration: FieldRef<"BacktestResult", 'Decimal'>
    readonly avgWinningTrade: FieldRef<"BacktestResult", 'Decimal'>
    readonly avgLosingTrade: FieldRef<"BacktestResult", 'Decimal'>
    readonly valueAtRisk95: FieldRef<"BacktestResult", 'Decimal'>
    readonly conditionalValueAtRisk: FieldRef<"BacktestResult", 'Decimal'>
    readonly beta: FieldRef<"BacktestResult", 'Decimal'>
    readonly alpha: FieldRef<"BacktestResult", 'Decimal'>
    readonly benchmarkReturnPct: FieldRef<"BacktestResult", 'Decimal'>
    readonly outperformancePct: FieldRef<"BacktestResult", 'Decimal'>
    readonly trackingError: FieldRef<"BacktestResult", 'Decimal'>
    readonly informationRatio: FieldRef<"BacktestResult", 'Decimal'>
    readonly score: FieldRef<"BacktestResult", 'Decimal'>
    readonly openTrades: FieldRef<"BacktestResult", 'Int'>
    readonly tradesPerDay: FieldRef<"BacktestResult", 'Decimal'>
    readonly tradesPerMonth: FieldRef<"BacktestResult", 'Decimal'>
    readonly rawMetrics: FieldRef<"BacktestResult", 'Json'>
    readonly createdAt: FieldRef<"BacktestResult", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * BacktestResult findUnique
   */
  export type BacktestResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * Filter, which BacktestResult to fetch.
     */
    where: BacktestResultWhereUniqueInput
  }


  /**
   * BacktestResult findUniqueOrThrow
   */
  export type BacktestResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * Filter, which BacktestResult to fetch.
     */
    where: BacktestResultWhereUniqueInput
  }


  /**
   * BacktestResult findFirst
   */
  export type BacktestResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * Filter, which BacktestResult to fetch.
     */
    where?: BacktestResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BacktestResults to fetch.
     */
    orderBy?: BacktestResultOrderByWithRelationInput | BacktestResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BacktestResults.
     */
    cursor?: BacktestResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BacktestResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BacktestResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BacktestResults.
     */
    distinct?: BacktestResultScalarFieldEnum | BacktestResultScalarFieldEnum[]
  }


  /**
   * BacktestResult findFirstOrThrow
   */
  export type BacktestResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * Filter, which BacktestResult to fetch.
     */
    where?: BacktestResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BacktestResults to fetch.
     */
    orderBy?: BacktestResultOrderByWithRelationInput | BacktestResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BacktestResults.
     */
    cursor?: BacktestResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BacktestResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BacktestResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BacktestResults.
     */
    distinct?: BacktestResultScalarFieldEnum | BacktestResultScalarFieldEnum[]
  }


  /**
   * BacktestResult findMany
   */
  export type BacktestResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * Filter, which BacktestResults to fetch.
     */
    where?: BacktestResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BacktestResults to fetch.
     */
    orderBy?: BacktestResultOrderByWithRelationInput | BacktestResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BacktestResults.
     */
    cursor?: BacktestResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BacktestResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BacktestResults.
     */
    skip?: number
    distinct?: BacktestResultScalarFieldEnum | BacktestResultScalarFieldEnum[]
  }


  /**
   * BacktestResult create
   */
  export type BacktestResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * The data needed to create a BacktestResult.
     */
    data: XOR<BacktestResultCreateInput, BacktestResultUncheckedCreateInput>
  }


  /**
   * BacktestResult createMany
   */
  export type BacktestResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BacktestResults.
     */
    data: BacktestResultCreateManyInput | BacktestResultCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BacktestResult update
   */
  export type BacktestResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * The data needed to update a BacktestResult.
     */
    data: XOR<BacktestResultUpdateInput, BacktestResultUncheckedUpdateInput>
    /**
     * Choose, which BacktestResult to update.
     */
    where: BacktestResultWhereUniqueInput
  }


  /**
   * BacktestResult updateMany
   */
  export type BacktestResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BacktestResults.
     */
    data: XOR<BacktestResultUpdateManyMutationInput, BacktestResultUncheckedUpdateManyInput>
    /**
     * Filter which BacktestResults to update
     */
    where?: BacktestResultWhereInput
  }


  /**
   * BacktestResult upsert
   */
  export type BacktestResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * The filter to search for the BacktestResult to update in case it exists.
     */
    where: BacktestResultWhereUniqueInput
    /**
     * In case the BacktestResult found by the `where` argument doesn't exist, create a new BacktestResult with this data.
     */
    create: XOR<BacktestResultCreateInput, BacktestResultUncheckedCreateInput>
    /**
     * In case the BacktestResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BacktestResultUpdateInput, BacktestResultUncheckedUpdateInput>
  }


  /**
   * BacktestResult delete
   */
  export type BacktestResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
    /**
     * Filter which BacktestResult to delete.
     */
    where: BacktestResultWhereUniqueInput
  }


  /**
   * BacktestResult deleteMany
   */
  export type BacktestResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BacktestResults to delete
     */
    where?: BacktestResultWhereInput
  }


  /**
   * BacktestResult without action
   */
  export type BacktestResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BacktestResult
     */
    select?: BacktestResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BacktestResultInclude<ExtArgs> | null
  }



  /**
   * Model Portfolio
   */

  export type AggregatePortfolio = {
    _count: PortfolioCountAggregateOutputType | null
    _min: PortfolioMinAggregateOutputType | null
    _max: PortfolioMaxAggregateOutputType | null
  }

  export type PortfolioMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: $Enums.PortfolioType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PortfolioMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: $Enums.PortfolioType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PortfolioCountAggregateOutputType = {
    id: number
    name: number
    description: number
    type: number
    parameters: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PortfolioMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PortfolioMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PortfolioCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    parameters?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PortfolioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portfolio to aggregate.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Portfolios
    **/
    _count?: true | PortfolioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PortfolioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PortfolioMaxAggregateInputType
  }

  export type GetPortfolioAggregateType<T extends PortfolioAggregateArgs> = {
        [P in keyof T & keyof AggregatePortfolio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePortfolio[P]>
      : GetScalarType<T[P], AggregatePortfolio[P]>
  }




  export type PortfolioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioWhereInput
    orderBy?: PortfolioOrderByWithAggregationInput | PortfolioOrderByWithAggregationInput[]
    by: PortfolioScalarFieldEnum[] | PortfolioScalarFieldEnum
    having?: PortfolioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PortfolioCountAggregateInputType | true
    _min?: PortfolioMinAggregateInputType
    _max?: PortfolioMaxAggregateInputType
  }

  export type PortfolioGroupByOutputType = {
    id: string
    name: string
    description: string | null
    type: $Enums.PortfolioType
    parameters: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: PortfolioCountAggregateOutputType | null
    _min: PortfolioMinAggregateOutputType | null
    _max: PortfolioMaxAggregateOutputType | null
  }

  type GetPortfolioGroupByPayload<T extends PortfolioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PortfolioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PortfolioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PortfolioGroupByOutputType[P]>
            : GetScalarType<T[P], PortfolioGroupByOutputType[P]>
        }
      >
    >


  export type PortfolioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    parameters?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    strategies?: boolean | Portfolio$strategiesArgs<ExtArgs>
    metrics?: boolean | Portfolio$metricsArgs<ExtArgs>
    _count?: boolean | PortfolioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    parameters?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PortfolioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    strategies?: boolean | Portfolio$strategiesArgs<ExtArgs>
    metrics?: boolean | Portfolio$metricsArgs<ExtArgs>
    _count?: boolean | PortfolioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PortfolioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Portfolio"
    objects: {
      strategies: Prisma.$PortfolioStrategyPayload<ExtArgs>[]
      metrics: Prisma.$PortfolioMetricPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      type: $Enums.PortfolioType
      parameters: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["portfolio"]>
    composites: {}
  }


  type PortfolioGetPayload<S extends boolean | null | undefined | PortfolioDefaultArgs> = $Result.GetResult<Prisma.$PortfolioPayload, S>

  type PortfolioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PortfolioFindManyArgs, 'select' | 'include'> & {
      select?: PortfolioCountAggregateInputType | true
    }

  export interface PortfolioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Portfolio'], meta: { name: 'Portfolio' } }
    /**
     * Find zero or one Portfolio that matches the filter.
     * @param {PortfolioFindUniqueArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PortfolioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioFindUniqueArgs<ExtArgs>>
    ): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Portfolio that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PortfolioFindUniqueOrThrowArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PortfolioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Portfolio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindFirstArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PortfolioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioFindFirstArgs<ExtArgs>>
    ): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Portfolio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindFirstOrThrowArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PortfolioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Portfolios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Portfolios
     * const portfolios = await prisma.portfolio.findMany()
     * 
     * // Get first 10 Portfolios
     * const portfolios = await prisma.portfolio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PortfolioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Portfolio.
     * @param {PortfolioCreateArgs} args - Arguments to create a Portfolio.
     * @example
     * // Create one Portfolio
     * const Portfolio = await prisma.portfolio.create({
     *   data: {
     *     // ... data to create a Portfolio
     *   }
     * })
     * 
    **/
    create<T extends PortfolioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioCreateArgs<ExtArgs>>
    ): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Portfolios.
     *     @param {PortfolioCreateManyArgs} args - Arguments to create many Portfolios.
     *     @example
     *     // Create many Portfolios
     *     const portfolio = await prisma.portfolio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PortfolioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Portfolio.
     * @param {PortfolioDeleteArgs} args - Arguments to delete one Portfolio.
     * @example
     * // Delete one Portfolio
     * const Portfolio = await prisma.portfolio.delete({
     *   where: {
     *     // ... filter to delete one Portfolio
     *   }
     * })
     * 
    **/
    delete<T extends PortfolioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioDeleteArgs<ExtArgs>>
    ): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Portfolio.
     * @param {PortfolioUpdateArgs} args - Arguments to update one Portfolio.
     * @example
     * // Update one Portfolio
     * const portfolio = await prisma.portfolio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PortfolioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioUpdateArgs<ExtArgs>>
    ): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Portfolios.
     * @param {PortfolioDeleteManyArgs} args - Arguments to filter Portfolios to delete.
     * @example
     * // Delete a few Portfolios
     * const { count } = await prisma.portfolio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PortfolioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Portfolios
     * const portfolio = await prisma.portfolio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PortfolioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Portfolio.
     * @param {PortfolioUpsertArgs} args - Arguments to update or create a Portfolio.
     * @example
     * // Update or create a Portfolio
     * const portfolio = await prisma.portfolio.upsert({
     *   create: {
     *     // ... data to create a Portfolio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Portfolio we want to update
     *   }
     * })
    **/
    upsert<T extends PortfolioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioUpsertArgs<ExtArgs>>
    ): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Portfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioCountArgs} args - Arguments to filter Portfolios to count.
     * @example
     * // Count the number of Portfolios
     * const count = await prisma.portfolio.count({
     *   where: {
     *     // ... the filter for the Portfolios we want to count
     *   }
     * })
    **/
    count<T extends PortfolioCountArgs>(
      args?: Subset<T, PortfolioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PortfolioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Portfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PortfolioAggregateArgs>(args: Subset<T, PortfolioAggregateArgs>): Prisma.PrismaPromise<GetPortfolioAggregateType<T>>

    /**
     * Group by Portfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PortfolioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PortfolioGroupByArgs['orderBy'] }
        : { orderBy?: PortfolioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PortfolioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Portfolio model
   */
  readonly fields: PortfolioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Portfolio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PortfolioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    strategies<T extends Portfolio$strategiesArgs<ExtArgs> = {}>(args?: Subset<T, Portfolio$strategiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'findMany'> | Null>;

    metrics<T extends Portfolio$metricsArgs<ExtArgs> = {}>(args?: Subset<T, Portfolio$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Portfolio model
   */ 
  interface PortfolioFieldRefs {
    readonly id: FieldRef<"Portfolio", 'String'>
    readonly name: FieldRef<"Portfolio", 'String'>
    readonly description: FieldRef<"Portfolio", 'String'>
    readonly type: FieldRef<"Portfolio", 'PortfolioType'>
    readonly parameters: FieldRef<"Portfolio", 'Json'>
    readonly createdAt: FieldRef<"Portfolio", 'DateTime'>
    readonly updatedAt: FieldRef<"Portfolio", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Portfolio findUnique
   */
  export type PortfolioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where: PortfolioWhereUniqueInput
  }


  /**
   * Portfolio findUniqueOrThrow
   */
  export type PortfolioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where: PortfolioWhereUniqueInput
  }


  /**
   * Portfolio findFirst
   */
  export type PortfolioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portfolios.
     */
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }


  /**
   * Portfolio findFirstOrThrow
   */
  export type PortfolioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portfolios.
     */
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }


  /**
   * Portfolio findMany
   */
  export type PortfolioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolios to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }


  /**
   * Portfolio create
   */
  export type PortfolioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The data needed to create a Portfolio.
     */
    data: XOR<PortfolioCreateInput, PortfolioUncheckedCreateInput>
  }


  /**
   * Portfolio createMany
   */
  export type PortfolioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Portfolios.
     */
    data: PortfolioCreateManyInput | PortfolioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Portfolio update
   */
  export type PortfolioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The data needed to update a Portfolio.
     */
    data: XOR<PortfolioUpdateInput, PortfolioUncheckedUpdateInput>
    /**
     * Choose, which Portfolio to update.
     */
    where: PortfolioWhereUniqueInput
  }


  /**
   * Portfolio updateMany
   */
  export type PortfolioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Portfolios.
     */
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyInput>
    /**
     * Filter which Portfolios to update
     */
    where?: PortfolioWhereInput
  }


  /**
   * Portfolio upsert
   */
  export type PortfolioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The filter to search for the Portfolio to update in case it exists.
     */
    where: PortfolioWhereUniqueInput
    /**
     * In case the Portfolio found by the `where` argument doesn't exist, create a new Portfolio with this data.
     */
    create: XOR<PortfolioCreateInput, PortfolioUncheckedCreateInput>
    /**
     * In case the Portfolio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PortfolioUpdateInput, PortfolioUncheckedUpdateInput>
  }


  /**
   * Portfolio delete
   */
  export type PortfolioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter which Portfolio to delete.
     */
    where: PortfolioWhereUniqueInput
  }


  /**
   * Portfolio deleteMany
   */
  export type PortfolioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portfolios to delete
     */
    where?: PortfolioWhereInput
  }


  /**
   * Portfolio.strategies
   */
  export type Portfolio$strategiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    where?: PortfolioStrategyWhereInput
    orderBy?: PortfolioStrategyOrderByWithRelationInput | PortfolioStrategyOrderByWithRelationInput[]
    cursor?: PortfolioStrategyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortfolioStrategyScalarFieldEnum | PortfolioStrategyScalarFieldEnum[]
  }


  /**
   * Portfolio.metrics
   */
  export type Portfolio$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    where?: PortfolioMetricWhereInput
    orderBy?: PortfolioMetricOrderByWithRelationInput | PortfolioMetricOrderByWithRelationInput[]
    cursor?: PortfolioMetricWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortfolioMetricScalarFieldEnum | PortfolioMetricScalarFieldEnum[]
  }


  /**
   * Portfolio without action
   */
  export type PortfolioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioInclude<ExtArgs> | null
  }



  /**
   * Model PortfolioStrategy
   */

  export type AggregatePortfolioStrategy = {
    _count: PortfolioStrategyCountAggregateOutputType | null
    _avg: PortfolioStrategyAvgAggregateOutputType | null
    _sum: PortfolioStrategySumAggregateOutputType | null
    _min: PortfolioStrategyMinAggregateOutputType | null
    _max: PortfolioStrategyMaxAggregateOutputType | null
  }

  export type PortfolioStrategyAvgAggregateOutputType = {
    allocationPct: Decimal | null
    position: number | null
  }

  export type PortfolioStrategySumAggregateOutputType = {
    allocationPct: Decimal | null
    position: number | null
  }

  export type PortfolioStrategyMinAggregateOutputType = {
    id: string | null
    portfolioId: string | null
    strategyConfigId: string | null
    allocationPct: Decimal | null
    position: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type PortfolioStrategyMaxAggregateOutputType = {
    id: string | null
    portfolioId: string | null
    strategyConfigId: string | null
    allocationPct: Decimal | null
    position: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type PortfolioStrategyCountAggregateOutputType = {
    id: number
    portfolioId: number
    strategyConfigId: number
    allocationPct: number
    position: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type PortfolioStrategyAvgAggregateInputType = {
    allocationPct?: true
    position?: true
  }

  export type PortfolioStrategySumAggregateInputType = {
    allocationPct?: true
    position?: true
  }

  export type PortfolioStrategyMinAggregateInputType = {
    id?: true
    portfolioId?: true
    strategyConfigId?: true
    allocationPct?: true
    position?: true
    isActive?: true
    createdAt?: true
  }

  export type PortfolioStrategyMaxAggregateInputType = {
    id?: true
    portfolioId?: true
    strategyConfigId?: true
    allocationPct?: true
    position?: true
    isActive?: true
    createdAt?: true
  }

  export type PortfolioStrategyCountAggregateInputType = {
    id?: true
    portfolioId?: true
    strategyConfigId?: true
    allocationPct?: true
    position?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type PortfolioStrategyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PortfolioStrategy to aggregate.
     */
    where?: PortfolioStrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PortfolioStrategies to fetch.
     */
    orderBy?: PortfolioStrategyOrderByWithRelationInput | PortfolioStrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PortfolioStrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PortfolioStrategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PortfolioStrategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PortfolioStrategies
    **/
    _count?: true | PortfolioStrategyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PortfolioStrategyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PortfolioStrategySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PortfolioStrategyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PortfolioStrategyMaxAggregateInputType
  }

  export type GetPortfolioStrategyAggregateType<T extends PortfolioStrategyAggregateArgs> = {
        [P in keyof T & keyof AggregatePortfolioStrategy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePortfolioStrategy[P]>
      : GetScalarType<T[P], AggregatePortfolioStrategy[P]>
  }




  export type PortfolioStrategyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioStrategyWhereInput
    orderBy?: PortfolioStrategyOrderByWithAggregationInput | PortfolioStrategyOrderByWithAggregationInput[]
    by: PortfolioStrategyScalarFieldEnum[] | PortfolioStrategyScalarFieldEnum
    having?: PortfolioStrategyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PortfolioStrategyCountAggregateInputType | true
    _avg?: PortfolioStrategyAvgAggregateInputType
    _sum?: PortfolioStrategySumAggregateInputType
    _min?: PortfolioStrategyMinAggregateInputType
    _max?: PortfolioStrategyMaxAggregateInputType
  }

  export type PortfolioStrategyGroupByOutputType = {
    id: string
    portfolioId: string
    strategyConfigId: string
    allocationPct: Decimal
    position: number
    isActive: boolean
    createdAt: Date
    _count: PortfolioStrategyCountAggregateOutputType | null
    _avg: PortfolioStrategyAvgAggregateOutputType | null
    _sum: PortfolioStrategySumAggregateOutputType | null
    _min: PortfolioStrategyMinAggregateOutputType | null
    _max: PortfolioStrategyMaxAggregateOutputType | null
  }

  type GetPortfolioStrategyGroupByPayload<T extends PortfolioStrategyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PortfolioStrategyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PortfolioStrategyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PortfolioStrategyGroupByOutputType[P]>
            : GetScalarType<T[P], PortfolioStrategyGroupByOutputType[P]>
        }
      >
    >


  export type PortfolioStrategySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    portfolioId?: boolean
    strategyConfigId?: boolean
    allocationPct?: boolean
    position?: boolean
    isActive?: boolean
    createdAt?: boolean
    portfolio?: boolean | PortfolioDefaultArgs<ExtArgs>
    strategyConfig?: boolean | StrategyConfigurationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolioStrategy"]>

  export type PortfolioStrategySelectScalar = {
    id?: boolean
    portfolioId?: boolean
    strategyConfigId?: boolean
    allocationPct?: boolean
    position?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type PortfolioStrategyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portfolio?: boolean | PortfolioDefaultArgs<ExtArgs>
    strategyConfig?: boolean | StrategyConfigurationDefaultArgs<ExtArgs>
  }


  export type $PortfolioStrategyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PortfolioStrategy"
    objects: {
      portfolio: Prisma.$PortfolioPayload<ExtArgs>
      strategyConfig: Prisma.$StrategyConfigurationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      portfolioId: string
      strategyConfigId: string
      allocationPct: Prisma.Decimal
      position: number
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["portfolioStrategy"]>
    composites: {}
  }


  type PortfolioStrategyGetPayload<S extends boolean | null | undefined | PortfolioStrategyDefaultArgs> = $Result.GetResult<Prisma.$PortfolioStrategyPayload, S>

  type PortfolioStrategyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PortfolioStrategyFindManyArgs, 'select' | 'include'> & {
      select?: PortfolioStrategyCountAggregateInputType | true
    }

  export interface PortfolioStrategyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PortfolioStrategy'], meta: { name: 'PortfolioStrategy' } }
    /**
     * Find zero or one PortfolioStrategy that matches the filter.
     * @param {PortfolioStrategyFindUniqueArgs} args - Arguments to find a PortfolioStrategy
     * @example
     * // Get one PortfolioStrategy
     * const portfolioStrategy = await prisma.portfolioStrategy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PortfolioStrategyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioStrategyFindUniqueArgs<ExtArgs>>
    ): Prisma__PortfolioStrategyClient<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PortfolioStrategy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PortfolioStrategyFindUniqueOrThrowArgs} args - Arguments to find a PortfolioStrategy
     * @example
     * // Get one PortfolioStrategy
     * const portfolioStrategy = await prisma.portfolioStrategy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PortfolioStrategyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioStrategyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PortfolioStrategyClient<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PortfolioStrategy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioStrategyFindFirstArgs} args - Arguments to find a PortfolioStrategy
     * @example
     * // Get one PortfolioStrategy
     * const portfolioStrategy = await prisma.portfolioStrategy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PortfolioStrategyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioStrategyFindFirstArgs<ExtArgs>>
    ): Prisma__PortfolioStrategyClient<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PortfolioStrategy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioStrategyFindFirstOrThrowArgs} args - Arguments to find a PortfolioStrategy
     * @example
     * // Get one PortfolioStrategy
     * const portfolioStrategy = await prisma.portfolioStrategy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PortfolioStrategyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioStrategyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PortfolioStrategyClient<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PortfolioStrategies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioStrategyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PortfolioStrategies
     * const portfolioStrategies = await prisma.portfolioStrategy.findMany()
     * 
     * // Get first 10 PortfolioStrategies
     * const portfolioStrategies = await prisma.portfolioStrategy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portfolioStrategyWithIdOnly = await prisma.portfolioStrategy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PortfolioStrategyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioStrategyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PortfolioStrategy.
     * @param {PortfolioStrategyCreateArgs} args - Arguments to create a PortfolioStrategy.
     * @example
     * // Create one PortfolioStrategy
     * const PortfolioStrategy = await prisma.portfolioStrategy.create({
     *   data: {
     *     // ... data to create a PortfolioStrategy
     *   }
     * })
     * 
    **/
    create<T extends PortfolioStrategyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioStrategyCreateArgs<ExtArgs>>
    ): Prisma__PortfolioStrategyClient<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PortfolioStrategies.
     *     @param {PortfolioStrategyCreateManyArgs} args - Arguments to create many PortfolioStrategies.
     *     @example
     *     // Create many PortfolioStrategies
     *     const portfolioStrategy = await prisma.portfolioStrategy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PortfolioStrategyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioStrategyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PortfolioStrategy.
     * @param {PortfolioStrategyDeleteArgs} args - Arguments to delete one PortfolioStrategy.
     * @example
     * // Delete one PortfolioStrategy
     * const PortfolioStrategy = await prisma.portfolioStrategy.delete({
     *   where: {
     *     // ... filter to delete one PortfolioStrategy
     *   }
     * })
     * 
    **/
    delete<T extends PortfolioStrategyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioStrategyDeleteArgs<ExtArgs>>
    ): Prisma__PortfolioStrategyClient<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PortfolioStrategy.
     * @param {PortfolioStrategyUpdateArgs} args - Arguments to update one PortfolioStrategy.
     * @example
     * // Update one PortfolioStrategy
     * const portfolioStrategy = await prisma.portfolioStrategy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PortfolioStrategyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioStrategyUpdateArgs<ExtArgs>>
    ): Prisma__PortfolioStrategyClient<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PortfolioStrategies.
     * @param {PortfolioStrategyDeleteManyArgs} args - Arguments to filter PortfolioStrategies to delete.
     * @example
     * // Delete a few PortfolioStrategies
     * const { count } = await prisma.portfolioStrategy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PortfolioStrategyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioStrategyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PortfolioStrategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioStrategyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PortfolioStrategies
     * const portfolioStrategy = await prisma.portfolioStrategy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PortfolioStrategyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioStrategyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PortfolioStrategy.
     * @param {PortfolioStrategyUpsertArgs} args - Arguments to update or create a PortfolioStrategy.
     * @example
     * // Update or create a PortfolioStrategy
     * const portfolioStrategy = await prisma.portfolioStrategy.upsert({
     *   create: {
     *     // ... data to create a PortfolioStrategy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PortfolioStrategy we want to update
     *   }
     * })
    **/
    upsert<T extends PortfolioStrategyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioStrategyUpsertArgs<ExtArgs>>
    ): Prisma__PortfolioStrategyClient<$Result.GetResult<Prisma.$PortfolioStrategyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PortfolioStrategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioStrategyCountArgs} args - Arguments to filter PortfolioStrategies to count.
     * @example
     * // Count the number of PortfolioStrategies
     * const count = await prisma.portfolioStrategy.count({
     *   where: {
     *     // ... the filter for the PortfolioStrategies we want to count
     *   }
     * })
    **/
    count<T extends PortfolioStrategyCountArgs>(
      args?: Subset<T, PortfolioStrategyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PortfolioStrategyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PortfolioStrategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioStrategyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PortfolioStrategyAggregateArgs>(args: Subset<T, PortfolioStrategyAggregateArgs>): Prisma.PrismaPromise<GetPortfolioStrategyAggregateType<T>>

    /**
     * Group by PortfolioStrategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioStrategyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PortfolioStrategyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PortfolioStrategyGroupByArgs['orderBy'] }
        : { orderBy?: PortfolioStrategyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PortfolioStrategyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolioStrategyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PortfolioStrategy model
   */
  readonly fields: PortfolioStrategyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PortfolioStrategy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PortfolioStrategyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    portfolio<T extends PortfolioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PortfolioDefaultArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    strategyConfig<T extends StrategyConfigurationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StrategyConfigurationDefaultArgs<ExtArgs>>): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PortfolioStrategy model
   */ 
  interface PortfolioStrategyFieldRefs {
    readonly id: FieldRef<"PortfolioStrategy", 'String'>
    readonly portfolioId: FieldRef<"PortfolioStrategy", 'String'>
    readonly strategyConfigId: FieldRef<"PortfolioStrategy", 'String'>
    readonly allocationPct: FieldRef<"PortfolioStrategy", 'Decimal'>
    readonly position: FieldRef<"PortfolioStrategy", 'Int'>
    readonly isActive: FieldRef<"PortfolioStrategy", 'Boolean'>
    readonly createdAt: FieldRef<"PortfolioStrategy", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PortfolioStrategy findUnique
   */
  export type PortfolioStrategyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioStrategy to fetch.
     */
    where: PortfolioStrategyWhereUniqueInput
  }


  /**
   * PortfolioStrategy findUniqueOrThrow
   */
  export type PortfolioStrategyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioStrategy to fetch.
     */
    where: PortfolioStrategyWhereUniqueInput
  }


  /**
   * PortfolioStrategy findFirst
   */
  export type PortfolioStrategyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioStrategy to fetch.
     */
    where?: PortfolioStrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PortfolioStrategies to fetch.
     */
    orderBy?: PortfolioStrategyOrderByWithRelationInput | PortfolioStrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PortfolioStrategies.
     */
    cursor?: PortfolioStrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PortfolioStrategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PortfolioStrategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PortfolioStrategies.
     */
    distinct?: PortfolioStrategyScalarFieldEnum | PortfolioStrategyScalarFieldEnum[]
  }


  /**
   * PortfolioStrategy findFirstOrThrow
   */
  export type PortfolioStrategyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioStrategy to fetch.
     */
    where?: PortfolioStrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PortfolioStrategies to fetch.
     */
    orderBy?: PortfolioStrategyOrderByWithRelationInput | PortfolioStrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PortfolioStrategies.
     */
    cursor?: PortfolioStrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PortfolioStrategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PortfolioStrategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PortfolioStrategies.
     */
    distinct?: PortfolioStrategyScalarFieldEnum | PortfolioStrategyScalarFieldEnum[]
  }


  /**
   * PortfolioStrategy findMany
   */
  export type PortfolioStrategyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioStrategies to fetch.
     */
    where?: PortfolioStrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PortfolioStrategies to fetch.
     */
    orderBy?: PortfolioStrategyOrderByWithRelationInput | PortfolioStrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PortfolioStrategies.
     */
    cursor?: PortfolioStrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PortfolioStrategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PortfolioStrategies.
     */
    skip?: number
    distinct?: PortfolioStrategyScalarFieldEnum | PortfolioStrategyScalarFieldEnum[]
  }


  /**
   * PortfolioStrategy create
   */
  export type PortfolioStrategyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * The data needed to create a PortfolioStrategy.
     */
    data: XOR<PortfolioStrategyCreateInput, PortfolioStrategyUncheckedCreateInput>
  }


  /**
   * PortfolioStrategy createMany
   */
  export type PortfolioStrategyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PortfolioStrategies.
     */
    data: PortfolioStrategyCreateManyInput | PortfolioStrategyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PortfolioStrategy update
   */
  export type PortfolioStrategyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * The data needed to update a PortfolioStrategy.
     */
    data: XOR<PortfolioStrategyUpdateInput, PortfolioStrategyUncheckedUpdateInput>
    /**
     * Choose, which PortfolioStrategy to update.
     */
    where: PortfolioStrategyWhereUniqueInput
  }


  /**
   * PortfolioStrategy updateMany
   */
  export type PortfolioStrategyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PortfolioStrategies.
     */
    data: XOR<PortfolioStrategyUpdateManyMutationInput, PortfolioStrategyUncheckedUpdateManyInput>
    /**
     * Filter which PortfolioStrategies to update
     */
    where?: PortfolioStrategyWhereInput
  }


  /**
   * PortfolioStrategy upsert
   */
  export type PortfolioStrategyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * The filter to search for the PortfolioStrategy to update in case it exists.
     */
    where: PortfolioStrategyWhereUniqueInput
    /**
     * In case the PortfolioStrategy found by the `where` argument doesn't exist, create a new PortfolioStrategy with this data.
     */
    create: XOR<PortfolioStrategyCreateInput, PortfolioStrategyUncheckedCreateInput>
    /**
     * In case the PortfolioStrategy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PortfolioStrategyUpdateInput, PortfolioStrategyUncheckedUpdateInput>
  }


  /**
   * PortfolioStrategy delete
   */
  export type PortfolioStrategyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
    /**
     * Filter which PortfolioStrategy to delete.
     */
    where: PortfolioStrategyWhereUniqueInput
  }


  /**
   * PortfolioStrategy deleteMany
   */
  export type PortfolioStrategyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PortfolioStrategies to delete
     */
    where?: PortfolioStrategyWhereInput
  }


  /**
   * PortfolioStrategy without action
   */
  export type PortfolioStrategyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioStrategy
     */
    select?: PortfolioStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioStrategyInclude<ExtArgs> | null
  }



  /**
   * Model PortfolioMetric
   */

  export type AggregatePortfolioMetric = {
    _count: PortfolioMetricCountAggregateOutputType | null
    _avg: PortfolioMetricAvgAggregateOutputType | null
    _sum: PortfolioMetricSumAggregateOutputType | null
    _min: PortfolioMetricMinAggregateOutputType | null
    _max: PortfolioMetricMaxAggregateOutputType | null
  }

  export type PortfolioMetricAvgAggregateOutputType = {
    totalReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    maxConcurrentStrategies: number | null
    avgConcurrentStrategies: Decimal | null
    concurrencyRatio: Decimal | null
    efficiencyScore: Decimal | null
    portfolioVaR: Decimal | null
    diversificationRatio: Decimal | null
  }

  export type PortfolioMetricSumAggregateOutputType = {
    totalReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    maxConcurrentStrategies: number | null
    avgConcurrentStrategies: Decimal | null
    concurrencyRatio: Decimal | null
    efficiencyScore: Decimal | null
    portfolioVaR: Decimal | null
    diversificationRatio: Decimal | null
  }

  export type PortfolioMetricMinAggregateOutputType = {
    id: string | null
    portfolioId: string | null
    metricDate: Date | null
    totalReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    maxConcurrentStrategies: number | null
    avgConcurrentStrategies: Decimal | null
    concurrencyRatio: Decimal | null
    efficiencyScore: Decimal | null
    portfolioVaR: Decimal | null
    diversificationRatio: Decimal | null
    createdAt: Date | null
  }

  export type PortfolioMetricMaxAggregateOutputType = {
    id: string | null
    portfolioId: string | null
    metricDate: Date | null
    totalReturnPct: Decimal | null
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    maxConcurrentStrategies: number | null
    avgConcurrentStrategies: Decimal | null
    concurrencyRatio: Decimal | null
    efficiencyScore: Decimal | null
    portfolioVaR: Decimal | null
    diversificationRatio: Decimal | null
    createdAt: Date | null
  }

  export type PortfolioMetricCountAggregateOutputType = {
    id: number
    portfolioId: number
    metricDate: number
    totalReturnPct: number
    sharpeRatio: number
    sortinoRatio: number
    maxDrawdownPct: number
    maxConcurrentStrategies: number
    avgConcurrentStrategies: number
    concurrencyRatio: number
    efficiencyScore: number
    portfolioVaR: number
    diversificationRatio: number
    riskContribution: number
    correlationMatrix: number
    strategyWeights: number
    performanceAttribution: number
    createdAt: number
    _all: number
  }


  export type PortfolioMetricAvgAggregateInputType = {
    totalReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    maxConcurrentStrategies?: true
    avgConcurrentStrategies?: true
    concurrencyRatio?: true
    efficiencyScore?: true
    portfolioVaR?: true
    diversificationRatio?: true
  }

  export type PortfolioMetricSumAggregateInputType = {
    totalReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    maxConcurrentStrategies?: true
    avgConcurrentStrategies?: true
    concurrencyRatio?: true
    efficiencyScore?: true
    portfolioVaR?: true
    diversificationRatio?: true
  }

  export type PortfolioMetricMinAggregateInputType = {
    id?: true
    portfolioId?: true
    metricDate?: true
    totalReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    maxConcurrentStrategies?: true
    avgConcurrentStrategies?: true
    concurrencyRatio?: true
    efficiencyScore?: true
    portfolioVaR?: true
    diversificationRatio?: true
    createdAt?: true
  }

  export type PortfolioMetricMaxAggregateInputType = {
    id?: true
    portfolioId?: true
    metricDate?: true
    totalReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    maxConcurrentStrategies?: true
    avgConcurrentStrategies?: true
    concurrencyRatio?: true
    efficiencyScore?: true
    portfolioVaR?: true
    diversificationRatio?: true
    createdAt?: true
  }

  export type PortfolioMetricCountAggregateInputType = {
    id?: true
    portfolioId?: true
    metricDate?: true
    totalReturnPct?: true
    sharpeRatio?: true
    sortinoRatio?: true
    maxDrawdownPct?: true
    maxConcurrentStrategies?: true
    avgConcurrentStrategies?: true
    concurrencyRatio?: true
    efficiencyScore?: true
    portfolioVaR?: true
    diversificationRatio?: true
    riskContribution?: true
    correlationMatrix?: true
    strategyWeights?: true
    performanceAttribution?: true
    createdAt?: true
    _all?: true
  }

  export type PortfolioMetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PortfolioMetric to aggregate.
     */
    where?: PortfolioMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PortfolioMetrics to fetch.
     */
    orderBy?: PortfolioMetricOrderByWithRelationInput | PortfolioMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PortfolioMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PortfolioMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PortfolioMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PortfolioMetrics
    **/
    _count?: true | PortfolioMetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PortfolioMetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PortfolioMetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PortfolioMetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PortfolioMetricMaxAggregateInputType
  }

  export type GetPortfolioMetricAggregateType<T extends PortfolioMetricAggregateArgs> = {
        [P in keyof T & keyof AggregatePortfolioMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePortfolioMetric[P]>
      : GetScalarType<T[P], AggregatePortfolioMetric[P]>
  }




  export type PortfolioMetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioMetricWhereInput
    orderBy?: PortfolioMetricOrderByWithAggregationInput | PortfolioMetricOrderByWithAggregationInput[]
    by: PortfolioMetricScalarFieldEnum[] | PortfolioMetricScalarFieldEnum
    having?: PortfolioMetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PortfolioMetricCountAggregateInputType | true
    _avg?: PortfolioMetricAvgAggregateInputType
    _sum?: PortfolioMetricSumAggregateInputType
    _min?: PortfolioMetricMinAggregateInputType
    _max?: PortfolioMetricMaxAggregateInputType
  }

  export type PortfolioMetricGroupByOutputType = {
    id: string
    portfolioId: string
    metricDate: Date
    totalReturnPct: Decimal
    sharpeRatio: Decimal | null
    sortinoRatio: Decimal | null
    maxDrawdownPct: Decimal | null
    maxConcurrentStrategies: number | null
    avgConcurrentStrategies: Decimal | null
    concurrencyRatio: Decimal | null
    efficiencyScore: Decimal | null
    portfolioVaR: Decimal | null
    diversificationRatio: Decimal | null
    riskContribution: JsonValue | null
    correlationMatrix: JsonValue | null
    strategyWeights: JsonValue | null
    performanceAttribution: JsonValue | null
    createdAt: Date
    _count: PortfolioMetricCountAggregateOutputType | null
    _avg: PortfolioMetricAvgAggregateOutputType | null
    _sum: PortfolioMetricSumAggregateOutputType | null
    _min: PortfolioMetricMinAggregateOutputType | null
    _max: PortfolioMetricMaxAggregateOutputType | null
  }

  type GetPortfolioMetricGroupByPayload<T extends PortfolioMetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PortfolioMetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PortfolioMetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PortfolioMetricGroupByOutputType[P]>
            : GetScalarType<T[P], PortfolioMetricGroupByOutputType[P]>
        }
      >
    >


  export type PortfolioMetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    portfolioId?: boolean
    metricDate?: boolean
    totalReturnPct?: boolean
    sharpeRatio?: boolean
    sortinoRatio?: boolean
    maxDrawdownPct?: boolean
    maxConcurrentStrategies?: boolean
    avgConcurrentStrategies?: boolean
    concurrencyRatio?: boolean
    efficiencyScore?: boolean
    portfolioVaR?: boolean
    diversificationRatio?: boolean
    riskContribution?: boolean
    correlationMatrix?: boolean
    strategyWeights?: boolean
    performanceAttribution?: boolean
    createdAt?: boolean
    portfolio?: boolean | PortfolioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolioMetric"]>

  export type PortfolioMetricSelectScalar = {
    id?: boolean
    portfolioId?: boolean
    metricDate?: boolean
    totalReturnPct?: boolean
    sharpeRatio?: boolean
    sortinoRatio?: boolean
    maxDrawdownPct?: boolean
    maxConcurrentStrategies?: boolean
    avgConcurrentStrategies?: boolean
    concurrencyRatio?: boolean
    efficiencyScore?: boolean
    portfolioVaR?: boolean
    diversificationRatio?: boolean
    riskContribution?: boolean
    correlationMatrix?: boolean
    strategyWeights?: boolean
    performanceAttribution?: boolean
    createdAt?: boolean
  }

  export type PortfolioMetricInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portfolio?: boolean | PortfolioDefaultArgs<ExtArgs>
  }


  export type $PortfolioMetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PortfolioMetric"
    objects: {
      portfolio: Prisma.$PortfolioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      portfolioId: string
      metricDate: Date
      totalReturnPct: Prisma.Decimal
      sharpeRatio: Prisma.Decimal | null
      sortinoRatio: Prisma.Decimal | null
      maxDrawdownPct: Prisma.Decimal | null
      maxConcurrentStrategies: number | null
      avgConcurrentStrategies: Prisma.Decimal | null
      concurrencyRatio: Prisma.Decimal | null
      efficiencyScore: Prisma.Decimal | null
      portfolioVaR: Prisma.Decimal | null
      diversificationRatio: Prisma.Decimal | null
      riskContribution: Prisma.JsonValue | null
      correlationMatrix: Prisma.JsonValue | null
      strategyWeights: Prisma.JsonValue | null
      performanceAttribution: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["portfolioMetric"]>
    composites: {}
  }


  type PortfolioMetricGetPayload<S extends boolean | null | undefined | PortfolioMetricDefaultArgs> = $Result.GetResult<Prisma.$PortfolioMetricPayload, S>

  type PortfolioMetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PortfolioMetricFindManyArgs, 'select' | 'include'> & {
      select?: PortfolioMetricCountAggregateInputType | true
    }

  export interface PortfolioMetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PortfolioMetric'], meta: { name: 'PortfolioMetric' } }
    /**
     * Find zero or one PortfolioMetric that matches the filter.
     * @param {PortfolioMetricFindUniqueArgs} args - Arguments to find a PortfolioMetric
     * @example
     * // Get one PortfolioMetric
     * const portfolioMetric = await prisma.portfolioMetric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PortfolioMetricFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioMetricFindUniqueArgs<ExtArgs>>
    ): Prisma__PortfolioMetricClient<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PortfolioMetric that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PortfolioMetricFindUniqueOrThrowArgs} args - Arguments to find a PortfolioMetric
     * @example
     * // Get one PortfolioMetric
     * const portfolioMetric = await prisma.portfolioMetric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PortfolioMetricFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioMetricFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PortfolioMetricClient<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PortfolioMetric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioMetricFindFirstArgs} args - Arguments to find a PortfolioMetric
     * @example
     * // Get one PortfolioMetric
     * const portfolioMetric = await prisma.portfolioMetric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PortfolioMetricFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioMetricFindFirstArgs<ExtArgs>>
    ): Prisma__PortfolioMetricClient<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PortfolioMetric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioMetricFindFirstOrThrowArgs} args - Arguments to find a PortfolioMetric
     * @example
     * // Get one PortfolioMetric
     * const portfolioMetric = await prisma.portfolioMetric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PortfolioMetricFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioMetricFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PortfolioMetricClient<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PortfolioMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioMetricFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PortfolioMetrics
     * const portfolioMetrics = await prisma.portfolioMetric.findMany()
     * 
     * // Get first 10 PortfolioMetrics
     * const portfolioMetrics = await prisma.portfolioMetric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portfolioMetricWithIdOnly = await prisma.portfolioMetric.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PortfolioMetricFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioMetricFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PortfolioMetric.
     * @param {PortfolioMetricCreateArgs} args - Arguments to create a PortfolioMetric.
     * @example
     * // Create one PortfolioMetric
     * const PortfolioMetric = await prisma.portfolioMetric.create({
     *   data: {
     *     // ... data to create a PortfolioMetric
     *   }
     * })
     * 
    **/
    create<T extends PortfolioMetricCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioMetricCreateArgs<ExtArgs>>
    ): Prisma__PortfolioMetricClient<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PortfolioMetrics.
     *     @param {PortfolioMetricCreateManyArgs} args - Arguments to create many PortfolioMetrics.
     *     @example
     *     // Create many PortfolioMetrics
     *     const portfolioMetric = await prisma.portfolioMetric.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PortfolioMetricCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioMetricCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PortfolioMetric.
     * @param {PortfolioMetricDeleteArgs} args - Arguments to delete one PortfolioMetric.
     * @example
     * // Delete one PortfolioMetric
     * const PortfolioMetric = await prisma.portfolioMetric.delete({
     *   where: {
     *     // ... filter to delete one PortfolioMetric
     *   }
     * })
     * 
    **/
    delete<T extends PortfolioMetricDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioMetricDeleteArgs<ExtArgs>>
    ): Prisma__PortfolioMetricClient<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PortfolioMetric.
     * @param {PortfolioMetricUpdateArgs} args - Arguments to update one PortfolioMetric.
     * @example
     * // Update one PortfolioMetric
     * const portfolioMetric = await prisma.portfolioMetric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PortfolioMetricUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioMetricUpdateArgs<ExtArgs>>
    ): Prisma__PortfolioMetricClient<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PortfolioMetrics.
     * @param {PortfolioMetricDeleteManyArgs} args - Arguments to filter PortfolioMetrics to delete.
     * @example
     * // Delete a few PortfolioMetrics
     * const { count } = await prisma.portfolioMetric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PortfolioMetricDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PortfolioMetricDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PortfolioMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioMetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PortfolioMetrics
     * const portfolioMetric = await prisma.portfolioMetric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PortfolioMetricUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioMetricUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PortfolioMetric.
     * @param {PortfolioMetricUpsertArgs} args - Arguments to update or create a PortfolioMetric.
     * @example
     * // Update or create a PortfolioMetric
     * const portfolioMetric = await prisma.portfolioMetric.upsert({
     *   create: {
     *     // ... data to create a PortfolioMetric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PortfolioMetric we want to update
     *   }
     * })
    **/
    upsert<T extends PortfolioMetricUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PortfolioMetricUpsertArgs<ExtArgs>>
    ): Prisma__PortfolioMetricClient<$Result.GetResult<Prisma.$PortfolioMetricPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PortfolioMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioMetricCountArgs} args - Arguments to filter PortfolioMetrics to count.
     * @example
     * // Count the number of PortfolioMetrics
     * const count = await prisma.portfolioMetric.count({
     *   where: {
     *     // ... the filter for the PortfolioMetrics we want to count
     *   }
     * })
    **/
    count<T extends PortfolioMetricCountArgs>(
      args?: Subset<T, PortfolioMetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PortfolioMetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PortfolioMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioMetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PortfolioMetricAggregateArgs>(args: Subset<T, PortfolioMetricAggregateArgs>): Prisma.PrismaPromise<GetPortfolioMetricAggregateType<T>>

    /**
     * Group by PortfolioMetric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioMetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PortfolioMetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PortfolioMetricGroupByArgs['orderBy'] }
        : { orderBy?: PortfolioMetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PortfolioMetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolioMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PortfolioMetric model
   */
  readonly fields: PortfolioMetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PortfolioMetric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PortfolioMetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    portfolio<T extends PortfolioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PortfolioDefaultArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PortfolioMetric model
   */ 
  interface PortfolioMetricFieldRefs {
    readonly id: FieldRef<"PortfolioMetric", 'String'>
    readonly portfolioId: FieldRef<"PortfolioMetric", 'String'>
    readonly metricDate: FieldRef<"PortfolioMetric", 'DateTime'>
    readonly totalReturnPct: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly sharpeRatio: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly sortinoRatio: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly maxDrawdownPct: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly maxConcurrentStrategies: FieldRef<"PortfolioMetric", 'Int'>
    readonly avgConcurrentStrategies: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly concurrencyRatio: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly efficiencyScore: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly portfolioVaR: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly diversificationRatio: FieldRef<"PortfolioMetric", 'Decimal'>
    readonly riskContribution: FieldRef<"PortfolioMetric", 'Json'>
    readonly correlationMatrix: FieldRef<"PortfolioMetric", 'Json'>
    readonly strategyWeights: FieldRef<"PortfolioMetric", 'Json'>
    readonly performanceAttribution: FieldRef<"PortfolioMetric", 'Json'>
    readonly createdAt: FieldRef<"PortfolioMetric", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PortfolioMetric findUnique
   */
  export type PortfolioMetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioMetric to fetch.
     */
    where: PortfolioMetricWhereUniqueInput
  }


  /**
   * PortfolioMetric findUniqueOrThrow
   */
  export type PortfolioMetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioMetric to fetch.
     */
    where: PortfolioMetricWhereUniqueInput
  }


  /**
   * PortfolioMetric findFirst
   */
  export type PortfolioMetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioMetric to fetch.
     */
    where?: PortfolioMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PortfolioMetrics to fetch.
     */
    orderBy?: PortfolioMetricOrderByWithRelationInput | PortfolioMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PortfolioMetrics.
     */
    cursor?: PortfolioMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PortfolioMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PortfolioMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PortfolioMetrics.
     */
    distinct?: PortfolioMetricScalarFieldEnum | PortfolioMetricScalarFieldEnum[]
  }


  /**
   * PortfolioMetric findFirstOrThrow
   */
  export type PortfolioMetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioMetric to fetch.
     */
    where?: PortfolioMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PortfolioMetrics to fetch.
     */
    orderBy?: PortfolioMetricOrderByWithRelationInput | PortfolioMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PortfolioMetrics.
     */
    cursor?: PortfolioMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PortfolioMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PortfolioMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PortfolioMetrics.
     */
    distinct?: PortfolioMetricScalarFieldEnum | PortfolioMetricScalarFieldEnum[]
  }


  /**
   * PortfolioMetric findMany
   */
  export type PortfolioMetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * Filter, which PortfolioMetrics to fetch.
     */
    where?: PortfolioMetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PortfolioMetrics to fetch.
     */
    orderBy?: PortfolioMetricOrderByWithRelationInput | PortfolioMetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PortfolioMetrics.
     */
    cursor?: PortfolioMetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PortfolioMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PortfolioMetrics.
     */
    skip?: number
    distinct?: PortfolioMetricScalarFieldEnum | PortfolioMetricScalarFieldEnum[]
  }


  /**
   * PortfolioMetric create
   */
  export type PortfolioMetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * The data needed to create a PortfolioMetric.
     */
    data: XOR<PortfolioMetricCreateInput, PortfolioMetricUncheckedCreateInput>
  }


  /**
   * PortfolioMetric createMany
   */
  export type PortfolioMetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PortfolioMetrics.
     */
    data: PortfolioMetricCreateManyInput | PortfolioMetricCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PortfolioMetric update
   */
  export type PortfolioMetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * The data needed to update a PortfolioMetric.
     */
    data: XOR<PortfolioMetricUpdateInput, PortfolioMetricUncheckedUpdateInput>
    /**
     * Choose, which PortfolioMetric to update.
     */
    where: PortfolioMetricWhereUniqueInput
  }


  /**
   * PortfolioMetric updateMany
   */
  export type PortfolioMetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PortfolioMetrics.
     */
    data: XOR<PortfolioMetricUpdateManyMutationInput, PortfolioMetricUncheckedUpdateManyInput>
    /**
     * Filter which PortfolioMetrics to update
     */
    where?: PortfolioMetricWhereInput
  }


  /**
   * PortfolioMetric upsert
   */
  export type PortfolioMetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * The filter to search for the PortfolioMetric to update in case it exists.
     */
    where: PortfolioMetricWhereUniqueInput
    /**
     * In case the PortfolioMetric found by the `where` argument doesn't exist, create a new PortfolioMetric with this data.
     */
    create: XOR<PortfolioMetricCreateInput, PortfolioMetricUncheckedCreateInput>
    /**
     * In case the PortfolioMetric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PortfolioMetricUpdateInput, PortfolioMetricUncheckedUpdateInput>
  }


  /**
   * PortfolioMetric delete
   */
  export type PortfolioMetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
    /**
     * Filter which PortfolioMetric to delete.
     */
    where: PortfolioMetricWhereUniqueInput
  }


  /**
   * PortfolioMetric deleteMany
   */
  export type PortfolioMetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PortfolioMetrics to delete
     */
    where?: PortfolioMetricWhereInput
  }


  /**
   * PortfolioMetric without action
   */
  export type PortfolioMetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioMetric
     */
    select?: PortfolioMetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PortfolioMetricInclude<ExtArgs> | null
  }



  /**
   * Model Signal
   */

  export type AggregateSignal = {
    _count: SignalCountAggregateOutputType | null
    _avg: SignalAvgAggregateOutputType | null
    _sum: SignalSumAggregateOutputType | null
    _min: SignalMinAggregateOutputType | null
    _max: SignalMaxAggregateOutputType | null
  }

  export type SignalAvgAggregateOutputType = {
    price: Decimal | null
    quantity: Decimal | null
    confidence: Decimal | null
  }

  export type SignalSumAggregateOutputType = {
    price: Decimal | null
    quantity: Decimal | null
    confidence: Decimal | null
  }

  export type SignalMinAggregateOutputType = {
    id: string | null
    strategyConfigId: string | null
    signalType: $Enums.SignalType | null
    signalDate: Date | null
    price: Decimal | null
    quantity: Decimal | null
    confidence: Decimal | null
    createdAt: Date | null
  }

  export type SignalMaxAggregateOutputType = {
    id: string | null
    strategyConfigId: string | null
    signalType: $Enums.SignalType | null
    signalDate: Date | null
    price: Decimal | null
    quantity: Decimal | null
    confidence: Decimal | null
    createdAt: Date | null
  }

  export type SignalCountAggregateOutputType = {
    id: number
    strategyConfigId: number
    signalType: number
    signalDate: number
    price: number
    quantity: number
    confidence: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type SignalAvgAggregateInputType = {
    price?: true
    quantity?: true
    confidence?: true
  }

  export type SignalSumAggregateInputType = {
    price?: true
    quantity?: true
    confidence?: true
  }

  export type SignalMinAggregateInputType = {
    id?: true
    strategyConfigId?: true
    signalType?: true
    signalDate?: true
    price?: true
    quantity?: true
    confidence?: true
    createdAt?: true
  }

  export type SignalMaxAggregateInputType = {
    id?: true
    strategyConfigId?: true
    signalType?: true
    signalDate?: true
    price?: true
    quantity?: true
    confidence?: true
    createdAt?: true
  }

  export type SignalCountAggregateInputType = {
    id?: true
    strategyConfigId?: true
    signalType?: true
    signalDate?: true
    price?: true
    quantity?: true
    confidence?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type SignalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Signal to aggregate.
     */
    where?: SignalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Signals to fetch.
     */
    orderBy?: SignalOrderByWithRelationInput | SignalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SignalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Signals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Signals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Signals
    **/
    _count?: true | SignalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SignalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SignalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SignalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SignalMaxAggregateInputType
  }

  export type GetSignalAggregateType<T extends SignalAggregateArgs> = {
        [P in keyof T & keyof AggregateSignal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSignal[P]>
      : GetScalarType<T[P], AggregateSignal[P]>
  }




  export type SignalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignalWhereInput
    orderBy?: SignalOrderByWithAggregationInput | SignalOrderByWithAggregationInput[]
    by: SignalScalarFieldEnum[] | SignalScalarFieldEnum
    having?: SignalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SignalCountAggregateInputType | true
    _avg?: SignalAvgAggregateInputType
    _sum?: SignalSumAggregateInputType
    _min?: SignalMinAggregateInputType
    _max?: SignalMaxAggregateInputType
  }

  export type SignalGroupByOutputType = {
    id: string
    strategyConfigId: string
    signalType: $Enums.SignalType
    signalDate: Date
    price: Decimal
    quantity: Decimal | null
    confidence: Decimal | null
    metadata: JsonValue | null
    createdAt: Date
    _count: SignalCountAggregateOutputType | null
    _avg: SignalAvgAggregateOutputType | null
    _sum: SignalSumAggregateOutputType | null
    _min: SignalMinAggregateOutputType | null
    _max: SignalMaxAggregateOutputType | null
  }

  type GetSignalGroupByPayload<T extends SignalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SignalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SignalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SignalGroupByOutputType[P]>
            : GetScalarType<T[P], SignalGroupByOutputType[P]>
        }
      >
    >


  export type SignalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    strategyConfigId?: boolean
    signalType?: boolean
    signalDate?: boolean
    price?: boolean
    quantity?: boolean
    confidence?: boolean
    metadata?: boolean
    createdAt?: boolean
    strategyConfig?: boolean | StrategyConfigurationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signal"]>

  export type SignalSelectScalar = {
    id?: boolean
    strategyConfigId?: boolean
    signalType?: boolean
    signalDate?: boolean
    price?: boolean
    quantity?: boolean
    confidence?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type SignalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    strategyConfig?: boolean | StrategyConfigurationDefaultArgs<ExtArgs>
  }


  export type $SignalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Signal"
    objects: {
      strategyConfig: Prisma.$StrategyConfigurationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      strategyConfigId: string
      signalType: $Enums.SignalType
      signalDate: Date
      price: Prisma.Decimal
      quantity: Prisma.Decimal | null
      confidence: Prisma.Decimal | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["signal"]>
    composites: {}
  }


  type SignalGetPayload<S extends boolean | null | undefined | SignalDefaultArgs> = $Result.GetResult<Prisma.$SignalPayload, S>

  type SignalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SignalFindManyArgs, 'select' | 'include'> & {
      select?: SignalCountAggregateInputType | true
    }

  export interface SignalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Signal'], meta: { name: 'Signal' } }
    /**
     * Find zero or one Signal that matches the filter.
     * @param {SignalFindUniqueArgs} args - Arguments to find a Signal
     * @example
     * // Get one Signal
     * const signal = await prisma.signal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SignalFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SignalFindUniqueArgs<ExtArgs>>
    ): Prisma__SignalClient<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Signal that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SignalFindUniqueOrThrowArgs} args - Arguments to find a Signal
     * @example
     * // Get one Signal
     * const signal = await prisma.signal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SignalFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SignalFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SignalClient<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Signal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignalFindFirstArgs} args - Arguments to find a Signal
     * @example
     * // Get one Signal
     * const signal = await prisma.signal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SignalFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SignalFindFirstArgs<ExtArgs>>
    ): Prisma__SignalClient<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Signal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignalFindFirstOrThrowArgs} args - Arguments to find a Signal
     * @example
     * // Get one Signal
     * const signal = await prisma.signal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SignalFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SignalFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SignalClient<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Signals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Signals
     * const signals = await prisma.signal.findMany()
     * 
     * // Get first 10 Signals
     * const signals = await prisma.signal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const signalWithIdOnly = await prisma.signal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SignalFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SignalFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Signal.
     * @param {SignalCreateArgs} args - Arguments to create a Signal.
     * @example
     * // Create one Signal
     * const Signal = await prisma.signal.create({
     *   data: {
     *     // ... data to create a Signal
     *   }
     * })
     * 
    **/
    create<T extends SignalCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SignalCreateArgs<ExtArgs>>
    ): Prisma__SignalClient<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Signals.
     *     @param {SignalCreateManyArgs} args - Arguments to create many Signals.
     *     @example
     *     // Create many Signals
     *     const signal = await prisma.signal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SignalCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SignalCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Signal.
     * @param {SignalDeleteArgs} args - Arguments to delete one Signal.
     * @example
     * // Delete one Signal
     * const Signal = await prisma.signal.delete({
     *   where: {
     *     // ... filter to delete one Signal
     *   }
     * })
     * 
    **/
    delete<T extends SignalDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SignalDeleteArgs<ExtArgs>>
    ): Prisma__SignalClient<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Signal.
     * @param {SignalUpdateArgs} args - Arguments to update one Signal.
     * @example
     * // Update one Signal
     * const signal = await prisma.signal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SignalUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SignalUpdateArgs<ExtArgs>>
    ): Prisma__SignalClient<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Signals.
     * @param {SignalDeleteManyArgs} args - Arguments to filter Signals to delete.
     * @example
     * // Delete a few Signals
     * const { count } = await prisma.signal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SignalDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SignalDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Signals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Signals
     * const signal = await prisma.signal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SignalUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SignalUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Signal.
     * @param {SignalUpsertArgs} args - Arguments to update or create a Signal.
     * @example
     * // Update or create a Signal
     * const signal = await prisma.signal.upsert({
     *   create: {
     *     // ... data to create a Signal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Signal we want to update
     *   }
     * })
    **/
    upsert<T extends SignalUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SignalUpsertArgs<ExtArgs>>
    ): Prisma__SignalClient<$Result.GetResult<Prisma.$SignalPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Signals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignalCountArgs} args - Arguments to filter Signals to count.
     * @example
     * // Count the number of Signals
     * const count = await prisma.signal.count({
     *   where: {
     *     // ... the filter for the Signals we want to count
     *   }
     * })
    **/
    count<T extends SignalCountArgs>(
      args?: Subset<T, SignalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SignalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Signal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SignalAggregateArgs>(args: Subset<T, SignalAggregateArgs>): Prisma.PrismaPromise<GetSignalAggregateType<T>>

    /**
     * Group by Signal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SignalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SignalGroupByArgs['orderBy'] }
        : { orderBy?: SignalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SignalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSignalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Signal model
   */
  readonly fields: SignalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Signal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SignalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    strategyConfig<T extends StrategyConfigurationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StrategyConfigurationDefaultArgs<ExtArgs>>): Prisma__StrategyConfigurationClient<$Result.GetResult<Prisma.$StrategyConfigurationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Signal model
   */ 
  interface SignalFieldRefs {
    readonly id: FieldRef<"Signal", 'String'>
    readonly strategyConfigId: FieldRef<"Signal", 'String'>
    readonly signalType: FieldRef<"Signal", 'SignalType'>
    readonly signalDate: FieldRef<"Signal", 'DateTime'>
    readonly price: FieldRef<"Signal", 'Decimal'>
    readonly quantity: FieldRef<"Signal", 'Decimal'>
    readonly confidence: FieldRef<"Signal", 'Decimal'>
    readonly metadata: FieldRef<"Signal", 'Json'>
    readonly createdAt: FieldRef<"Signal", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Signal findUnique
   */
  export type SignalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * Filter, which Signal to fetch.
     */
    where: SignalWhereUniqueInput
  }


  /**
   * Signal findUniqueOrThrow
   */
  export type SignalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * Filter, which Signal to fetch.
     */
    where: SignalWhereUniqueInput
  }


  /**
   * Signal findFirst
   */
  export type SignalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * Filter, which Signal to fetch.
     */
    where?: SignalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Signals to fetch.
     */
    orderBy?: SignalOrderByWithRelationInput | SignalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Signals.
     */
    cursor?: SignalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Signals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Signals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Signals.
     */
    distinct?: SignalScalarFieldEnum | SignalScalarFieldEnum[]
  }


  /**
   * Signal findFirstOrThrow
   */
  export type SignalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * Filter, which Signal to fetch.
     */
    where?: SignalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Signals to fetch.
     */
    orderBy?: SignalOrderByWithRelationInput | SignalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Signals.
     */
    cursor?: SignalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Signals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Signals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Signals.
     */
    distinct?: SignalScalarFieldEnum | SignalScalarFieldEnum[]
  }


  /**
   * Signal findMany
   */
  export type SignalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * Filter, which Signals to fetch.
     */
    where?: SignalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Signals to fetch.
     */
    orderBy?: SignalOrderByWithRelationInput | SignalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Signals.
     */
    cursor?: SignalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Signals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Signals.
     */
    skip?: number
    distinct?: SignalScalarFieldEnum | SignalScalarFieldEnum[]
  }


  /**
   * Signal create
   */
  export type SignalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * The data needed to create a Signal.
     */
    data: XOR<SignalCreateInput, SignalUncheckedCreateInput>
  }


  /**
   * Signal createMany
   */
  export type SignalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Signals.
     */
    data: SignalCreateManyInput | SignalCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Signal update
   */
  export type SignalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * The data needed to update a Signal.
     */
    data: XOR<SignalUpdateInput, SignalUncheckedUpdateInput>
    /**
     * Choose, which Signal to update.
     */
    where: SignalWhereUniqueInput
  }


  /**
   * Signal updateMany
   */
  export type SignalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Signals.
     */
    data: XOR<SignalUpdateManyMutationInput, SignalUncheckedUpdateManyInput>
    /**
     * Filter which Signals to update
     */
    where?: SignalWhereInput
  }


  /**
   * Signal upsert
   */
  export type SignalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * The filter to search for the Signal to update in case it exists.
     */
    where: SignalWhereUniqueInput
    /**
     * In case the Signal found by the `where` argument doesn't exist, create a new Signal with this data.
     */
    create: XOR<SignalCreateInput, SignalUncheckedCreateInput>
    /**
     * In case the Signal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SignalUpdateInput, SignalUncheckedUpdateInput>
  }


  /**
   * Signal delete
   */
  export type SignalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
    /**
     * Filter which Signal to delete.
     */
    where: SignalWhereUniqueInput
  }


  /**
   * Signal deleteMany
   */
  export type SignalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Signals to delete
     */
    where?: SignalWhereInput
  }


  /**
   * Signal without action
   */
  export type SignalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signal
     */
    select?: SignalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SignalInclude<ExtArgs> | null
  }



  /**
   * Model Configuration
   */

  export type AggregateConfiguration = {
    _count: ConfigurationCountAggregateOutputType | null
    _min: ConfigurationMinAggregateOutputType | null
    _max: ConfigurationMaxAggregateOutputType | null
  }

  export type ConfigurationMinAggregateOutputType = {
    id: string | null
    key: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConfigurationMaxAggregateOutputType = {
    id: string | null
    key: string | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConfigurationCountAggregateOutputType = {
    id: number
    key: number
    value: number
    category: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConfigurationMinAggregateInputType = {
    id?: true
    key?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConfigurationMaxAggregateInputType = {
    id?: true
    key?: true
    category?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConfigurationCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Configuration to aggregate.
     */
    where?: ConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Configurations to fetch.
     */
    orderBy?: ConfigurationOrderByWithRelationInput | ConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Configurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Configurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Configurations
    **/
    _count?: true | ConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConfigurationMaxAggregateInputType
  }

  export type GetConfigurationAggregateType<T extends ConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregateConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConfiguration[P]>
      : GetScalarType<T[P], AggregateConfiguration[P]>
  }




  export type ConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConfigurationWhereInput
    orderBy?: ConfigurationOrderByWithAggregationInput | ConfigurationOrderByWithAggregationInput[]
    by: ConfigurationScalarFieldEnum[] | ConfigurationScalarFieldEnum
    having?: ConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConfigurationCountAggregateInputType | true
    _min?: ConfigurationMinAggregateInputType
    _max?: ConfigurationMaxAggregateInputType
  }

  export type ConfigurationGroupByOutputType = {
    id: string
    key: string
    value: JsonValue
    category: string | null
    createdAt: Date
    updatedAt: Date
    _count: ConfigurationCountAggregateOutputType | null
    _min: ConfigurationMinAggregateOutputType | null
    _max: ConfigurationMaxAggregateOutputType | null
  }

  type GetConfigurationGroupByPayload<T extends ConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], ConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type ConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["configuration"]>

  export type ConfigurationSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Configuration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: Prisma.JsonValue
      category: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["configuration"]>
    composites: {}
  }


  type ConfigurationGetPayload<S extends boolean | null | undefined | ConfigurationDefaultArgs> = $Result.GetResult<Prisma.$ConfigurationPayload, S>

  type ConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConfigurationFindManyArgs, 'select' | 'include'> & {
      select?: ConfigurationCountAggregateInputType | true
    }

  export interface ConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Configuration'], meta: { name: 'Configuration' } }
    /**
     * Find zero or one Configuration that matches the filter.
     * @param {ConfigurationFindUniqueArgs} args - Arguments to find a Configuration
     * @example
     * // Get one Configuration
     * const configuration = await prisma.configuration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConfigurationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConfigurationFindUniqueArgs<ExtArgs>>
    ): Prisma__ConfigurationClient<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Configuration that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConfigurationFindUniqueOrThrowArgs} args - Arguments to find a Configuration
     * @example
     * // Get one Configuration
     * const configuration = await prisma.configuration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConfigurationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfigurationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConfigurationClient<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Configuration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigurationFindFirstArgs} args - Arguments to find a Configuration
     * @example
     * // Get one Configuration
     * const configuration = await prisma.configuration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConfigurationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfigurationFindFirstArgs<ExtArgs>>
    ): Prisma__ConfigurationClient<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Configuration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigurationFindFirstOrThrowArgs} args - Arguments to find a Configuration
     * @example
     * // Get one Configuration
     * const configuration = await prisma.configuration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConfigurationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfigurationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConfigurationClient<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Configurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigurationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Configurations
     * const configurations = await prisma.configuration.findMany()
     * 
     * // Get first 10 Configurations
     * const configurations = await prisma.configuration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const configurationWithIdOnly = await prisma.configuration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConfigurationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfigurationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Configuration.
     * @param {ConfigurationCreateArgs} args - Arguments to create a Configuration.
     * @example
     * // Create one Configuration
     * const Configuration = await prisma.configuration.create({
     *   data: {
     *     // ... data to create a Configuration
     *   }
     * })
     * 
    **/
    create<T extends ConfigurationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConfigurationCreateArgs<ExtArgs>>
    ): Prisma__ConfigurationClient<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Configurations.
     *     @param {ConfigurationCreateManyArgs} args - Arguments to create many Configurations.
     *     @example
     *     // Create many Configurations
     *     const configuration = await prisma.configuration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConfigurationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfigurationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Configuration.
     * @param {ConfigurationDeleteArgs} args - Arguments to delete one Configuration.
     * @example
     * // Delete one Configuration
     * const Configuration = await prisma.configuration.delete({
     *   where: {
     *     // ... filter to delete one Configuration
     *   }
     * })
     * 
    **/
    delete<T extends ConfigurationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConfigurationDeleteArgs<ExtArgs>>
    ): Prisma__ConfigurationClient<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Configuration.
     * @param {ConfigurationUpdateArgs} args - Arguments to update one Configuration.
     * @example
     * // Update one Configuration
     * const configuration = await prisma.configuration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConfigurationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConfigurationUpdateArgs<ExtArgs>>
    ): Prisma__ConfigurationClient<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Configurations.
     * @param {ConfigurationDeleteManyArgs} args - Arguments to filter Configurations to delete.
     * @example
     * // Delete a few Configurations
     * const { count } = await prisma.configuration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConfigurationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfigurationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Configurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Configurations
     * const configuration = await prisma.configuration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConfigurationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConfigurationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Configuration.
     * @param {ConfigurationUpsertArgs} args - Arguments to update or create a Configuration.
     * @example
     * // Update or create a Configuration
     * const configuration = await prisma.configuration.upsert({
     *   create: {
     *     // ... data to create a Configuration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Configuration we want to update
     *   }
     * })
    **/
    upsert<T extends ConfigurationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConfigurationUpsertArgs<ExtArgs>>
    ): Prisma__ConfigurationClient<$Result.GetResult<Prisma.$ConfigurationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Configurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigurationCountArgs} args - Arguments to filter Configurations to count.
     * @example
     * // Count the number of Configurations
     * const count = await prisma.configuration.count({
     *   where: {
     *     // ... the filter for the Configurations we want to count
     *   }
     * })
    **/
    count<T extends ConfigurationCountArgs>(
      args?: Subset<T, ConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Configuration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConfigurationAggregateArgs>(args: Subset<T, ConfigurationAggregateArgs>): Prisma.PrismaPromise<GetConfigurationAggregateType<T>>

    /**
     * Group by Configuration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: ConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Configuration model
   */
  readonly fields: ConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Configuration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Configuration model
   */ 
  interface ConfigurationFieldRefs {
    readonly id: FieldRef<"Configuration", 'String'>
    readonly key: FieldRef<"Configuration", 'String'>
    readonly value: FieldRef<"Configuration", 'Json'>
    readonly category: FieldRef<"Configuration", 'String'>
    readonly createdAt: FieldRef<"Configuration", 'DateTime'>
    readonly updatedAt: FieldRef<"Configuration", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Configuration findUnique
   */
  export type ConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which Configuration to fetch.
     */
    where: ConfigurationWhereUniqueInput
  }


  /**
   * Configuration findUniqueOrThrow
   */
  export type ConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which Configuration to fetch.
     */
    where: ConfigurationWhereUniqueInput
  }


  /**
   * Configuration findFirst
   */
  export type ConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which Configuration to fetch.
     */
    where?: ConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Configurations to fetch.
     */
    orderBy?: ConfigurationOrderByWithRelationInput | ConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Configurations.
     */
    cursor?: ConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Configurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Configurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Configurations.
     */
    distinct?: ConfigurationScalarFieldEnum | ConfigurationScalarFieldEnum[]
  }


  /**
   * Configuration findFirstOrThrow
   */
  export type ConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which Configuration to fetch.
     */
    where?: ConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Configurations to fetch.
     */
    orderBy?: ConfigurationOrderByWithRelationInput | ConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Configurations.
     */
    cursor?: ConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Configurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Configurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Configurations.
     */
    distinct?: ConfigurationScalarFieldEnum | ConfigurationScalarFieldEnum[]
  }


  /**
   * Configuration findMany
   */
  export type ConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which Configurations to fetch.
     */
    where?: ConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Configurations to fetch.
     */
    orderBy?: ConfigurationOrderByWithRelationInput | ConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Configurations.
     */
    cursor?: ConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Configurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Configurations.
     */
    skip?: number
    distinct?: ConfigurationScalarFieldEnum | ConfigurationScalarFieldEnum[]
  }


  /**
   * Configuration create
   */
  export type ConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * The data needed to create a Configuration.
     */
    data: XOR<ConfigurationCreateInput, ConfigurationUncheckedCreateInput>
  }


  /**
   * Configuration createMany
   */
  export type ConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Configurations.
     */
    data: ConfigurationCreateManyInput | ConfigurationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Configuration update
   */
  export type ConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * The data needed to update a Configuration.
     */
    data: XOR<ConfigurationUpdateInput, ConfigurationUncheckedUpdateInput>
    /**
     * Choose, which Configuration to update.
     */
    where: ConfigurationWhereUniqueInput
  }


  /**
   * Configuration updateMany
   */
  export type ConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Configurations.
     */
    data: XOR<ConfigurationUpdateManyMutationInput, ConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which Configurations to update
     */
    where?: ConfigurationWhereInput
  }


  /**
   * Configuration upsert
   */
  export type ConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * The filter to search for the Configuration to update in case it exists.
     */
    where: ConfigurationWhereUniqueInput
    /**
     * In case the Configuration found by the `where` argument doesn't exist, create a new Configuration with this data.
     */
    create: XOR<ConfigurationCreateInput, ConfigurationUncheckedCreateInput>
    /**
     * In case the Configuration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConfigurationUpdateInput, ConfigurationUncheckedUpdateInput>
  }


  /**
   * Configuration delete
   */
  export type ConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
    /**
     * Filter which Configuration to delete.
     */
    where: ConfigurationWhereUniqueInput
  }


  /**
   * Configuration deleteMany
   */
  export type ConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Configurations to delete
     */
    where?: ConfigurationWhereInput
  }


  /**
   * Configuration without action
   */
  export type ConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Configuration
     */
    select?: ConfigurationSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TickerScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    name: 'name',
    assetClass: 'assetClass',
    exchange: 'exchange',
    sector: 'sector',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TickerScalarFieldEnum = (typeof TickerScalarFieldEnum)[keyof typeof TickerScalarFieldEnum]


  export const PriceDataScalarFieldEnum: {
    id: 'id',
    tickerId: 'tickerId',
    date: 'date',
    open: 'open',
    high: 'high',
    low: 'low',
    close: 'close',
    volume: 'volume',
    createdAt: 'createdAt'
  };

  export type PriceDataScalarFieldEnum = (typeof PriceDataScalarFieldEnum)[keyof typeof PriceDataScalarFieldEnum]


  export const StrategyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StrategyScalarFieldEnum = (typeof StrategyScalarFieldEnum)[keyof typeof StrategyScalarFieldEnum]


  export const StrategyConfigurationScalarFieldEnum: {
    id: 'id',
    strategyId: 'strategyId',
    tickerId: 'tickerId',
    timeframe: 'timeframe',
    shortWindow: 'shortWindow',
    longWindow: 'longWindow',
    signalWindow: 'signalWindow',
    stopLossPct: 'stopLossPct',
    rsiPeriod: 'rsiPeriod',
    rsiThreshold: 'rsiThreshold',
    signalEntry: 'signalEntry',
    signalExit: 'signalExit',
    direction: 'direction',
    allocationPct: 'allocationPct',
    parameters: 'parameters',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StrategyConfigurationScalarFieldEnum = (typeof StrategyConfigurationScalarFieldEnum)[keyof typeof StrategyConfigurationScalarFieldEnum]


  export const BacktestResultScalarFieldEnum: {
    id: 'id',
    strategyConfigId: 'strategyConfigId',
    runDate: 'runDate',
    startDate: 'startDate',
    endDate: 'endDate',
    totalReturnPct: 'totalReturnPct',
    annualReturnPct: 'annualReturnPct',
    sharpeRatio: 'sharpeRatio',
    sortinoRatio: 'sortinoRatio',
    maxDrawdownPct: 'maxDrawdownPct',
    calmarRatio: 'calmarRatio',
    totalTrades: 'totalTrades',
    winningTrades: 'winningTrades',
    losingTrades: 'losingTrades',
    winRatePct: 'winRatePct',
    profitFactor: 'profitFactor',
    expectancyPerTrade: 'expectancyPerTrade',
    avgTradeDuration: 'avgTradeDuration',
    avgWinningTrade: 'avgWinningTrade',
    avgLosingTrade: 'avgLosingTrade',
    valueAtRisk95: 'valueAtRisk95',
    conditionalValueAtRisk: 'conditionalValueAtRisk',
    beta: 'beta',
    alpha: 'alpha',
    benchmarkReturnPct: 'benchmarkReturnPct',
    outperformancePct: 'outperformancePct',
    trackingError: 'trackingError',
    informationRatio: 'informationRatio',
    score: 'score',
    openTrades: 'openTrades',
    tradesPerDay: 'tradesPerDay',
    tradesPerMonth: 'tradesPerMonth',
    rawMetrics: 'rawMetrics',
    createdAt: 'createdAt'
  };

  export type BacktestResultScalarFieldEnum = (typeof BacktestResultScalarFieldEnum)[keyof typeof BacktestResultScalarFieldEnum]


  export const PortfolioScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    type: 'type',
    parameters: 'parameters',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PortfolioScalarFieldEnum = (typeof PortfolioScalarFieldEnum)[keyof typeof PortfolioScalarFieldEnum]


  export const PortfolioStrategyScalarFieldEnum: {
    id: 'id',
    portfolioId: 'portfolioId',
    strategyConfigId: 'strategyConfigId',
    allocationPct: 'allocationPct',
    position: 'position',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type PortfolioStrategyScalarFieldEnum = (typeof PortfolioStrategyScalarFieldEnum)[keyof typeof PortfolioStrategyScalarFieldEnum]


  export const PortfolioMetricScalarFieldEnum: {
    id: 'id',
    portfolioId: 'portfolioId',
    metricDate: 'metricDate',
    totalReturnPct: 'totalReturnPct',
    sharpeRatio: 'sharpeRatio',
    sortinoRatio: 'sortinoRatio',
    maxDrawdownPct: 'maxDrawdownPct',
    maxConcurrentStrategies: 'maxConcurrentStrategies',
    avgConcurrentStrategies: 'avgConcurrentStrategies',
    concurrencyRatio: 'concurrencyRatio',
    efficiencyScore: 'efficiencyScore',
    portfolioVaR: 'portfolioVaR',
    diversificationRatio: 'diversificationRatio',
    riskContribution: 'riskContribution',
    correlationMatrix: 'correlationMatrix',
    strategyWeights: 'strategyWeights',
    performanceAttribution: 'performanceAttribution',
    createdAt: 'createdAt'
  };

  export type PortfolioMetricScalarFieldEnum = (typeof PortfolioMetricScalarFieldEnum)[keyof typeof PortfolioMetricScalarFieldEnum]


  export const SignalScalarFieldEnum: {
    id: 'id',
    strategyConfigId: 'strategyConfigId',
    signalType: 'signalType',
    signalDate: 'signalDate',
    price: 'price',
    quantity: 'quantity',
    confidence: 'confidence',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type SignalScalarFieldEnum = (typeof SignalScalarFieldEnum)[keyof typeof SignalScalarFieldEnum]


  export const ConfigurationScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConfigurationScalarFieldEnum = (typeof ConfigurationScalarFieldEnum)[keyof typeof ConfigurationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'AssetClass'
   */
  export type EnumAssetClassFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetClass'>
    


  /**
   * Reference to a field of type 'AssetClass[]'
   */
  export type ListEnumAssetClassFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetClass[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'StrategyType'
   */
  export type EnumStrategyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StrategyType'>
    


  /**
   * Reference to a field of type 'StrategyType[]'
   */
  export type ListEnumStrategyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StrategyType[]'>
    


  /**
   * Reference to a field of type 'TimeframeType'
   */
  export type EnumTimeframeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TimeframeType'>
    


  /**
   * Reference to a field of type 'TimeframeType[]'
   */
  export type ListEnumTimeframeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TimeframeType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DirectionType'
   */
  export type EnumDirectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DirectionType'>
    


  /**
   * Reference to a field of type 'DirectionType[]'
   */
  export type ListEnumDirectionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DirectionType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'PortfolioType'
   */
  export type EnumPortfolioTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PortfolioType'>
    


  /**
   * Reference to a field of type 'PortfolioType[]'
   */
  export type ListEnumPortfolioTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PortfolioType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'SignalType'
   */
  export type EnumSignalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignalType'>
    


  /**
   * Reference to a field of type 'SignalType[]'
   */
  export type ListEnumSignalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignalType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TickerWhereInput = {
    AND?: TickerWhereInput | TickerWhereInput[]
    OR?: TickerWhereInput[]
    NOT?: TickerWhereInput | TickerWhereInput[]
    id?: StringFilter<"Ticker"> | string
    symbol?: StringFilter<"Ticker"> | string
    name?: StringNullableFilter<"Ticker"> | string | null
    assetClass?: EnumAssetClassFilter<"Ticker"> | $Enums.AssetClass
    exchange?: StringNullableFilter<"Ticker"> | string | null
    sector?: StringNullableFilter<"Ticker"> | string | null
    createdAt?: DateTimeFilter<"Ticker"> | Date | string
    updatedAt?: DateTimeFilter<"Ticker"> | Date | string
    priceData?: PriceDataListRelationFilter
    strategyConfigs?: StrategyConfigurationListRelationFilter
  }

  export type TickerOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrderInput | SortOrder
    assetClass?: SortOrder
    exchange?: SortOrderInput | SortOrder
    sector?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    priceData?: PriceDataOrderByRelationAggregateInput
    strategyConfigs?: StrategyConfigurationOrderByRelationAggregateInput
  }

  export type TickerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    symbol?: string
    AND?: TickerWhereInput | TickerWhereInput[]
    OR?: TickerWhereInput[]
    NOT?: TickerWhereInput | TickerWhereInput[]
    name?: StringNullableFilter<"Ticker"> | string | null
    assetClass?: EnumAssetClassFilter<"Ticker"> | $Enums.AssetClass
    exchange?: StringNullableFilter<"Ticker"> | string | null
    sector?: StringNullableFilter<"Ticker"> | string | null
    createdAt?: DateTimeFilter<"Ticker"> | Date | string
    updatedAt?: DateTimeFilter<"Ticker"> | Date | string
    priceData?: PriceDataListRelationFilter
    strategyConfigs?: StrategyConfigurationListRelationFilter
  }, "id" | "symbol">

  export type TickerOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrderInput | SortOrder
    assetClass?: SortOrder
    exchange?: SortOrderInput | SortOrder
    sector?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TickerCountOrderByAggregateInput
    _max?: TickerMaxOrderByAggregateInput
    _min?: TickerMinOrderByAggregateInput
  }

  export type TickerScalarWhereWithAggregatesInput = {
    AND?: TickerScalarWhereWithAggregatesInput | TickerScalarWhereWithAggregatesInput[]
    OR?: TickerScalarWhereWithAggregatesInput[]
    NOT?: TickerScalarWhereWithAggregatesInput | TickerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ticker"> | string
    symbol?: StringWithAggregatesFilter<"Ticker"> | string
    name?: StringNullableWithAggregatesFilter<"Ticker"> | string | null
    assetClass?: EnumAssetClassWithAggregatesFilter<"Ticker"> | $Enums.AssetClass
    exchange?: StringNullableWithAggregatesFilter<"Ticker"> | string | null
    sector?: StringNullableWithAggregatesFilter<"Ticker"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Ticker"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ticker"> | Date | string
  }

  export type PriceDataWhereInput = {
    AND?: PriceDataWhereInput | PriceDataWhereInput[]
    OR?: PriceDataWhereInput[]
    NOT?: PriceDataWhereInput | PriceDataWhereInput[]
    id?: StringFilter<"PriceData"> | string
    tickerId?: StringFilter<"PriceData"> | string
    date?: DateTimeFilter<"PriceData"> | Date | string
    open?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    high?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    low?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    close?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    volume?: DecimalNullableFilter<"PriceData"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"PriceData"> | Date | string
    ticker?: XOR<TickerRelationFilter, TickerWhereInput>
  }

  export type PriceDataOrderByWithRelationInput = {
    id?: SortOrder
    tickerId?: SortOrder
    date?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    ticker?: TickerOrderByWithRelationInput
  }

  export type PriceDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tickerId_date?: PriceDataTickerIdDateCompoundUniqueInput
    AND?: PriceDataWhereInput | PriceDataWhereInput[]
    OR?: PriceDataWhereInput[]
    NOT?: PriceDataWhereInput | PriceDataWhereInput[]
    tickerId?: StringFilter<"PriceData"> | string
    date?: DateTimeFilter<"PriceData"> | Date | string
    open?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    high?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    low?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    close?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    volume?: DecimalNullableFilter<"PriceData"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"PriceData"> | Date | string
    ticker?: XOR<TickerRelationFilter, TickerWhereInput>
  }, "id" | "tickerId_date">

  export type PriceDataOrderByWithAggregationInput = {
    id?: SortOrder
    tickerId?: SortOrder
    date?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PriceDataCountOrderByAggregateInput
    _avg?: PriceDataAvgOrderByAggregateInput
    _max?: PriceDataMaxOrderByAggregateInput
    _min?: PriceDataMinOrderByAggregateInput
    _sum?: PriceDataSumOrderByAggregateInput
  }

  export type PriceDataScalarWhereWithAggregatesInput = {
    AND?: PriceDataScalarWhereWithAggregatesInput | PriceDataScalarWhereWithAggregatesInput[]
    OR?: PriceDataScalarWhereWithAggregatesInput[]
    NOT?: PriceDataScalarWhereWithAggregatesInput | PriceDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PriceData"> | string
    tickerId?: StringWithAggregatesFilter<"PriceData"> | string
    date?: DateTimeWithAggregatesFilter<"PriceData"> | Date | string
    open?: DecimalWithAggregatesFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    high?: DecimalWithAggregatesFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    low?: DecimalWithAggregatesFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    close?: DecimalWithAggregatesFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    volume?: DecimalNullableWithAggregatesFilter<"PriceData"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PriceData"> | Date | string
  }

  export type StrategyWhereInput = {
    AND?: StrategyWhereInput | StrategyWhereInput[]
    OR?: StrategyWhereInput[]
    NOT?: StrategyWhereInput | StrategyWhereInput[]
    id?: StringFilter<"Strategy"> | string
    name?: StringFilter<"Strategy"> | string
    type?: EnumStrategyTypeFilter<"Strategy"> | $Enums.StrategyType
    description?: StringNullableFilter<"Strategy"> | string | null
    createdAt?: DateTimeFilter<"Strategy"> | Date | string
    updatedAt?: DateTimeFilter<"Strategy"> | Date | string
    configurations?: StrategyConfigurationListRelationFilter
  }

  export type StrategyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    configurations?: StrategyConfigurationOrderByRelationAggregateInput
  }

  export type StrategyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: StrategyWhereInput | StrategyWhereInput[]
    OR?: StrategyWhereInput[]
    NOT?: StrategyWhereInput | StrategyWhereInput[]
    type?: EnumStrategyTypeFilter<"Strategy"> | $Enums.StrategyType
    description?: StringNullableFilter<"Strategy"> | string | null
    createdAt?: DateTimeFilter<"Strategy"> | Date | string
    updatedAt?: DateTimeFilter<"Strategy"> | Date | string
    configurations?: StrategyConfigurationListRelationFilter
  }, "id" | "name">

  export type StrategyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StrategyCountOrderByAggregateInput
    _max?: StrategyMaxOrderByAggregateInput
    _min?: StrategyMinOrderByAggregateInput
  }

  export type StrategyScalarWhereWithAggregatesInput = {
    AND?: StrategyScalarWhereWithAggregatesInput | StrategyScalarWhereWithAggregatesInput[]
    OR?: StrategyScalarWhereWithAggregatesInput[]
    NOT?: StrategyScalarWhereWithAggregatesInput | StrategyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Strategy"> | string
    name?: StringWithAggregatesFilter<"Strategy"> | string
    type?: EnumStrategyTypeWithAggregatesFilter<"Strategy"> | $Enums.StrategyType
    description?: StringNullableWithAggregatesFilter<"Strategy"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Strategy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Strategy"> | Date | string
  }

  export type StrategyConfigurationWhereInput = {
    AND?: StrategyConfigurationWhereInput | StrategyConfigurationWhereInput[]
    OR?: StrategyConfigurationWhereInput[]
    NOT?: StrategyConfigurationWhereInput | StrategyConfigurationWhereInput[]
    id?: StringFilter<"StrategyConfiguration"> | string
    strategyId?: StringFilter<"StrategyConfiguration"> | string
    tickerId?: StringFilter<"StrategyConfiguration"> | string
    timeframe?: EnumTimeframeTypeFilter<"StrategyConfiguration"> | $Enums.TimeframeType
    shortWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    longWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    signalWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    stopLossPct?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: IntNullableFilter<"StrategyConfiguration"> | number | null
    rsiThreshold?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    signalEntry?: StringNullableFilter<"StrategyConfiguration"> | string | null
    signalExit?: StringNullableFilter<"StrategyConfiguration"> | string | null
    direction?: EnumDirectionTypeFilter<"StrategyConfiguration"> | $Enums.DirectionType
    allocationPct?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    parameters?: JsonNullableFilter<"StrategyConfiguration">
    createdAt?: DateTimeFilter<"StrategyConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"StrategyConfiguration"> | Date | string
    strategy?: XOR<StrategyRelationFilter, StrategyWhereInput>
    ticker?: XOR<TickerRelationFilter, TickerWhereInput>
    backtestResults?: BacktestResultListRelationFilter
    portfolioItems?: PortfolioStrategyListRelationFilter
    signals?: SignalListRelationFilter
  }

  export type StrategyConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    strategyId?: SortOrder
    tickerId?: SortOrder
    timeframe?: SortOrder
    shortWindow?: SortOrderInput | SortOrder
    longWindow?: SortOrderInput | SortOrder
    signalWindow?: SortOrderInput | SortOrder
    stopLossPct?: SortOrderInput | SortOrder
    rsiPeriod?: SortOrderInput | SortOrder
    rsiThreshold?: SortOrderInput | SortOrder
    signalEntry?: SortOrderInput | SortOrder
    signalExit?: SortOrderInput | SortOrder
    direction?: SortOrder
    allocationPct?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    strategy?: StrategyOrderByWithRelationInput
    ticker?: TickerOrderByWithRelationInput
    backtestResults?: BacktestResultOrderByRelationAggregateInput
    portfolioItems?: PortfolioStrategyOrderByRelationAggregateInput
    signals?: SignalOrderByRelationAggregateInput
  }

  export type StrategyConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    strategyId_tickerId_timeframe_shortWindow_longWindow?: StrategyConfigurationStrategyIdTickerIdTimeframeShortWindowLongWindowCompoundUniqueInput
    AND?: StrategyConfigurationWhereInput | StrategyConfigurationWhereInput[]
    OR?: StrategyConfigurationWhereInput[]
    NOT?: StrategyConfigurationWhereInput | StrategyConfigurationWhereInput[]
    strategyId?: StringFilter<"StrategyConfiguration"> | string
    tickerId?: StringFilter<"StrategyConfiguration"> | string
    timeframe?: EnumTimeframeTypeFilter<"StrategyConfiguration"> | $Enums.TimeframeType
    shortWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    longWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    signalWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    stopLossPct?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: IntNullableFilter<"StrategyConfiguration"> | number | null
    rsiThreshold?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    signalEntry?: StringNullableFilter<"StrategyConfiguration"> | string | null
    signalExit?: StringNullableFilter<"StrategyConfiguration"> | string | null
    direction?: EnumDirectionTypeFilter<"StrategyConfiguration"> | $Enums.DirectionType
    allocationPct?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    parameters?: JsonNullableFilter<"StrategyConfiguration">
    createdAt?: DateTimeFilter<"StrategyConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"StrategyConfiguration"> | Date | string
    strategy?: XOR<StrategyRelationFilter, StrategyWhereInput>
    ticker?: XOR<TickerRelationFilter, TickerWhereInput>
    backtestResults?: BacktestResultListRelationFilter
    portfolioItems?: PortfolioStrategyListRelationFilter
    signals?: SignalListRelationFilter
  }, "id" | "strategyId_tickerId_timeframe_shortWindow_longWindow">

  export type StrategyConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    strategyId?: SortOrder
    tickerId?: SortOrder
    timeframe?: SortOrder
    shortWindow?: SortOrderInput | SortOrder
    longWindow?: SortOrderInput | SortOrder
    signalWindow?: SortOrderInput | SortOrder
    stopLossPct?: SortOrderInput | SortOrder
    rsiPeriod?: SortOrderInput | SortOrder
    rsiThreshold?: SortOrderInput | SortOrder
    signalEntry?: SortOrderInput | SortOrder
    signalExit?: SortOrderInput | SortOrder
    direction?: SortOrder
    allocationPct?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StrategyConfigurationCountOrderByAggregateInput
    _avg?: StrategyConfigurationAvgOrderByAggregateInput
    _max?: StrategyConfigurationMaxOrderByAggregateInput
    _min?: StrategyConfigurationMinOrderByAggregateInput
    _sum?: StrategyConfigurationSumOrderByAggregateInput
  }

  export type StrategyConfigurationScalarWhereWithAggregatesInput = {
    AND?: StrategyConfigurationScalarWhereWithAggregatesInput | StrategyConfigurationScalarWhereWithAggregatesInput[]
    OR?: StrategyConfigurationScalarWhereWithAggregatesInput[]
    NOT?: StrategyConfigurationScalarWhereWithAggregatesInput | StrategyConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StrategyConfiguration"> | string
    strategyId?: StringWithAggregatesFilter<"StrategyConfiguration"> | string
    tickerId?: StringWithAggregatesFilter<"StrategyConfiguration"> | string
    timeframe?: EnumTimeframeTypeWithAggregatesFilter<"StrategyConfiguration"> | $Enums.TimeframeType
    shortWindow?: IntNullableWithAggregatesFilter<"StrategyConfiguration"> | number | null
    longWindow?: IntNullableWithAggregatesFilter<"StrategyConfiguration"> | number | null
    signalWindow?: IntNullableWithAggregatesFilter<"StrategyConfiguration"> | number | null
    stopLossPct?: DecimalNullableWithAggregatesFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: IntNullableWithAggregatesFilter<"StrategyConfiguration"> | number | null
    rsiThreshold?: DecimalNullableWithAggregatesFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    signalEntry?: StringNullableWithAggregatesFilter<"StrategyConfiguration"> | string | null
    signalExit?: StringNullableWithAggregatesFilter<"StrategyConfiguration"> | string | null
    direction?: EnumDirectionTypeWithAggregatesFilter<"StrategyConfiguration"> | $Enums.DirectionType
    allocationPct?: DecimalNullableWithAggregatesFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    parameters?: JsonNullableWithAggregatesFilter<"StrategyConfiguration">
    createdAt?: DateTimeWithAggregatesFilter<"StrategyConfiguration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StrategyConfiguration"> | Date | string
  }

  export type BacktestResultWhereInput = {
    AND?: BacktestResultWhereInput | BacktestResultWhereInput[]
    OR?: BacktestResultWhereInput[]
    NOT?: BacktestResultWhereInput | BacktestResultWhereInput[]
    id?: StringFilter<"BacktestResult"> | string
    strategyConfigId?: StringFilter<"BacktestResult"> | string
    runDate?: DateTimeFilter<"BacktestResult"> | Date | string
    startDate?: DateTimeFilter<"BacktestResult"> | Date | string
    endDate?: DateTimeFilter<"BacktestResult"> | Date | string
    totalReturnPct?: DecimalFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string
    annualReturnPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFilter<"BacktestResult"> | number
    winningTrades?: IntNullableFilter<"BacktestResult"> | number | null
    losingTrades?: IntNullableFilter<"BacktestResult"> | number | null
    winRatePct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    profitFactor?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    beta?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    alpha?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    trackingError?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    informationRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    score?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    openTrades?: IntNullableFilter<"BacktestResult"> | number | null
    tradesPerDay?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: JsonNullableFilter<"BacktestResult">
    createdAt?: DateTimeFilter<"BacktestResult"> | Date | string
    strategyConfig?: XOR<StrategyConfigurationRelationFilter, StrategyConfigurationWhereInput>
  }

  export type BacktestResultOrderByWithRelationInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    runDate?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalReturnPct?: SortOrder
    annualReturnPct?: SortOrderInput | SortOrder
    sharpeRatio?: SortOrderInput | SortOrder
    sortinoRatio?: SortOrderInput | SortOrder
    maxDrawdownPct?: SortOrderInput | SortOrder
    calmarRatio?: SortOrderInput | SortOrder
    totalTrades?: SortOrder
    winningTrades?: SortOrderInput | SortOrder
    losingTrades?: SortOrderInput | SortOrder
    winRatePct?: SortOrderInput | SortOrder
    profitFactor?: SortOrderInput | SortOrder
    expectancyPerTrade?: SortOrderInput | SortOrder
    avgTradeDuration?: SortOrderInput | SortOrder
    avgWinningTrade?: SortOrderInput | SortOrder
    avgLosingTrade?: SortOrderInput | SortOrder
    valueAtRisk95?: SortOrderInput | SortOrder
    conditionalValueAtRisk?: SortOrderInput | SortOrder
    beta?: SortOrderInput | SortOrder
    alpha?: SortOrderInput | SortOrder
    benchmarkReturnPct?: SortOrderInput | SortOrder
    outperformancePct?: SortOrderInput | SortOrder
    trackingError?: SortOrderInput | SortOrder
    informationRatio?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    openTrades?: SortOrderInput | SortOrder
    tradesPerDay?: SortOrderInput | SortOrder
    tradesPerMonth?: SortOrderInput | SortOrder
    rawMetrics?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    strategyConfig?: StrategyConfigurationOrderByWithRelationInput
  }

  export type BacktestResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BacktestResultWhereInput | BacktestResultWhereInput[]
    OR?: BacktestResultWhereInput[]
    NOT?: BacktestResultWhereInput | BacktestResultWhereInput[]
    strategyConfigId?: StringFilter<"BacktestResult"> | string
    runDate?: DateTimeFilter<"BacktestResult"> | Date | string
    startDate?: DateTimeFilter<"BacktestResult"> | Date | string
    endDate?: DateTimeFilter<"BacktestResult"> | Date | string
    totalReturnPct?: DecimalFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string
    annualReturnPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFilter<"BacktestResult"> | number
    winningTrades?: IntNullableFilter<"BacktestResult"> | number | null
    losingTrades?: IntNullableFilter<"BacktestResult"> | number | null
    winRatePct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    profitFactor?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    beta?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    alpha?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    trackingError?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    informationRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    score?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    openTrades?: IntNullableFilter<"BacktestResult"> | number | null
    tradesPerDay?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: JsonNullableFilter<"BacktestResult">
    createdAt?: DateTimeFilter<"BacktestResult"> | Date | string
    strategyConfig?: XOR<StrategyConfigurationRelationFilter, StrategyConfigurationWhereInput>
  }, "id">

  export type BacktestResultOrderByWithAggregationInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    runDate?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalReturnPct?: SortOrder
    annualReturnPct?: SortOrderInput | SortOrder
    sharpeRatio?: SortOrderInput | SortOrder
    sortinoRatio?: SortOrderInput | SortOrder
    maxDrawdownPct?: SortOrderInput | SortOrder
    calmarRatio?: SortOrderInput | SortOrder
    totalTrades?: SortOrder
    winningTrades?: SortOrderInput | SortOrder
    losingTrades?: SortOrderInput | SortOrder
    winRatePct?: SortOrderInput | SortOrder
    profitFactor?: SortOrderInput | SortOrder
    expectancyPerTrade?: SortOrderInput | SortOrder
    avgTradeDuration?: SortOrderInput | SortOrder
    avgWinningTrade?: SortOrderInput | SortOrder
    avgLosingTrade?: SortOrderInput | SortOrder
    valueAtRisk95?: SortOrderInput | SortOrder
    conditionalValueAtRisk?: SortOrderInput | SortOrder
    beta?: SortOrderInput | SortOrder
    alpha?: SortOrderInput | SortOrder
    benchmarkReturnPct?: SortOrderInput | SortOrder
    outperformancePct?: SortOrderInput | SortOrder
    trackingError?: SortOrderInput | SortOrder
    informationRatio?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    openTrades?: SortOrderInput | SortOrder
    tradesPerDay?: SortOrderInput | SortOrder
    tradesPerMonth?: SortOrderInput | SortOrder
    rawMetrics?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: BacktestResultCountOrderByAggregateInput
    _avg?: BacktestResultAvgOrderByAggregateInput
    _max?: BacktestResultMaxOrderByAggregateInput
    _min?: BacktestResultMinOrderByAggregateInput
    _sum?: BacktestResultSumOrderByAggregateInput
  }

  export type BacktestResultScalarWhereWithAggregatesInput = {
    AND?: BacktestResultScalarWhereWithAggregatesInput | BacktestResultScalarWhereWithAggregatesInput[]
    OR?: BacktestResultScalarWhereWithAggregatesInput[]
    NOT?: BacktestResultScalarWhereWithAggregatesInput | BacktestResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BacktestResult"> | string
    strategyConfigId?: StringWithAggregatesFilter<"BacktestResult"> | string
    runDate?: DateTimeWithAggregatesFilter<"BacktestResult"> | Date | string
    startDate?: DateTimeWithAggregatesFilter<"BacktestResult"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"BacktestResult"> | Date | string
    totalReturnPct?: DecimalWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string
    annualReturnPct?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntWithAggregatesFilter<"BacktestResult"> | number
    winningTrades?: IntNullableWithAggregatesFilter<"BacktestResult"> | number | null
    losingTrades?: IntNullableWithAggregatesFilter<"BacktestResult"> | number | null
    winRatePct?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    profitFactor?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    beta?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    alpha?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    trackingError?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    informationRatio?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    score?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    openTrades?: IntNullableWithAggregatesFilter<"BacktestResult"> | number | null
    tradesPerDay?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: DecimalNullableWithAggregatesFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: JsonNullableWithAggregatesFilter<"BacktestResult">
    createdAt?: DateTimeWithAggregatesFilter<"BacktestResult"> | Date | string
  }

  export type PortfolioWhereInput = {
    AND?: PortfolioWhereInput | PortfolioWhereInput[]
    OR?: PortfolioWhereInput[]
    NOT?: PortfolioWhereInput | PortfolioWhereInput[]
    id?: StringFilter<"Portfolio"> | string
    name?: StringFilter<"Portfolio"> | string
    description?: StringNullableFilter<"Portfolio"> | string | null
    type?: EnumPortfolioTypeFilter<"Portfolio"> | $Enums.PortfolioType
    parameters?: JsonNullableFilter<"Portfolio">
    createdAt?: DateTimeFilter<"Portfolio"> | Date | string
    updatedAt?: DateTimeFilter<"Portfolio"> | Date | string
    strategies?: PortfolioStrategyListRelationFilter
    metrics?: PortfolioMetricListRelationFilter
  }

  export type PortfolioOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    parameters?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    strategies?: PortfolioStrategyOrderByRelationAggregateInput
    metrics?: PortfolioMetricOrderByRelationAggregateInput
  }

  export type PortfolioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PortfolioWhereInput | PortfolioWhereInput[]
    OR?: PortfolioWhereInput[]
    NOT?: PortfolioWhereInput | PortfolioWhereInput[]
    name?: StringFilter<"Portfolio"> | string
    description?: StringNullableFilter<"Portfolio"> | string | null
    type?: EnumPortfolioTypeFilter<"Portfolio"> | $Enums.PortfolioType
    parameters?: JsonNullableFilter<"Portfolio">
    createdAt?: DateTimeFilter<"Portfolio"> | Date | string
    updatedAt?: DateTimeFilter<"Portfolio"> | Date | string
    strategies?: PortfolioStrategyListRelationFilter
    metrics?: PortfolioMetricListRelationFilter
  }, "id">

  export type PortfolioOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    parameters?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PortfolioCountOrderByAggregateInput
    _max?: PortfolioMaxOrderByAggregateInput
    _min?: PortfolioMinOrderByAggregateInput
  }

  export type PortfolioScalarWhereWithAggregatesInput = {
    AND?: PortfolioScalarWhereWithAggregatesInput | PortfolioScalarWhereWithAggregatesInput[]
    OR?: PortfolioScalarWhereWithAggregatesInput[]
    NOT?: PortfolioScalarWhereWithAggregatesInput | PortfolioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Portfolio"> | string
    name?: StringWithAggregatesFilter<"Portfolio"> | string
    description?: StringNullableWithAggregatesFilter<"Portfolio"> | string | null
    type?: EnumPortfolioTypeWithAggregatesFilter<"Portfolio"> | $Enums.PortfolioType
    parameters?: JsonNullableWithAggregatesFilter<"Portfolio">
    createdAt?: DateTimeWithAggregatesFilter<"Portfolio"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Portfolio"> | Date | string
  }

  export type PortfolioStrategyWhereInput = {
    AND?: PortfolioStrategyWhereInput | PortfolioStrategyWhereInput[]
    OR?: PortfolioStrategyWhereInput[]
    NOT?: PortfolioStrategyWhereInput | PortfolioStrategyWhereInput[]
    id?: StringFilter<"PortfolioStrategy"> | string
    portfolioId?: StringFilter<"PortfolioStrategy"> | string
    strategyConfigId?: StringFilter<"PortfolioStrategy"> | string
    allocationPct?: DecimalFilter<"PortfolioStrategy"> | Decimal | DecimalJsLike | number | string
    position?: IntFilter<"PortfolioStrategy"> | number
    isActive?: BoolFilter<"PortfolioStrategy"> | boolean
    createdAt?: DateTimeFilter<"PortfolioStrategy"> | Date | string
    portfolio?: XOR<PortfolioRelationFilter, PortfolioWhereInput>
    strategyConfig?: XOR<StrategyConfigurationRelationFilter, StrategyConfigurationWhereInput>
  }

  export type PortfolioStrategyOrderByWithRelationInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    strategyConfigId?: SortOrder
    allocationPct?: SortOrder
    position?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    portfolio?: PortfolioOrderByWithRelationInput
    strategyConfig?: StrategyConfigurationOrderByWithRelationInput
  }

  export type PortfolioStrategyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    portfolioId_strategyConfigId?: PortfolioStrategyPortfolioIdStrategyConfigIdCompoundUniqueInput
    AND?: PortfolioStrategyWhereInput | PortfolioStrategyWhereInput[]
    OR?: PortfolioStrategyWhereInput[]
    NOT?: PortfolioStrategyWhereInput | PortfolioStrategyWhereInput[]
    portfolioId?: StringFilter<"PortfolioStrategy"> | string
    strategyConfigId?: StringFilter<"PortfolioStrategy"> | string
    allocationPct?: DecimalFilter<"PortfolioStrategy"> | Decimal | DecimalJsLike | number | string
    position?: IntFilter<"PortfolioStrategy"> | number
    isActive?: BoolFilter<"PortfolioStrategy"> | boolean
    createdAt?: DateTimeFilter<"PortfolioStrategy"> | Date | string
    portfolio?: XOR<PortfolioRelationFilter, PortfolioWhereInput>
    strategyConfig?: XOR<StrategyConfigurationRelationFilter, StrategyConfigurationWhereInput>
  }, "id" | "portfolioId_strategyConfigId">

  export type PortfolioStrategyOrderByWithAggregationInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    strategyConfigId?: SortOrder
    allocationPct?: SortOrder
    position?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: PortfolioStrategyCountOrderByAggregateInput
    _avg?: PortfolioStrategyAvgOrderByAggregateInput
    _max?: PortfolioStrategyMaxOrderByAggregateInput
    _min?: PortfolioStrategyMinOrderByAggregateInput
    _sum?: PortfolioStrategySumOrderByAggregateInput
  }

  export type PortfolioStrategyScalarWhereWithAggregatesInput = {
    AND?: PortfolioStrategyScalarWhereWithAggregatesInput | PortfolioStrategyScalarWhereWithAggregatesInput[]
    OR?: PortfolioStrategyScalarWhereWithAggregatesInput[]
    NOT?: PortfolioStrategyScalarWhereWithAggregatesInput | PortfolioStrategyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PortfolioStrategy"> | string
    portfolioId?: StringWithAggregatesFilter<"PortfolioStrategy"> | string
    strategyConfigId?: StringWithAggregatesFilter<"PortfolioStrategy"> | string
    allocationPct?: DecimalWithAggregatesFilter<"PortfolioStrategy"> | Decimal | DecimalJsLike | number | string
    position?: IntWithAggregatesFilter<"PortfolioStrategy"> | number
    isActive?: BoolWithAggregatesFilter<"PortfolioStrategy"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PortfolioStrategy"> | Date | string
  }

  export type PortfolioMetricWhereInput = {
    AND?: PortfolioMetricWhereInput | PortfolioMetricWhereInput[]
    OR?: PortfolioMetricWhereInput[]
    NOT?: PortfolioMetricWhereInput | PortfolioMetricWhereInput[]
    id?: StringFilter<"PortfolioMetric"> | string
    portfolioId?: StringFilter<"PortfolioMetric"> | string
    metricDate?: DateTimeFilter<"PortfolioMetric"> | Date | string
    totalReturnPct?: DecimalFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string
    sharpeRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: IntNullableFilter<"PortfolioMetric"> | number | null
    avgConcurrentStrategies?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    riskContribution?: JsonNullableFilter<"PortfolioMetric">
    correlationMatrix?: JsonNullableFilter<"PortfolioMetric">
    strategyWeights?: JsonNullableFilter<"PortfolioMetric">
    performanceAttribution?: JsonNullableFilter<"PortfolioMetric">
    createdAt?: DateTimeFilter<"PortfolioMetric"> | Date | string
    portfolio?: XOR<PortfolioRelationFilter, PortfolioWhereInput>
  }

  export type PortfolioMetricOrderByWithRelationInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    metricDate?: SortOrder
    totalReturnPct?: SortOrder
    sharpeRatio?: SortOrderInput | SortOrder
    sortinoRatio?: SortOrderInput | SortOrder
    maxDrawdownPct?: SortOrderInput | SortOrder
    maxConcurrentStrategies?: SortOrderInput | SortOrder
    avgConcurrentStrategies?: SortOrderInput | SortOrder
    concurrencyRatio?: SortOrderInput | SortOrder
    efficiencyScore?: SortOrderInput | SortOrder
    portfolioVaR?: SortOrderInput | SortOrder
    diversificationRatio?: SortOrderInput | SortOrder
    riskContribution?: SortOrderInput | SortOrder
    correlationMatrix?: SortOrderInput | SortOrder
    strategyWeights?: SortOrderInput | SortOrder
    performanceAttribution?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    portfolio?: PortfolioOrderByWithRelationInput
  }

  export type PortfolioMetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    portfolioId_metricDate?: PortfolioMetricPortfolioIdMetricDateCompoundUniqueInput
    AND?: PortfolioMetricWhereInput | PortfolioMetricWhereInput[]
    OR?: PortfolioMetricWhereInput[]
    NOT?: PortfolioMetricWhereInput | PortfolioMetricWhereInput[]
    portfolioId?: StringFilter<"PortfolioMetric"> | string
    metricDate?: DateTimeFilter<"PortfolioMetric"> | Date | string
    totalReturnPct?: DecimalFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string
    sharpeRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: IntNullableFilter<"PortfolioMetric"> | number | null
    avgConcurrentStrategies?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    riskContribution?: JsonNullableFilter<"PortfolioMetric">
    correlationMatrix?: JsonNullableFilter<"PortfolioMetric">
    strategyWeights?: JsonNullableFilter<"PortfolioMetric">
    performanceAttribution?: JsonNullableFilter<"PortfolioMetric">
    createdAt?: DateTimeFilter<"PortfolioMetric"> | Date | string
    portfolio?: XOR<PortfolioRelationFilter, PortfolioWhereInput>
  }, "id" | "portfolioId_metricDate">

  export type PortfolioMetricOrderByWithAggregationInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    metricDate?: SortOrder
    totalReturnPct?: SortOrder
    sharpeRatio?: SortOrderInput | SortOrder
    sortinoRatio?: SortOrderInput | SortOrder
    maxDrawdownPct?: SortOrderInput | SortOrder
    maxConcurrentStrategies?: SortOrderInput | SortOrder
    avgConcurrentStrategies?: SortOrderInput | SortOrder
    concurrencyRatio?: SortOrderInput | SortOrder
    efficiencyScore?: SortOrderInput | SortOrder
    portfolioVaR?: SortOrderInput | SortOrder
    diversificationRatio?: SortOrderInput | SortOrder
    riskContribution?: SortOrderInput | SortOrder
    correlationMatrix?: SortOrderInput | SortOrder
    strategyWeights?: SortOrderInput | SortOrder
    performanceAttribution?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PortfolioMetricCountOrderByAggregateInput
    _avg?: PortfolioMetricAvgOrderByAggregateInput
    _max?: PortfolioMetricMaxOrderByAggregateInput
    _min?: PortfolioMetricMinOrderByAggregateInput
    _sum?: PortfolioMetricSumOrderByAggregateInput
  }

  export type PortfolioMetricScalarWhereWithAggregatesInput = {
    AND?: PortfolioMetricScalarWhereWithAggregatesInput | PortfolioMetricScalarWhereWithAggregatesInput[]
    OR?: PortfolioMetricScalarWhereWithAggregatesInput[]
    NOT?: PortfolioMetricScalarWhereWithAggregatesInput | PortfolioMetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PortfolioMetric"> | string
    portfolioId?: StringWithAggregatesFilter<"PortfolioMetric"> | string
    metricDate?: DateTimeWithAggregatesFilter<"PortfolioMetric"> | Date | string
    totalReturnPct?: DecimalWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string
    sharpeRatio?: DecimalNullableWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: DecimalNullableWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: DecimalNullableWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: IntNullableWithAggregatesFilter<"PortfolioMetric"> | number | null
    avgConcurrentStrategies?: DecimalNullableWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: DecimalNullableWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: DecimalNullableWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: DecimalNullableWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: DecimalNullableWithAggregatesFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    riskContribution?: JsonNullableWithAggregatesFilter<"PortfolioMetric">
    correlationMatrix?: JsonNullableWithAggregatesFilter<"PortfolioMetric">
    strategyWeights?: JsonNullableWithAggregatesFilter<"PortfolioMetric">
    performanceAttribution?: JsonNullableWithAggregatesFilter<"PortfolioMetric">
    createdAt?: DateTimeWithAggregatesFilter<"PortfolioMetric"> | Date | string
  }

  export type SignalWhereInput = {
    AND?: SignalWhereInput | SignalWhereInput[]
    OR?: SignalWhereInput[]
    NOT?: SignalWhereInput | SignalWhereInput[]
    id?: StringFilter<"Signal"> | string
    strategyConfigId?: StringFilter<"Signal"> | string
    signalType?: EnumSignalTypeFilter<"Signal"> | $Enums.SignalType
    signalDate?: DateTimeFilter<"Signal"> | Date | string
    price?: DecimalFilter<"Signal"> | Decimal | DecimalJsLike | number | string
    quantity?: DecimalNullableFilter<"Signal"> | Decimal | DecimalJsLike | number | string | null
    confidence?: DecimalNullableFilter<"Signal"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullableFilter<"Signal">
    createdAt?: DateTimeFilter<"Signal"> | Date | string
    strategyConfig?: XOR<StrategyConfigurationRelationFilter, StrategyConfigurationWhereInput>
  }

  export type SignalOrderByWithRelationInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    signalType?: SortOrder
    signalDate?: SortOrder
    price?: SortOrder
    quantity?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    strategyConfig?: StrategyConfigurationOrderByWithRelationInput
  }

  export type SignalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SignalWhereInput | SignalWhereInput[]
    OR?: SignalWhereInput[]
    NOT?: SignalWhereInput | SignalWhereInput[]
    strategyConfigId?: StringFilter<"Signal"> | string
    signalType?: EnumSignalTypeFilter<"Signal"> | $Enums.SignalType
    signalDate?: DateTimeFilter<"Signal"> | Date | string
    price?: DecimalFilter<"Signal"> | Decimal | DecimalJsLike | number | string
    quantity?: DecimalNullableFilter<"Signal"> | Decimal | DecimalJsLike | number | string | null
    confidence?: DecimalNullableFilter<"Signal"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullableFilter<"Signal">
    createdAt?: DateTimeFilter<"Signal"> | Date | string
    strategyConfig?: XOR<StrategyConfigurationRelationFilter, StrategyConfigurationWhereInput>
  }, "id">

  export type SignalOrderByWithAggregationInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    signalType?: SortOrder
    signalDate?: SortOrder
    price?: SortOrder
    quantity?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SignalCountOrderByAggregateInput
    _avg?: SignalAvgOrderByAggregateInput
    _max?: SignalMaxOrderByAggregateInput
    _min?: SignalMinOrderByAggregateInput
    _sum?: SignalSumOrderByAggregateInput
  }

  export type SignalScalarWhereWithAggregatesInput = {
    AND?: SignalScalarWhereWithAggregatesInput | SignalScalarWhereWithAggregatesInput[]
    OR?: SignalScalarWhereWithAggregatesInput[]
    NOT?: SignalScalarWhereWithAggregatesInput | SignalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Signal"> | string
    strategyConfigId?: StringWithAggregatesFilter<"Signal"> | string
    signalType?: EnumSignalTypeWithAggregatesFilter<"Signal"> | $Enums.SignalType
    signalDate?: DateTimeWithAggregatesFilter<"Signal"> | Date | string
    price?: DecimalWithAggregatesFilter<"Signal"> | Decimal | DecimalJsLike | number | string
    quantity?: DecimalNullableWithAggregatesFilter<"Signal"> | Decimal | DecimalJsLike | number | string | null
    confidence?: DecimalNullableWithAggregatesFilter<"Signal"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Signal">
    createdAt?: DateTimeWithAggregatesFilter<"Signal"> | Date | string
  }

  export type ConfigurationWhereInput = {
    AND?: ConfigurationWhereInput | ConfigurationWhereInput[]
    OR?: ConfigurationWhereInput[]
    NOT?: ConfigurationWhereInput | ConfigurationWhereInput[]
    id?: StringFilter<"Configuration"> | string
    key?: StringFilter<"Configuration"> | string
    value?: JsonFilter<"Configuration">
    category?: StringNullableFilter<"Configuration"> | string | null
    createdAt?: DateTimeFilter<"Configuration"> | Date | string
    updatedAt?: DateTimeFilter<"Configuration"> | Date | string
  }

  export type ConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: ConfigurationWhereInput | ConfigurationWhereInput[]
    OR?: ConfigurationWhereInput[]
    NOT?: ConfigurationWhereInput | ConfigurationWhereInput[]
    value?: JsonFilter<"Configuration">
    category?: StringNullableFilter<"Configuration"> | string | null
    createdAt?: DateTimeFilter<"Configuration"> | Date | string
    updatedAt?: DateTimeFilter<"Configuration"> | Date | string
  }, "id" | "key">

  export type ConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConfigurationCountOrderByAggregateInput
    _max?: ConfigurationMaxOrderByAggregateInput
    _min?: ConfigurationMinOrderByAggregateInput
  }

  export type ConfigurationScalarWhereWithAggregatesInput = {
    AND?: ConfigurationScalarWhereWithAggregatesInput | ConfigurationScalarWhereWithAggregatesInput[]
    OR?: ConfigurationScalarWhereWithAggregatesInput[]
    NOT?: ConfigurationScalarWhereWithAggregatesInput | ConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Configuration"> | string
    key?: StringWithAggregatesFilter<"Configuration"> | string
    value?: JsonWithAggregatesFilter<"Configuration">
    category?: StringNullableWithAggregatesFilter<"Configuration"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Configuration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Configuration"> | Date | string
  }

  export type TickerCreateInput = {
    id?: string
    symbol: string
    name?: string | null
    assetClass: $Enums.AssetClass
    exchange?: string | null
    sector?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    priceData?: PriceDataCreateNestedManyWithoutTickerInput
    strategyConfigs?: StrategyConfigurationCreateNestedManyWithoutTickerInput
  }

  export type TickerUncheckedCreateInput = {
    id?: string
    symbol: string
    name?: string | null
    assetClass: $Enums.AssetClass
    exchange?: string | null
    sector?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    priceData?: PriceDataUncheckedCreateNestedManyWithoutTickerInput
    strategyConfigs?: StrategyConfigurationUncheckedCreateNestedManyWithoutTickerInput
  }

  export type TickerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    assetClass?: EnumAssetClassFieldUpdateOperationsInput | $Enums.AssetClass
    exchange?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceData?: PriceDataUpdateManyWithoutTickerNestedInput
    strategyConfigs?: StrategyConfigurationUpdateManyWithoutTickerNestedInput
  }

  export type TickerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    assetClass?: EnumAssetClassFieldUpdateOperationsInput | $Enums.AssetClass
    exchange?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceData?: PriceDataUncheckedUpdateManyWithoutTickerNestedInput
    strategyConfigs?: StrategyConfigurationUncheckedUpdateManyWithoutTickerNestedInput
  }

  export type TickerCreateManyInput = {
    id?: string
    symbol: string
    name?: string | null
    assetClass: $Enums.AssetClass
    exchange?: string | null
    sector?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TickerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    assetClass?: EnumAssetClassFieldUpdateOperationsInput | $Enums.AssetClass
    exchange?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TickerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    assetClass?: EnumAssetClassFieldUpdateOperationsInput | $Enums.AssetClass
    exchange?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceDataCreateInput = {
    id?: string
    date: Date | string
    open: Decimal | DecimalJsLike | number | string
    high: Decimal | DecimalJsLike | number | string
    low: Decimal | DecimalJsLike | number | string
    close: Decimal | DecimalJsLike | number | string
    volume?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    ticker: TickerCreateNestedOneWithoutPriceDataInput
  }

  export type PriceDataUncheckedCreateInput = {
    id?: string
    tickerId: string
    date: Date | string
    open: Decimal | DecimalJsLike | number | string
    high: Decimal | DecimalJsLike | number | string
    low: Decimal | DecimalJsLike | number | string
    close: Decimal | DecimalJsLike | number | string
    volume?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type PriceDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    open?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    high?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    low?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    close?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    volume?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticker?: TickerUpdateOneRequiredWithoutPriceDataNestedInput
  }

  export type PriceDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    open?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    high?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    low?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    close?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    volume?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceDataCreateManyInput = {
    id?: string
    tickerId: string
    date: Date | string
    open: Decimal | DecimalJsLike | number | string
    high: Decimal | DecimalJsLike | number | string
    low: Decimal | DecimalJsLike | number | string
    close: Decimal | DecimalJsLike | number | string
    volume?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type PriceDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    open?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    high?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    low?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    close?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    volume?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    open?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    high?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    low?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    close?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    volume?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StrategyCreateInput = {
    id?: string
    name: string
    type: $Enums.StrategyType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    configurations?: StrategyConfigurationCreateNestedManyWithoutStrategyInput
  }

  export type StrategyUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.StrategyType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    configurations?: StrategyConfigurationUncheckedCreateNestedManyWithoutStrategyInput
  }

  export type StrategyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStrategyTypeFieldUpdateOperationsInput | $Enums.StrategyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    configurations?: StrategyConfigurationUpdateManyWithoutStrategyNestedInput
  }

  export type StrategyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStrategyTypeFieldUpdateOperationsInput | $Enums.StrategyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    configurations?: StrategyConfigurationUncheckedUpdateManyWithoutStrategyNestedInput
  }

  export type StrategyCreateManyInput = {
    id?: string
    name: string
    type: $Enums.StrategyType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StrategyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStrategyTypeFieldUpdateOperationsInput | $Enums.StrategyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StrategyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStrategyTypeFieldUpdateOperationsInput | $Enums.StrategyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StrategyConfigurationCreateInput = {
    id?: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategy: StrategyCreateNestedOneWithoutConfigurationsInput
    ticker: TickerCreateNestedOneWithoutStrategyConfigsInput
    backtestResults?: BacktestResultCreateNestedManyWithoutStrategyConfigInput
    portfolioItems?: PortfolioStrategyCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationUncheckedCreateInput = {
    id?: string
    strategyId: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    backtestResults?: BacktestResultUncheckedCreateNestedManyWithoutStrategyConfigInput
    portfolioItems?: PortfolioStrategyUncheckedCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalUncheckedCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategy?: StrategyUpdateOneRequiredWithoutConfigurationsNestedInput
    ticker?: TickerUpdateOneRequiredWithoutStrategyConfigsNestedInput
    backtestResults?: BacktestResultUpdateManyWithoutStrategyConfigNestedInput
    portfolioItems?: PortfolioStrategyUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    backtestResults?: BacktestResultUncheckedUpdateManyWithoutStrategyConfigNestedInput
    portfolioItems?: PortfolioStrategyUncheckedUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUncheckedUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationCreateManyInput = {
    id?: string
    strategyId: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StrategyConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StrategyConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BacktestResultCreateInput = {
    id?: string
    runDate: Date | string
    startDate: Date | string
    endDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    annualReturnPct?: Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    calmarRatio?: Decimal | DecimalJsLike | number | string | null
    totalTrades: number
    winningTrades?: number | null
    losingTrades?: number | null
    winRatePct?: Decimal | DecimalJsLike | number | string | null
    profitFactor?: Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: Decimal | DecimalJsLike | number | string | null
    beta?: Decimal | DecimalJsLike | number | string | null
    alpha?: Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: Decimal | DecimalJsLike | number | string | null
    outperformancePct?: Decimal | DecimalJsLike | number | string | null
    trackingError?: Decimal | DecimalJsLike | number | string | null
    informationRatio?: Decimal | DecimalJsLike | number | string | null
    score?: Decimal | DecimalJsLike | number | string | null
    openTrades?: number | null
    tradesPerDay?: Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    strategyConfig: StrategyConfigurationCreateNestedOneWithoutBacktestResultsInput
  }

  export type BacktestResultUncheckedCreateInput = {
    id?: string
    strategyConfigId: string
    runDate: Date | string
    startDate: Date | string
    endDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    annualReturnPct?: Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    calmarRatio?: Decimal | DecimalJsLike | number | string | null
    totalTrades: number
    winningTrades?: number | null
    losingTrades?: number | null
    winRatePct?: Decimal | DecimalJsLike | number | string | null
    profitFactor?: Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: Decimal | DecimalJsLike | number | string | null
    beta?: Decimal | DecimalJsLike | number | string | null
    alpha?: Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: Decimal | DecimalJsLike | number | string | null
    outperformancePct?: Decimal | DecimalJsLike | number | string | null
    trackingError?: Decimal | DecimalJsLike | number | string | null
    informationRatio?: Decimal | DecimalJsLike | number | string | null
    score?: Decimal | DecimalJsLike | number | string | null
    openTrades?: number | null
    tradesPerDay?: Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BacktestResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    runDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    annualReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFieldUpdateOperationsInput | number
    winningTrades?: NullableIntFieldUpdateOperationsInput | number | null
    losingTrades?: NullableIntFieldUpdateOperationsInput | number | null
    winRatePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    profitFactor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    beta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    alpha?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    trackingError?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    informationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    openTrades?: NullableIntFieldUpdateOperationsInput | number | null
    tradesPerDay?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategyConfig?: StrategyConfigurationUpdateOneRequiredWithoutBacktestResultsNestedInput
  }

  export type BacktestResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyConfigId?: StringFieldUpdateOperationsInput | string
    runDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    annualReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFieldUpdateOperationsInput | number
    winningTrades?: NullableIntFieldUpdateOperationsInput | number | null
    losingTrades?: NullableIntFieldUpdateOperationsInput | number | null
    winRatePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    profitFactor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    beta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    alpha?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    trackingError?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    informationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    openTrades?: NullableIntFieldUpdateOperationsInput | number | null
    tradesPerDay?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BacktestResultCreateManyInput = {
    id?: string
    strategyConfigId: string
    runDate: Date | string
    startDate: Date | string
    endDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    annualReturnPct?: Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    calmarRatio?: Decimal | DecimalJsLike | number | string | null
    totalTrades: number
    winningTrades?: number | null
    losingTrades?: number | null
    winRatePct?: Decimal | DecimalJsLike | number | string | null
    profitFactor?: Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: Decimal | DecimalJsLike | number | string | null
    beta?: Decimal | DecimalJsLike | number | string | null
    alpha?: Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: Decimal | DecimalJsLike | number | string | null
    outperformancePct?: Decimal | DecimalJsLike | number | string | null
    trackingError?: Decimal | DecimalJsLike | number | string | null
    informationRatio?: Decimal | DecimalJsLike | number | string | null
    score?: Decimal | DecimalJsLike | number | string | null
    openTrades?: number | null
    tradesPerDay?: Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BacktestResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    runDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    annualReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFieldUpdateOperationsInput | number
    winningTrades?: NullableIntFieldUpdateOperationsInput | number | null
    losingTrades?: NullableIntFieldUpdateOperationsInput | number | null
    winRatePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    profitFactor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    beta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    alpha?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    trackingError?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    informationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    openTrades?: NullableIntFieldUpdateOperationsInput | number | null
    tradesPerDay?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BacktestResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyConfigId?: StringFieldUpdateOperationsInput | string
    runDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    annualReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFieldUpdateOperationsInput | number
    winningTrades?: NullableIntFieldUpdateOperationsInput | number | null
    losingTrades?: NullableIntFieldUpdateOperationsInput | number | null
    winRatePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    profitFactor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    beta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    alpha?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    trackingError?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    informationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    openTrades?: NullableIntFieldUpdateOperationsInput | number | null
    tradesPerDay?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioCreateInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategies?: PortfolioStrategyCreateNestedManyWithoutPortfolioInput
    metrics?: PortfolioMetricCreateNestedManyWithoutPortfolioInput
  }

  export type PortfolioUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategies?: PortfolioStrategyUncheckedCreateNestedManyWithoutPortfolioInput
    metrics?: PortfolioMetricUncheckedCreateNestedManyWithoutPortfolioInput
  }

  export type PortfolioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumPortfolioTypeFieldUpdateOperationsInput | $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategies?: PortfolioStrategyUpdateManyWithoutPortfolioNestedInput
    metrics?: PortfolioMetricUpdateManyWithoutPortfolioNestedInput
  }

  export type PortfolioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumPortfolioTypeFieldUpdateOperationsInput | $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategies?: PortfolioStrategyUncheckedUpdateManyWithoutPortfolioNestedInput
    metrics?: PortfolioMetricUncheckedUpdateManyWithoutPortfolioNestedInput
  }

  export type PortfolioCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PortfolioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumPortfolioTypeFieldUpdateOperationsInput | $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumPortfolioTypeFieldUpdateOperationsInput | $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioStrategyCreateInput = {
    id?: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
    portfolio: PortfolioCreateNestedOneWithoutStrategiesInput
    strategyConfig: StrategyConfigurationCreateNestedOneWithoutPortfolioItemsInput
  }

  export type PortfolioStrategyUncheckedCreateInput = {
    id?: string
    portfolioId: string
    strategyConfigId: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PortfolioStrategyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolio?: PortfolioUpdateOneRequiredWithoutStrategiesNestedInput
    strategyConfig?: StrategyConfigurationUpdateOneRequiredWithoutPortfolioItemsNestedInput
  }

  export type PortfolioStrategyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    portfolioId?: StringFieldUpdateOperationsInput | string
    strategyConfigId?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioStrategyCreateManyInput = {
    id?: string
    portfolioId: string
    strategyConfigId: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PortfolioStrategyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioStrategyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    portfolioId?: StringFieldUpdateOperationsInput | string
    strategyConfigId?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioMetricCreateInput = {
    id?: string
    metricDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: number | null
    avgConcurrentStrategies?: Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    portfolio: PortfolioCreateNestedOneWithoutMetricsInput
  }

  export type PortfolioMetricUncheckedCreateInput = {
    id?: string
    portfolioId: string
    metricDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: number | null
    avgConcurrentStrategies?: Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PortfolioMetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: NullableIntFieldUpdateOperationsInput | number | null
    avgConcurrentStrategies?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolio?: PortfolioUpdateOneRequiredWithoutMetricsNestedInput
  }

  export type PortfolioMetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    portfolioId?: StringFieldUpdateOperationsInput | string
    metricDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: NullableIntFieldUpdateOperationsInput | number | null
    avgConcurrentStrategies?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioMetricCreateManyInput = {
    id?: string
    portfolioId: string
    metricDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: number | null
    avgConcurrentStrategies?: Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PortfolioMetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: NullableIntFieldUpdateOperationsInput | number | null
    avgConcurrentStrategies?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioMetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    portfolioId?: StringFieldUpdateOperationsInput | string
    metricDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: NullableIntFieldUpdateOperationsInput | number | null
    avgConcurrentStrategies?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignalCreateInput = {
    id?: string
    signalType: $Enums.SignalType
    signalDate: Date | string
    price: Decimal | DecimalJsLike | number | string
    quantity?: Decimal | DecimalJsLike | number | string | null
    confidence?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    strategyConfig: StrategyConfigurationCreateNestedOneWithoutSignalsInput
  }

  export type SignalUncheckedCreateInput = {
    id?: string
    strategyConfigId: string
    signalType: $Enums.SignalType
    signalDate: Date | string
    price: Decimal | DecimalJsLike | number | string
    quantity?: Decimal | DecimalJsLike | number | string | null
    confidence?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SignalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    signalType?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    signalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    confidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategyConfig?: StrategyConfigurationUpdateOneRequiredWithoutSignalsNestedInput
  }

  export type SignalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyConfigId?: StringFieldUpdateOperationsInput | string
    signalType?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    signalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    confidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignalCreateManyInput = {
    id?: string
    strategyConfigId: string
    signalType: $Enums.SignalType
    signalDate: Date | string
    price: Decimal | DecimalJsLike | number | string
    quantity?: Decimal | DecimalJsLike | number | string | null
    confidence?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SignalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    signalType?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    signalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    confidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyConfigId?: StringFieldUpdateOperationsInput | string
    signalType?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    signalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    confidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConfigurationCreateInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConfigurationUncheckedCreateInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConfigurationCreateManyInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumAssetClassFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetClass | EnumAssetClassFieldRefInput<$PrismaModel>
    in?: $Enums.AssetClass[] | ListEnumAssetClassFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetClass[] | ListEnumAssetClassFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetClassFilter<$PrismaModel> | $Enums.AssetClass
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PriceDataListRelationFilter = {
    every?: PriceDataWhereInput
    some?: PriceDataWhereInput
    none?: PriceDataWhereInput
  }

  export type StrategyConfigurationListRelationFilter = {
    every?: StrategyConfigurationWhereInput
    some?: StrategyConfigurationWhereInput
    none?: StrategyConfigurationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PriceDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StrategyConfigurationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TickerCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    assetClass?: SortOrder
    exchange?: SortOrder
    sector?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TickerMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    assetClass?: SortOrder
    exchange?: SortOrder
    sector?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TickerMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    assetClass?: SortOrder
    exchange?: SortOrder
    sector?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumAssetClassWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetClass | EnumAssetClassFieldRefInput<$PrismaModel>
    in?: $Enums.AssetClass[] | ListEnumAssetClassFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetClass[] | ListEnumAssetClassFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetClassWithAggregatesFilter<$PrismaModel> | $Enums.AssetClass
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetClassFilter<$PrismaModel>
    _max?: NestedEnumAssetClassFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type TickerRelationFilter = {
    is?: TickerWhereInput
    isNot?: TickerWhereInput
  }

  export type PriceDataTickerIdDateCompoundUniqueInput = {
    tickerId: string
    date: Date | string
  }

  export type PriceDataCountOrderByAggregateInput = {
    id?: SortOrder
    tickerId?: SortOrder
    date?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceDataAvgOrderByAggregateInput = {
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
  }

  export type PriceDataMaxOrderByAggregateInput = {
    id?: SortOrder
    tickerId?: SortOrder
    date?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceDataMinOrderByAggregateInput = {
    id?: SortOrder
    tickerId?: SortOrder
    date?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
    createdAt?: SortOrder
  }

  export type PriceDataSumOrderByAggregateInput = {
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumStrategyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StrategyType | EnumStrategyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StrategyType[] | ListEnumStrategyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StrategyType[] | ListEnumStrategyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStrategyTypeFilter<$PrismaModel> | $Enums.StrategyType
  }

  export type StrategyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StrategyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StrategyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStrategyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StrategyType | EnumStrategyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StrategyType[] | ListEnumStrategyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StrategyType[] | ListEnumStrategyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStrategyTypeWithAggregatesFilter<$PrismaModel> | $Enums.StrategyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStrategyTypeFilter<$PrismaModel>
    _max?: NestedEnumStrategyTypeFilter<$PrismaModel>
  }

  export type EnumTimeframeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TimeframeType | EnumTimeframeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TimeframeType[] | ListEnumTimeframeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TimeframeType[] | ListEnumTimeframeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTimeframeTypeFilter<$PrismaModel> | $Enums.TimeframeType
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumDirectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionType | EnumDirectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionType[] | ListEnumDirectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DirectionType[] | ListEnumDirectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDirectionTypeFilter<$PrismaModel> | $Enums.DirectionType
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StrategyRelationFilter = {
    is?: StrategyWhereInput
    isNot?: StrategyWhereInput
  }

  export type BacktestResultListRelationFilter = {
    every?: BacktestResultWhereInput
    some?: BacktestResultWhereInput
    none?: BacktestResultWhereInput
  }

  export type PortfolioStrategyListRelationFilter = {
    every?: PortfolioStrategyWhereInput
    some?: PortfolioStrategyWhereInput
    none?: PortfolioStrategyWhereInput
  }

  export type SignalListRelationFilter = {
    every?: SignalWhereInput
    some?: SignalWhereInput
    none?: SignalWhereInput
  }

  export type BacktestResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PortfolioStrategyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SignalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StrategyConfigurationStrategyIdTickerIdTimeframeShortWindowLongWindowCompoundUniqueInput = {
    strategyId: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow: number
    longWindow: number
  }

  export type StrategyConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    strategyId?: SortOrder
    tickerId?: SortOrder
    timeframe?: SortOrder
    shortWindow?: SortOrder
    longWindow?: SortOrder
    signalWindow?: SortOrder
    stopLossPct?: SortOrder
    rsiPeriod?: SortOrder
    rsiThreshold?: SortOrder
    signalEntry?: SortOrder
    signalExit?: SortOrder
    direction?: SortOrder
    allocationPct?: SortOrder
    parameters?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StrategyConfigurationAvgOrderByAggregateInput = {
    shortWindow?: SortOrder
    longWindow?: SortOrder
    signalWindow?: SortOrder
    stopLossPct?: SortOrder
    rsiPeriod?: SortOrder
    rsiThreshold?: SortOrder
    allocationPct?: SortOrder
  }

  export type StrategyConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    strategyId?: SortOrder
    tickerId?: SortOrder
    timeframe?: SortOrder
    shortWindow?: SortOrder
    longWindow?: SortOrder
    signalWindow?: SortOrder
    stopLossPct?: SortOrder
    rsiPeriod?: SortOrder
    rsiThreshold?: SortOrder
    signalEntry?: SortOrder
    signalExit?: SortOrder
    direction?: SortOrder
    allocationPct?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StrategyConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    strategyId?: SortOrder
    tickerId?: SortOrder
    timeframe?: SortOrder
    shortWindow?: SortOrder
    longWindow?: SortOrder
    signalWindow?: SortOrder
    stopLossPct?: SortOrder
    rsiPeriod?: SortOrder
    rsiThreshold?: SortOrder
    signalEntry?: SortOrder
    signalExit?: SortOrder
    direction?: SortOrder
    allocationPct?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StrategyConfigurationSumOrderByAggregateInput = {
    shortWindow?: SortOrder
    longWindow?: SortOrder
    signalWindow?: SortOrder
    stopLossPct?: SortOrder
    rsiPeriod?: SortOrder
    rsiThreshold?: SortOrder
    allocationPct?: SortOrder
  }

  export type EnumTimeframeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TimeframeType | EnumTimeframeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TimeframeType[] | ListEnumTimeframeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TimeframeType[] | ListEnumTimeframeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTimeframeTypeWithAggregatesFilter<$PrismaModel> | $Enums.TimeframeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTimeframeTypeFilter<$PrismaModel>
    _max?: NestedEnumTimeframeTypeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumDirectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionType | EnumDirectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionType[] | ListEnumDirectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DirectionType[] | ListEnumDirectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDirectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.DirectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDirectionTypeFilter<$PrismaModel>
    _max?: NestedEnumDirectionTypeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StrategyConfigurationRelationFilter = {
    is?: StrategyConfigurationWhereInput
    isNot?: StrategyConfigurationWhereInput
  }

  export type BacktestResultCountOrderByAggregateInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    runDate?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalReturnPct?: SortOrder
    annualReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    calmarRatio?: SortOrder
    totalTrades?: SortOrder
    winningTrades?: SortOrder
    losingTrades?: SortOrder
    winRatePct?: SortOrder
    profitFactor?: SortOrder
    expectancyPerTrade?: SortOrder
    avgTradeDuration?: SortOrder
    avgWinningTrade?: SortOrder
    avgLosingTrade?: SortOrder
    valueAtRisk95?: SortOrder
    conditionalValueAtRisk?: SortOrder
    beta?: SortOrder
    alpha?: SortOrder
    benchmarkReturnPct?: SortOrder
    outperformancePct?: SortOrder
    trackingError?: SortOrder
    informationRatio?: SortOrder
    score?: SortOrder
    openTrades?: SortOrder
    tradesPerDay?: SortOrder
    tradesPerMonth?: SortOrder
    rawMetrics?: SortOrder
    createdAt?: SortOrder
  }

  export type BacktestResultAvgOrderByAggregateInput = {
    totalReturnPct?: SortOrder
    annualReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    calmarRatio?: SortOrder
    totalTrades?: SortOrder
    winningTrades?: SortOrder
    losingTrades?: SortOrder
    winRatePct?: SortOrder
    profitFactor?: SortOrder
    expectancyPerTrade?: SortOrder
    avgTradeDuration?: SortOrder
    avgWinningTrade?: SortOrder
    avgLosingTrade?: SortOrder
    valueAtRisk95?: SortOrder
    conditionalValueAtRisk?: SortOrder
    beta?: SortOrder
    alpha?: SortOrder
    benchmarkReturnPct?: SortOrder
    outperformancePct?: SortOrder
    trackingError?: SortOrder
    informationRatio?: SortOrder
    score?: SortOrder
    openTrades?: SortOrder
    tradesPerDay?: SortOrder
    tradesPerMonth?: SortOrder
  }

  export type BacktestResultMaxOrderByAggregateInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    runDate?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalReturnPct?: SortOrder
    annualReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    calmarRatio?: SortOrder
    totalTrades?: SortOrder
    winningTrades?: SortOrder
    losingTrades?: SortOrder
    winRatePct?: SortOrder
    profitFactor?: SortOrder
    expectancyPerTrade?: SortOrder
    avgTradeDuration?: SortOrder
    avgWinningTrade?: SortOrder
    avgLosingTrade?: SortOrder
    valueAtRisk95?: SortOrder
    conditionalValueAtRisk?: SortOrder
    beta?: SortOrder
    alpha?: SortOrder
    benchmarkReturnPct?: SortOrder
    outperformancePct?: SortOrder
    trackingError?: SortOrder
    informationRatio?: SortOrder
    score?: SortOrder
    openTrades?: SortOrder
    tradesPerDay?: SortOrder
    tradesPerMonth?: SortOrder
    createdAt?: SortOrder
  }

  export type BacktestResultMinOrderByAggregateInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    runDate?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalReturnPct?: SortOrder
    annualReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    calmarRatio?: SortOrder
    totalTrades?: SortOrder
    winningTrades?: SortOrder
    losingTrades?: SortOrder
    winRatePct?: SortOrder
    profitFactor?: SortOrder
    expectancyPerTrade?: SortOrder
    avgTradeDuration?: SortOrder
    avgWinningTrade?: SortOrder
    avgLosingTrade?: SortOrder
    valueAtRisk95?: SortOrder
    conditionalValueAtRisk?: SortOrder
    beta?: SortOrder
    alpha?: SortOrder
    benchmarkReturnPct?: SortOrder
    outperformancePct?: SortOrder
    trackingError?: SortOrder
    informationRatio?: SortOrder
    score?: SortOrder
    openTrades?: SortOrder
    tradesPerDay?: SortOrder
    tradesPerMonth?: SortOrder
    createdAt?: SortOrder
  }

  export type BacktestResultSumOrderByAggregateInput = {
    totalReturnPct?: SortOrder
    annualReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    calmarRatio?: SortOrder
    totalTrades?: SortOrder
    winningTrades?: SortOrder
    losingTrades?: SortOrder
    winRatePct?: SortOrder
    profitFactor?: SortOrder
    expectancyPerTrade?: SortOrder
    avgTradeDuration?: SortOrder
    avgWinningTrade?: SortOrder
    avgLosingTrade?: SortOrder
    valueAtRisk95?: SortOrder
    conditionalValueAtRisk?: SortOrder
    beta?: SortOrder
    alpha?: SortOrder
    benchmarkReturnPct?: SortOrder
    outperformancePct?: SortOrder
    trackingError?: SortOrder
    informationRatio?: SortOrder
    score?: SortOrder
    openTrades?: SortOrder
    tradesPerDay?: SortOrder
    tradesPerMonth?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumPortfolioTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PortfolioType | EnumPortfolioTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PortfolioType[] | ListEnumPortfolioTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PortfolioType[] | ListEnumPortfolioTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPortfolioTypeFilter<$PrismaModel> | $Enums.PortfolioType
  }

  export type PortfolioMetricListRelationFilter = {
    every?: PortfolioMetricWhereInput
    some?: PortfolioMetricWhereInput
    none?: PortfolioMetricWhereInput
  }

  export type PortfolioMetricOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PortfolioCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    parameters?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PortfolioMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PortfolioMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPortfolioTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PortfolioType | EnumPortfolioTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PortfolioType[] | ListEnumPortfolioTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PortfolioType[] | ListEnumPortfolioTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPortfolioTypeWithAggregatesFilter<$PrismaModel> | $Enums.PortfolioType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPortfolioTypeFilter<$PrismaModel>
    _max?: NestedEnumPortfolioTypeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PortfolioRelationFilter = {
    is?: PortfolioWhereInput
    isNot?: PortfolioWhereInput
  }

  export type PortfolioStrategyPortfolioIdStrategyConfigIdCompoundUniqueInput = {
    portfolioId: string
    strategyConfigId: string
  }

  export type PortfolioStrategyCountOrderByAggregateInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    strategyConfigId?: SortOrder
    allocationPct?: SortOrder
    position?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioStrategyAvgOrderByAggregateInput = {
    allocationPct?: SortOrder
    position?: SortOrder
  }

  export type PortfolioStrategyMaxOrderByAggregateInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    strategyConfigId?: SortOrder
    allocationPct?: SortOrder
    position?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioStrategyMinOrderByAggregateInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    strategyConfigId?: SortOrder
    allocationPct?: SortOrder
    position?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioStrategySumOrderByAggregateInput = {
    allocationPct?: SortOrder
    position?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PortfolioMetricPortfolioIdMetricDateCompoundUniqueInput = {
    portfolioId: string
    metricDate: Date | string
  }

  export type PortfolioMetricCountOrderByAggregateInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    metricDate?: SortOrder
    totalReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    maxConcurrentStrategies?: SortOrder
    avgConcurrentStrategies?: SortOrder
    concurrencyRatio?: SortOrder
    efficiencyScore?: SortOrder
    portfolioVaR?: SortOrder
    diversificationRatio?: SortOrder
    riskContribution?: SortOrder
    correlationMatrix?: SortOrder
    strategyWeights?: SortOrder
    performanceAttribution?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioMetricAvgOrderByAggregateInput = {
    totalReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    maxConcurrentStrategies?: SortOrder
    avgConcurrentStrategies?: SortOrder
    concurrencyRatio?: SortOrder
    efficiencyScore?: SortOrder
    portfolioVaR?: SortOrder
    diversificationRatio?: SortOrder
  }

  export type PortfolioMetricMaxOrderByAggregateInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    metricDate?: SortOrder
    totalReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    maxConcurrentStrategies?: SortOrder
    avgConcurrentStrategies?: SortOrder
    concurrencyRatio?: SortOrder
    efficiencyScore?: SortOrder
    portfolioVaR?: SortOrder
    diversificationRatio?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioMetricMinOrderByAggregateInput = {
    id?: SortOrder
    portfolioId?: SortOrder
    metricDate?: SortOrder
    totalReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    maxConcurrentStrategies?: SortOrder
    avgConcurrentStrategies?: SortOrder
    concurrencyRatio?: SortOrder
    efficiencyScore?: SortOrder
    portfolioVaR?: SortOrder
    diversificationRatio?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioMetricSumOrderByAggregateInput = {
    totalReturnPct?: SortOrder
    sharpeRatio?: SortOrder
    sortinoRatio?: SortOrder
    maxDrawdownPct?: SortOrder
    maxConcurrentStrategies?: SortOrder
    avgConcurrentStrategies?: SortOrder
    concurrencyRatio?: SortOrder
    efficiencyScore?: SortOrder
    portfolioVaR?: SortOrder
    diversificationRatio?: SortOrder
  }

  export type EnumSignalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalType | EnumSignalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalTypeFilter<$PrismaModel> | $Enums.SignalType
  }

  export type SignalCountOrderByAggregateInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    signalType?: SortOrder
    signalDate?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    confidence?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type SignalAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    confidence?: SortOrder
  }

  export type SignalMaxOrderByAggregateInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    signalType?: SortOrder
    signalDate?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    confidence?: SortOrder
    createdAt?: SortOrder
  }

  export type SignalMinOrderByAggregateInput = {
    id?: SortOrder
    strategyConfigId?: SortOrder
    signalType?: SortOrder
    signalDate?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    confidence?: SortOrder
    createdAt?: SortOrder
  }

  export type SignalSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    confidence?: SortOrder
  }

  export type EnumSignalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalType | EnumSignalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalTypeWithAggregatesFilter<$PrismaModel> | $Enums.SignalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignalTypeFilter<$PrismaModel>
    _max?: NestedEnumSignalTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type PriceDataCreateNestedManyWithoutTickerInput = {
    create?: XOR<PriceDataCreateWithoutTickerInput, PriceDataUncheckedCreateWithoutTickerInput> | PriceDataCreateWithoutTickerInput[] | PriceDataUncheckedCreateWithoutTickerInput[]
    connectOrCreate?: PriceDataCreateOrConnectWithoutTickerInput | PriceDataCreateOrConnectWithoutTickerInput[]
    createMany?: PriceDataCreateManyTickerInputEnvelope
    connect?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
  }

  export type StrategyConfigurationCreateNestedManyWithoutTickerInput = {
    create?: XOR<StrategyConfigurationCreateWithoutTickerInput, StrategyConfigurationUncheckedCreateWithoutTickerInput> | StrategyConfigurationCreateWithoutTickerInput[] | StrategyConfigurationUncheckedCreateWithoutTickerInput[]
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutTickerInput | StrategyConfigurationCreateOrConnectWithoutTickerInput[]
    createMany?: StrategyConfigurationCreateManyTickerInputEnvelope
    connect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
  }

  export type PriceDataUncheckedCreateNestedManyWithoutTickerInput = {
    create?: XOR<PriceDataCreateWithoutTickerInput, PriceDataUncheckedCreateWithoutTickerInput> | PriceDataCreateWithoutTickerInput[] | PriceDataUncheckedCreateWithoutTickerInput[]
    connectOrCreate?: PriceDataCreateOrConnectWithoutTickerInput | PriceDataCreateOrConnectWithoutTickerInput[]
    createMany?: PriceDataCreateManyTickerInputEnvelope
    connect?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
  }

  export type StrategyConfigurationUncheckedCreateNestedManyWithoutTickerInput = {
    create?: XOR<StrategyConfigurationCreateWithoutTickerInput, StrategyConfigurationUncheckedCreateWithoutTickerInput> | StrategyConfigurationCreateWithoutTickerInput[] | StrategyConfigurationUncheckedCreateWithoutTickerInput[]
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutTickerInput | StrategyConfigurationCreateOrConnectWithoutTickerInput[]
    createMany?: StrategyConfigurationCreateManyTickerInputEnvelope
    connect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumAssetClassFieldUpdateOperationsInput = {
    set?: $Enums.AssetClass
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PriceDataUpdateManyWithoutTickerNestedInput = {
    create?: XOR<PriceDataCreateWithoutTickerInput, PriceDataUncheckedCreateWithoutTickerInput> | PriceDataCreateWithoutTickerInput[] | PriceDataUncheckedCreateWithoutTickerInput[]
    connectOrCreate?: PriceDataCreateOrConnectWithoutTickerInput | PriceDataCreateOrConnectWithoutTickerInput[]
    upsert?: PriceDataUpsertWithWhereUniqueWithoutTickerInput | PriceDataUpsertWithWhereUniqueWithoutTickerInput[]
    createMany?: PriceDataCreateManyTickerInputEnvelope
    set?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
    disconnect?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
    delete?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
    connect?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
    update?: PriceDataUpdateWithWhereUniqueWithoutTickerInput | PriceDataUpdateWithWhereUniqueWithoutTickerInput[]
    updateMany?: PriceDataUpdateManyWithWhereWithoutTickerInput | PriceDataUpdateManyWithWhereWithoutTickerInput[]
    deleteMany?: PriceDataScalarWhereInput | PriceDataScalarWhereInput[]
  }

  export type StrategyConfigurationUpdateManyWithoutTickerNestedInput = {
    create?: XOR<StrategyConfigurationCreateWithoutTickerInput, StrategyConfigurationUncheckedCreateWithoutTickerInput> | StrategyConfigurationCreateWithoutTickerInput[] | StrategyConfigurationUncheckedCreateWithoutTickerInput[]
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutTickerInput | StrategyConfigurationCreateOrConnectWithoutTickerInput[]
    upsert?: StrategyConfigurationUpsertWithWhereUniqueWithoutTickerInput | StrategyConfigurationUpsertWithWhereUniqueWithoutTickerInput[]
    createMany?: StrategyConfigurationCreateManyTickerInputEnvelope
    set?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    disconnect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    delete?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    connect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    update?: StrategyConfigurationUpdateWithWhereUniqueWithoutTickerInput | StrategyConfigurationUpdateWithWhereUniqueWithoutTickerInput[]
    updateMany?: StrategyConfigurationUpdateManyWithWhereWithoutTickerInput | StrategyConfigurationUpdateManyWithWhereWithoutTickerInput[]
    deleteMany?: StrategyConfigurationScalarWhereInput | StrategyConfigurationScalarWhereInput[]
  }

  export type PriceDataUncheckedUpdateManyWithoutTickerNestedInput = {
    create?: XOR<PriceDataCreateWithoutTickerInput, PriceDataUncheckedCreateWithoutTickerInput> | PriceDataCreateWithoutTickerInput[] | PriceDataUncheckedCreateWithoutTickerInput[]
    connectOrCreate?: PriceDataCreateOrConnectWithoutTickerInput | PriceDataCreateOrConnectWithoutTickerInput[]
    upsert?: PriceDataUpsertWithWhereUniqueWithoutTickerInput | PriceDataUpsertWithWhereUniqueWithoutTickerInput[]
    createMany?: PriceDataCreateManyTickerInputEnvelope
    set?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
    disconnect?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
    delete?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
    connect?: PriceDataWhereUniqueInput | PriceDataWhereUniqueInput[]
    update?: PriceDataUpdateWithWhereUniqueWithoutTickerInput | PriceDataUpdateWithWhereUniqueWithoutTickerInput[]
    updateMany?: PriceDataUpdateManyWithWhereWithoutTickerInput | PriceDataUpdateManyWithWhereWithoutTickerInput[]
    deleteMany?: PriceDataScalarWhereInput | PriceDataScalarWhereInput[]
  }

  export type StrategyConfigurationUncheckedUpdateManyWithoutTickerNestedInput = {
    create?: XOR<StrategyConfigurationCreateWithoutTickerInput, StrategyConfigurationUncheckedCreateWithoutTickerInput> | StrategyConfigurationCreateWithoutTickerInput[] | StrategyConfigurationUncheckedCreateWithoutTickerInput[]
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutTickerInput | StrategyConfigurationCreateOrConnectWithoutTickerInput[]
    upsert?: StrategyConfigurationUpsertWithWhereUniqueWithoutTickerInput | StrategyConfigurationUpsertWithWhereUniqueWithoutTickerInput[]
    createMany?: StrategyConfigurationCreateManyTickerInputEnvelope
    set?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    disconnect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    delete?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    connect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    update?: StrategyConfigurationUpdateWithWhereUniqueWithoutTickerInput | StrategyConfigurationUpdateWithWhereUniqueWithoutTickerInput[]
    updateMany?: StrategyConfigurationUpdateManyWithWhereWithoutTickerInput | StrategyConfigurationUpdateManyWithWhereWithoutTickerInput[]
    deleteMany?: StrategyConfigurationScalarWhereInput | StrategyConfigurationScalarWhereInput[]
  }

  export type TickerCreateNestedOneWithoutPriceDataInput = {
    create?: XOR<TickerCreateWithoutPriceDataInput, TickerUncheckedCreateWithoutPriceDataInput>
    connectOrCreate?: TickerCreateOrConnectWithoutPriceDataInput
    connect?: TickerWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type TickerUpdateOneRequiredWithoutPriceDataNestedInput = {
    create?: XOR<TickerCreateWithoutPriceDataInput, TickerUncheckedCreateWithoutPriceDataInput>
    connectOrCreate?: TickerCreateOrConnectWithoutPriceDataInput
    upsert?: TickerUpsertWithoutPriceDataInput
    connect?: TickerWhereUniqueInput
    update?: XOR<XOR<TickerUpdateToOneWithWhereWithoutPriceDataInput, TickerUpdateWithoutPriceDataInput>, TickerUncheckedUpdateWithoutPriceDataInput>
  }

  export type StrategyConfigurationCreateNestedManyWithoutStrategyInput = {
    create?: XOR<StrategyConfigurationCreateWithoutStrategyInput, StrategyConfigurationUncheckedCreateWithoutStrategyInput> | StrategyConfigurationCreateWithoutStrategyInput[] | StrategyConfigurationUncheckedCreateWithoutStrategyInput[]
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutStrategyInput | StrategyConfigurationCreateOrConnectWithoutStrategyInput[]
    createMany?: StrategyConfigurationCreateManyStrategyInputEnvelope
    connect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
  }

  export type StrategyConfigurationUncheckedCreateNestedManyWithoutStrategyInput = {
    create?: XOR<StrategyConfigurationCreateWithoutStrategyInput, StrategyConfigurationUncheckedCreateWithoutStrategyInput> | StrategyConfigurationCreateWithoutStrategyInput[] | StrategyConfigurationUncheckedCreateWithoutStrategyInput[]
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutStrategyInput | StrategyConfigurationCreateOrConnectWithoutStrategyInput[]
    createMany?: StrategyConfigurationCreateManyStrategyInputEnvelope
    connect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
  }

  export type EnumStrategyTypeFieldUpdateOperationsInput = {
    set?: $Enums.StrategyType
  }

  export type StrategyConfigurationUpdateManyWithoutStrategyNestedInput = {
    create?: XOR<StrategyConfigurationCreateWithoutStrategyInput, StrategyConfigurationUncheckedCreateWithoutStrategyInput> | StrategyConfigurationCreateWithoutStrategyInput[] | StrategyConfigurationUncheckedCreateWithoutStrategyInput[]
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutStrategyInput | StrategyConfigurationCreateOrConnectWithoutStrategyInput[]
    upsert?: StrategyConfigurationUpsertWithWhereUniqueWithoutStrategyInput | StrategyConfigurationUpsertWithWhereUniqueWithoutStrategyInput[]
    createMany?: StrategyConfigurationCreateManyStrategyInputEnvelope
    set?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    disconnect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    delete?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    connect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    update?: StrategyConfigurationUpdateWithWhereUniqueWithoutStrategyInput | StrategyConfigurationUpdateWithWhereUniqueWithoutStrategyInput[]
    updateMany?: StrategyConfigurationUpdateManyWithWhereWithoutStrategyInput | StrategyConfigurationUpdateManyWithWhereWithoutStrategyInput[]
    deleteMany?: StrategyConfigurationScalarWhereInput | StrategyConfigurationScalarWhereInput[]
  }

  export type StrategyConfigurationUncheckedUpdateManyWithoutStrategyNestedInput = {
    create?: XOR<StrategyConfigurationCreateWithoutStrategyInput, StrategyConfigurationUncheckedCreateWithoutStrategyInput> | StrategyConfigurationCreateWithoutStrategyInput[] | StrategyConfigurationUncheckedCreateWithoutStrategyInput[]
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutStrategyInput | StrategyConfigurationCreateOrConnectWithoutStrategyInput[]
    upsert?: StrategyConfigurationUpsertWithWhereUniqueWithoutStrategyInput | StrategyConfigurationUpsertWithWhereUniqueWithoutStrategyInput[]
    createMany?: StrategyConfigurationCreateManyStrategyInputEnvelope
    set?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    disconnect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    delete?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    connect?: StrategyConfigurationWhereUniqueInput | StrategyConfigurationWhereUniqueInput[]
    update?: StrategyConfigurationUpdateWithWhereUniqueWithoutStrategyInput | StrategyConfigurationUpdateWithWhereUniqueWithoutStrategyInput[]
    updateMany?: StrategyConfigurationUpdateManyWithWhereWithoutStrategyInput | StrategyConfigurationUpdateManyWithWhereWithoutStrategyInput[]
    deleteMany?: StrategyConfigurationScalarWhereInput | StrategyConfigurationScalarWhereInput[]
  }

  export type StrategyCreateNestedOneWithoutConfigurationsInput = {
    create?: XOR<StrategyCreateWithoutConfigurationsInput, StrategyUncheckedCreateWithoutConfigurationsInput>
    connectOrCreate?: StrategyCreateOrConnectWithoutConfigurationsInput
    connect?: StrategyWhereUniqueInput
  }

  export type TickerCreateNestedOneWithoutStrategyConfigsInput = {
    create?: XOR<TickerCreateWithoutStrategyConfigsInput, TickerUncheckedCreateWithoutStrategyConfigsInput>
    connectOrCreate?: TickerCreateOrConnectWithoutStrategyConfigsInput
    connect?: TickerWhereUniqueInput
  }

  export type BacktestResultCreateNestedManyWithoutStrategyConfigInput = {
    create?: XOR<BacktestResultCreateWithoutStrategyConfigInput, BacktestResultUncheckedCreateWithoutStrategyConfigInput> | BacktestResultCreateWithoutStrategyConfigInput[] | BacktestResultUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: BacktestResultCreateOrConnectWithoutStrategyConfigInput | BacktestResultCreateOrConnectWithoutStrategyConfigInput[]
    createMany?: BacktestResultCreateManyStrategyConfigInputEnvelope
    connect?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
  }

  export type PortfolioStrategyCreateNestedManyWithoutStrategyConfigInput = {
    create?: XOR<PortfolioStrategyCreateWithoutStrategyConfigInput, PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput> | PortfolioStrategyCreateWithoutStrategyConfigInput[] | PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput | PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput[]
    createMany?: PortfolioStrategyCreateManyStrategyConfigInputEnvelope
    connect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
  }

  export type SignalCreateNestedManyWithoutStrategyConfigInput = {
    create?: XOR<SignalCreateWithoutStrategyConfigInput, SignalUncheckedCreateWithoutStrategyConfigInput> | SignalCreateWithoutStrategyConfigInput[] | SignalUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: SignalCreateOrConnectWithoutStrategyConfigInput | SignalCreateOrConnectWithoutStrategyConfigInput[]
    createMany?: SignalCreateManyStrategyConfigInputEnvelope
    connect?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
  }

  export type BacktestResultUncheckedCreateNestedManyWithoutStrategyConfigInput = {
    create?: XOR<BacktestResultCreateWithoutStrategyConfigInput, BacktestResultUncheckedCreateWithoutStrategyConfigInput> | BacktestResultCreateWithoutStrategyConfigInput[] | BacktestResultUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: BacktestResultCreateOrConnectWithoutStrategyConfigInput | BacktestResultCreateOrConnectWithoutStrategyConfigInput[]
    createMany?: BacktestResultCreateManyStrategyConfigInputEnvelope
    connect?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
  }

  export type PortfolioStrategyUncheckedCreateNestedManyWithoutStrategyConfigInput = {
    create?: XOR<PortfolioStrategyCreateWithoutStrategyConfigInput, PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput> | PortfolioStrategyCreateWithoutStrategyConfigInput[] | PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput | PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput[]
    createMany?: PortfolioStrategyCreateManyStrategyConfigInputEnvelope
    connect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
  }

  export type SignalUncheckedCreateNestedManyWithoutStrategyConfigInput = {
    create?: XOR<SignalCreateWithoutStrategyConfigInput, SignalUncheckedCreateWithoutStrategyConfigInput> | SignalCreateWithoutStrategyConfigInput[] | SignalUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: SignalCreateOrConnectWithoutStrategyConfigInput | SignalCreateOrConnectWithoutStrategyConfigInput[]
    createMany?: SignalCreateManyStrategyConfigInputEnvelope
    connect?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
  }

  export type EnumTimeframeTypeFieldUpdateOperationsInput = {
    set?: $Enums.TimeframeType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumDirectionTypeFieldUpdateOperationsInput = {
    set?: $Enums.DirectionType
  }

  export type StrategyUpdateOneRequiredWithoutConfigurationsNestedInput = {
    create?: XOR<StrategyCreateWithoutConfigurationsInput, StrategyUncheckedCreateWithoutConfigurationsInput>
    connectOrCreate?: StrategyCreateOrConnectWithoutConfigurationsInput
    upsert?: StrategyUpsertWithoutConfigurationsInput
    connect?: StrategyWhereUniqueInput
    update?: XOR<XOR<StrategyUpdateToOneWithWhereWithoutConfigurationsInput, StrategyUpdateWithoutConfigurationsInput>, StrategyUncheckedUpdateWithoutConfigurationsInput>
  }

  export type TickerUpdateOneRequiredWithoutStrategyConfigsNestedInput = {
    create?: XOR<TickerCreateWithoutStrategyConfigsInput, TickerUncheckedCreateWithoutStrategyConfigsInput>
    connectOrCreate?: TickerCreateOrConnectWithoutStrategyConfigsInput
    upsert?: TickerUpsertWithoutStrategyConfigsInput
    connect?: TickerWhereUniqueInput
    update?: XOR<XOR<TickerUpdateToOneWithWhereWithoutStrategyConfigsInput, TickerUpdateWithoutStrategyConfigsInput>, TickerUncheckedUpdateWithoutStrategyConfigsInput>
  }

  export type BacktestResultUpdateManyWithoutStrategyConfigNestedInput = {
    create?: XOR<BacktestResultCreateWithoutStrategyConfigInput, BacktestResultUncheckedCreateWithoutStrategyConfigInput> | BacktestResultCreateWithoutStrategyConfigInput[] | BacktestResultUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: BacktestResultCreateOrConnectWithoutStrategyConfigInput | BacktestResultCreateOrConnectWithoutStrategyConfigInput[]
    upsert?: BacktestResultUpsertWithWhereUniqueWithoutStrategyConfigInput | BacktestResultUpsertWithWhereUniqueWithoutStrategyConfigInput[]
    createMany?: BacktestResultCreateManyStrategyConfigInputEnvelope
    set?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
    disconnect?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
    delete?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
    connect?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
    update?: BacktestResultUpdateWithWhereUniqueWithoutStrategyConfigInput | BacktestResultUpdateWithWhereUniqueWithoutStrategyConfigInput[]
    updateMany?: BacktestResultUpdateManyWithWhereWithoutStrategyConfigInput | BacktestResultUpdateManyWithWhereWithoutStrategyConfigInput[]
    deleteMany?: BacktestResultScalarWhereInput | BacktestResultScalarWhereInput[]
  }

  export type PortfolioStrategyUpdateManyWithoutStrategyConfigNestedInput = {
    create?: XOR<PortfolioStrategyCreateWithoutStrategyConfigInput, PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput> | PortfolioStrategyCreateWithoutStrategyConfigInput[] | PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput | PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput[]
    upsert?: PortfolioStrategyUpsertWithWhereUniqueWithoutStrategyConfigInput | PortfolioStrategyUpsertWithWhereUniqueWithoutStrategyConfigInput[]
    createMany?: PortfolioStrategyCreateManyStrategyConfigInputEnvelope
    set?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    disconnect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    delete?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    connect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    update?: PortfolioStrategyUpdateWithWhereUniqueWithoutStrategyConfigInput | PortfolioStrategyUpdateWithWhereUniqueWithoutStrategyConfigInput[]
    updateMany?: PortfolioStrategyUpdateManyWithWhereWithoutStrategyConfigInput | PortfolioStrategyUpdateManyWithWhereWithoutStrategyConfigInput[]
    deleteMany?: PortfolioStrategyScalarWhereInput | PortfolioStrategyScalarWhereInput[]
  }

  export type SignalUpdateManyWithoutStrategyConfigNestedInput = {
    create?: XOR<SignalCreateWithoutStrategyConfigInput, SignalUncheckedCreateWithoutStrategyConfigInput> | SignalCreateWithoutStrategyConfigInput[] | SignalUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: SignalCreateOrConnectWithoutStrategyConfigInput | SignalCreateOrConnectWithoutStrategyConfigInput[]
    upsert?: SignalUpsertWithWhereUniqueWithoutStrategyConfigInput | SignalUpsertWithWhereUniqueWithoutStrategyConfigInput[]
    createMany?: SignalCreateManyStrategyConfigInputEnvelope
    set?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
    disconnect?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
    delete?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
    connect?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
    update?: SignalUpdateWithWhereUniqueWithoutStrategyConfigInput | SignalUpdateWithWhereUniqueWithoutStrategyConfigInput[]
    updateMany?: SignalUpdateManyWithWhereWithoutStrategyConfigInput | SignalUpdateManyWithWhereWithoutStrategyConfigInput[]
    deleteMany?: SignalScalarWhereInput | SignalScalarWhereInput[]
  }

  export type BacktestResultUncheckedUpdateManyWithoutStrategyConfigNestedInput = {
    create?: XOR<BacktestResultCreateWithoutStrategyConfigInput, BacktestResultUncheckedCreateWithoutStrategyConfigInput> | BacktestResultCreateWithoutStrategyConfigInput[] | BacktestResultUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: BacktestResultCreateOrConnectWithoutStrategyConfigInput | BacktestResultCreateOrConnectWithoutStrategyConfigInput[]
    upsert?: BacktestResultUpsertWithWhereUniqueWithoutStrategyConfigInput | BacktestResultUpsertWithWhereUniqueWithoutStrategyConfigInput[]
    createMany?: BacktestResultCreateManyStrategyConfigInputEnvelope
    set?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
    disconnect?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
    delete?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
    connect?: BacktestResultWhereUniqueInput | BacktestResultWhereUniqueInput[]
    update?: BacktestResultUpdateWithWhereUniqueWithoutStrategyConfigInput | BacktestResultUpdateWithWhereUniqueWithoutStrategyConfigInput[]
    updateMany?: BacktestResultUpdateManyWithWhereWithoutStrategyConfigInput | BacktestResultUpdateManyWithWhereWithoutStrategyConfigInput[]
    deleteMany?: BacktestResultScalarWhereInput | BacktestResultScalarWhereInput[]
  }

  export type PortfolioStrategyUncheckedUpdateManyWithoutStrategyConfigNestedInput = {
    create?: XOR<PortfolioStrategyCreateWithoutStrategyConfigInput, PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput> | PortfolioStrategyCreateWithoutStrategyConfigInput[] | PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput | PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput[]
    upsert?: PortfolioStrategyUpsertWithWhereUniqueWithoutStrategyConfigInput | PortfolioStrategyUpsertWithWhereUniqueWithoutStrategyConfigInput[]
    createMany?: PortfolioStrategyCreateManyStrategyConfigInputEnvelope
    set?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    disconnect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    delete?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    connect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    update?: PortfolioStrategyUpdateWithWhereUniqueWithoutStrategyConfigInput | PortfolioStrategyUpdateWithWhereUniqueWithoutStrategyConfigInput[]
    updateMany?: PortfolioStrategyUpdateManyWithWhereWithoutStrategyConfigInput | PortfolioStrategyUpdateManyWithWhereWithoutStrategyConfigInput[]
    deleteMany?: PortfolioStrategyScalarWhereInput | PortfolioStrategyScalarWhereInput[]
  }

  export type SignalUncheckedUpdateManyWithoutStrategyConfigNestedInput = {
    create?: XOR<SignalCreateWithoutStrategyConfigInput, SignalUncheckedCreateWithoutStrategyConfigInput> | SignalCreateWithoutStrategyConfigInput[] | SignalUncheckedCreateWithoutStrategyConfigInput[]
    connectOrCreate?: SignalCreateOrConnectWithoutStrategyConfigInput | SignalCreateOrConnectWithoutStrategyConfigInput[]
    upsert?: SignalUpsertWithWhereUniqueWithoutStrategyConfigInput | SignalUpsertWithWhereUniqueWithoutStrategyConfigInput[]
    createMany?: SignalCreateManyStrategyConfigInputEnvelope
    set?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
    disconnect?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
    delete?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
    connect?: SignalWhereUniqueInput | SignalWhereUniqueInput[]
    update?: SignalUpdateWithWhereUniqueWithoutStrategyConfigInput | SignalUpdateWithWhereUniqueWithoutStrategyConfigInput[]
    updateMany?: SignalUpdateManyWithWhereWithoutStrategyConfigInput | SignalUpdateManyWithWhereWithoutStrategyConfigInput[]
    deleteMany?: SignalScalarWhereInput | SignalScalarWhereInput[]
  }

  export type StrategyConfigurationCreateNestedOneWithoutBacktestResultsInput = {
    create?: XOR<StrategyConfigurationCreateWithoutBacktestResultsInput, StrategyConfigurationUncheckedCreateWithoutBacktestResultsInput>
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutBacktestResultsInput
    connect?: StrategyConfigurationWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StrategyConfigurationUpdateOneRequiredWithoutBacktestResultsNestedInput = {
    create?: XOR<StrategyConfigurationCreateWithoutBacktestResultsInput, StrategyConfigurationUncheckedCreateWithoutBacktestResultsInput>
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutBacktestResultsInput
    upsert?: StrategyConfigurationUpsertWithoutBacktestResultsInput
    connect?: StrategyConfigurationWhereUniqueInput
    update?: XOR<XOR<StrategyConfigurationUpdateToOneWithWhereWithoutBacktestResultsInput, StrategyConfigurationUpdateWithoutBacktestResultsInput>, StrategyConfigurationUncheckedUpdateWithoutBacktestResultsInput>
  }

  export type PortfolioStrategyCreateNestedManyWithoutPortfolioInput = {
    create?: XOR<PortfolioStrategyCreateWithoutPortfolioInput, PortfolioStrategyUncheckedCreateWithoutPortfolioInput> | PortfolioStrategyCreateWithoutPortfolioInput[] | PortfolioStrategyUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: PortfolioStrategyCreateOrConnectWithoutPortfolioInput | PortfolioStrategyCreateOrConnectWithoutPortfolioInput[]
    createMany?: PortfolioStrategyCreateManyPortfolioInputEnvelope
    connect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
  }

  export type PortfolioMetricCreateNestedManyWithoutPortfolioInput = {
    create?: XOR<PortfolioMetricCreateWithoutPortfolioInput, PortfolioMetricUncheckedCreateWithoutPortfolioInput> | PortfolioMetricCreateWithoutPortfolioInput[] | PortfolioMetricUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: PortfolioMetricCreateOrConnectWithoutPortfolioInput | PortfolioMetricCreateOrConnectWithoutPortfolioInput[]
    createMany?: PortfolioMetricCreateManyPortfolioInputEnvelope
    connect?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
  }

  export type PortfolioStrategyUncheckedCreateNestedManyWithoutPortfolioInput = {
    create?: XOR<PortfolioStrategyCreateWithoutPortfolioInput, PortfolioStrategyUncheckedCreateWithoutPortfolioInput> | PortfolioStrategyCreateWithoutPortfolioInput[] | PortfolioStrategyUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: PortfolioStrategyCreateOrConnectWithoutPortfolioInput | PortfolioStrategyCreateOrConnectWithoutPortfolioInput[]
    createMany?: PortfolioStrategyCreateManyPortfolioInputEnvelope
    connect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
  }

  export type PortfolioMetricUncheckedCreateNestedManyWithoutPortfolioInput = {
    create?: XOR<PortfolioMetricCreateWithoutPortfolioInput, PortfolioMetricUncheckedCreateWithoutPortfolioInput> | PortfolioMetricCreateWithoutPortfolioInput[] | PortfolioMetricUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: PortfolioMetricCreateOrConnectWithoutPortfolioInput | PortfolioMetricCreateOrConnectWithoutPortfolioInput[]
    createMany?: PortfolioMetricCreateManyPortfolioInputEnvelope
    connect?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
  }

  export type EnumPortfolioTypeFieldUpdateOperationsInput = {
    set?: $Enums.PortfolioType
  }

  export type PortfolioStrategyUpdateManyWithoutPortfolioNestedInput = {
    create?: XOR<PortfolioStrategyCreateWithoutPortfolioInput, PortfolioStrategyUncheckedCreateWithoutPortfolioInput> | PortfolioStrategyCreateWithoutPortfolioInput[] | PortfolioStrategyUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: PortfolioStrategyCreateOrConnectWithoutPortfolioInput | PortfolioStrategyCreateOrConnectWithoutPortfolioInput[]
    upsert?: PortfolioStrategyUpsertWithWhereUniqueWithoutPortfolioInput | PortfolioStrategyUpsertWithWhereUniqueWithoutPortfolioInput[]
    createMany?: PortfolioStrategyCreateManyPortfolioInputEnvelope
    set?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    disconnect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    delete?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    connect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    update?: PortfolioStrategyUpdateWithWhereUniqueWithoutPortfolioInput | PortfolioStrategyUpdateWithWhereUniqueWithoutPortfolioInput[]
    updateMany?: PortfolioStrategyUpdateManyWithWhereWithoutPortfolioInput | PortfolioStrategyUpdateManyWithWhereWithoutPortfolioInput[]
    deleteMany?: PortfolioStrategyScalarWhereInput | PortfolioStrategyScalarWhereInput[]
  }

  export type PortfolioMetricUpdateManyWithoutPortfolioNestedInput = {
    create?: XOR<PortfolioMetricCreateWithoutPortfolioInput, PortfolioMetricUncheckedCreateWithoutPortfolioInput> | PortfolioMetricCreateWithoutPortfolioInput[] | PortfolioMetricUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: PortfolioMetricCreateOrConnectWithoutPortfolioInput | PortfolioMetricCreateOrConnectWithoutPortfolioInput[]
    upsert?: PortfolioMetricUpsertWithWhereUniqueWithoutPortfolioInput | PortfolioMetricUpsertWithWhereUniqueWithoutPortfolioInput[]
    createMany?: PortfolioMetricCreateManyPortfolioInputEnvelope
    set?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
    disconnect?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
    delete?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
    connect?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
    update?: PortfolioMetricUpdateWithWhereUniqueWithoutPortfolioInput | PortfolioMetricUpdateWithWhereUniqueWithoutPortfolioInput[]
    updateMany?: PortfolioMetricUpdateManyWithWhereWithoutPortfolioInput | PortfolioMetricUpdateManyWithWhereWithoutPortfolioInput[]
    deleteMany?: PortfolioMetricScalarWhereInput | PortfolioMetricScalarWhereInput[]
  }

  export type PortfolioStrategyUncheckedUpdateManyWithoutPortfolioNestedInput = {
    create?: XOR<PortfolioStrategyCreateWithoutPortfolioInput, PortfolioStrategyUncheckedCreateWithoutPortfolioInput> | PortfolioStrategyCreateWithoutPortfolioInput[] | PortfolioStrategyUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: PortfolioStrategyCreateOrConnectWithoutPortfolioInput | PortfolioStrategyCreateOrConnectWithoutPortfolioInput[]
    upsert?: PortfolioStrategyUpsertWithWhereUniqueWithoutPortfolioInput | PortfolioStrategyUpsertWithWhereUniqueWithoutPortfolioInput[]
    createMany?: PortfolioStrategyCreateManyPortfolioInputEnvelope
    set?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    disconnect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    delete?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    connect?: PortfolioStrategyWhereUniqueInput | PortfolioStrategyWhereUniqueInput[]
    update?: PortfolioStrategyUpdateWithWhereUniqueWithoutPortfolioInput | PortfolioStrategyUpdateWithWhereUniqueWithoutPortfolioInput[]
    updateMany?: PortfolioStrategyUpdateManyWithWhereWithoutPortfolioInput | PortfolioStrategyUpdateManyWithWhereWithoutPortfolioInput[]
    deleteMany?: PortfolioStrategyScalarWhereInput | PortfolioStrategyScalarWhereInput[]
  }

  export type PortfolioMetricUncheckedUpdateManyWithoutPortfolioNestedInput = {
    create?: XOR<PortfolioMetricCreateWithoutPortfolioInput, PortfolioMetricUncheckedCreateWithoutPortfolioInput> | PortfolioMetricCreateWithoutPortfolioInput[] | PortfolioMetricUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: PortfolioMetricCreateOrConnectWithoutPortfolioInput | PortfolioMetricCreateOrConnectWithoutPortfolioInput[]
    upsert?: PortfolioMetricUpsertWithWhereUniqueWithoutPortfolioInput | PortfolioMetricUpsertWithWhereUniqueWithoutPortfolioInput[]
    createMany?: PortfolioMetricCreateManyPortfolioInputEnvelope
    set?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
    disconnect?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
    delete?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
    connect?: PortfolioMetricWhereUniqueInput | PortfolioMetricWhereUniqueInput[]
    update?: PortfolioMetricUpdateWithWhereUniqueWithoutPortfolioInput | PortfolioMetricUpdateWithWhereUniqueWithoutPortfolioInput[]
    updateMany?: PortfolioMetricUpdateManyWithWhereWithoutPortfolioInput | PortfolioMetricUpdateManyWithWhereWithoutPortfolioInput[]
    deleteMany?: PortfolioMetricScalarWhereInput | PortfolioMetricScalarWhereInput[]
  }

  export type PortfolioCreateNestedOneWithoutStrategiesInput = {
    create?: XOR<PortfolioCreateWithoutStrategiesInput, PortfolioUncheckedCreateWithoutStrategiesInput>
    connectOrCreate?: PortfolioCreateOrConnectWithoutStrategiesInput
    connect?: PortfolioWhereUniqueInput
  }

  export type StrategyConfigurationCreateNestedOneWithoutPortfolioItemsInput = {
    create?: XOR<StrategyConfigurationCreateWithoutPortfolioItemsInput, StrategyConfigurationUncheckedCreateWithoutPortfolioItemsInput>
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutPortfolioItemsInput
    connect?: StrategyConfigurationWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PortfolioUpdateOneRequiredWithoutStrategiesNestedInput = {
    create?: XOR<PortfolioCreateWithoutStrategiesInput, PortfolioUncheckedCreateWithoutStrategiesInput>
    connectOrCreate?: PortfolioCreateOrConnectWithoutStrategiesInput
    upsert?: PortfolioUpsertWithoutStrategiesInput
    connect?: PortfolioWhereUniqueInput
    update?: XOR<XOR<PortfolioUpdateToOneWithWhereWithoutStrategiesInput, PortfolioUpdateWithoutStrategiesInput>, PortfolioUncheckedUpdateWithoutStrategiesInput>
  }

  export type StrategyConfigurationUpdateOneRequiredWithoutPortfolioItemsNestedInput = {
    create?: XOR<StrategyConfigurationCreateWithoutPortfolioItemsInput, StrategyConfigurationUncheckedCreateWithoutPortfolioItemsInput>
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutPortfolioItemsInput
    upsert?: StrategyConfigurationUpsertWithoutPortfolioItemsInput
    connect?: StrategyConfigurationWhereUniqueInput
    update?: XOR<XOR<StrategyConfigurationUpdateToOneWithWhereWithoutPortfolioItemsInput, StrategyConfigurationUpdateWithoutPortfolioItemsInput>, StrategyConfigurationUncheckedUpdateWithoutPortfolioItemsInput>
  }

  export type PortfolioCreateNestedOneWithoutMetricsInput = {
    create?: XOR<PortfolioCreateWithoutMetricsInput, PortfolioUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: PortfolioCreateOrConnectWithoutMetricsInput
    connect?: PortfolioWhereUniqueInput
  }

  export type PortfolioUpdateOneRequiredWithoutMetricsNestedInput = {
    create?: XOR<PortfolioCreateWithoutMetricsInput, PortfolioUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: PortfolioCreateOrConnectWithoutMetricsInput
    upsert?: PortfolioUpsertWithoutMetricsInput
    connect?: PortfolioWhereUniqueInput
    update?: XOR<XOR<PortfolioUpdateToOneWithWhereWithoutMetricsInput, PortfolioUpdateWithoutMetricsInput>, PortfolioUncheckedUpdateWithoutMetricsInput>
  }

  export type StrategyConfigurationCreateNestedOneWithoutSignalsInput = {
    create?: XOR<StrategyConfigurationCreateWithoutSignalsInput, StrategyConfigurationUncheckedCreateWithoutSignalsInput>
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutSignalsInput
    connect?: StrategyConfigurationWhereUniqueInput
  }

  export type EnumSignalTypeFieldUpdateOperationsInput = {
    set?: $Enums.SignalType
  }

  export type StrategyConfigurationUpdateOneRequiredWithoutSignalsNestedInput = {
    create?: XOR<StrategyConfigurationCreateWithoutSignalsInput, StrategyConfigurationUncheckedCreateWithoutSignalsInput>
    connectOrCreate?: StrategyConfigurationCreateOrConnectWithoutSignalsInput
    upsert?: StrategyConfigurationUpsertWithoutSignalsInput
    connect?: StrategyConfigurationWhereUniqueInput
    update?: XOR<XOR<StrategyConfigurationUpdateToOneWithWhereWithoutSignalsInput, StrategyConfigurationUpdateWithoutSignalsInput>, StrategyConfigurationUncheckedUpdateWithoutSignalsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumAssetClassFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetClass | EnumAssetClassFieldRefInput<$PrismaModel>
    in?: $Enums.AssetClass[] | ListEnumAssetClassFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetClass[] | ListEnumAssetClassFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetClassFilter<$PrismaModel> | $Enums.AssetClass
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAssetClassWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetClass | EnumAssetClassFieldRefInput<$PrismaModel>
    in?: $Enums.AssetClass[] | ListEnumAssetClassFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetClass[] | ListEnumAssetClassFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetClassWithAggregatesFilter<$PrismaModel> | $Enums.AssetClass
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetClassFilter<$PrismaModel>
    _max?: NestedEnumAssetClassFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumStrategyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StrategyType | EnumStrategyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StrategyType[] | ListEnumStrategyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StrategyType[] | ListEnumStrategyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStrategyTypeFilter<$PrismaModel> | $Enums.StrategyType
  }

  export type NestedEnumStrategyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StrategyType | EnumStrategyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StrategyType[] | ListEnumStrategyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StrategyType[] | ListEnumStrategyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStrategyTypeWithAggregatesFilter<$PrismaModel> | $Enums.StrategyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStrategyTypeFilter<$PrismaModel>
    _max?: NestedEnumStrategyTypeFilter<$PrismaModel>
  }

  export type NestedEnumTimeframeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TimeframeType | EnumTimeframeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TimeframeType[] | ListEnumTimeframeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TimeframeType[] | ListEnumTimeframeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTimeframeTypeFilter<$PrismaModel> | $Enums.TimeframeType
  }

  export type NestedEnumDirectionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionType | EnumDirectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionType[] | ListEnumDirectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DirectionType[] | ListEnumDirectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDirectionTypeFilter<$PrismaModel> | $Enums.DirectionType
  }

  export type NestedEnumTimeframeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TimeframeType | EnumTimeframeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TimeframeType[] | ListEnumTimeframeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TimeframeType[] | ListEnumTimeframeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTimeframeTypeWithAggregatesFilter<$PrismaModel> | $Enums.TimeframeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTimeframeTypeFilter<$PrismaModel>
    _max?: NestedEnumTimeframeTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumDirectionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DirectionType | EnumDirectionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DirectionType[] | ListEnumDirectionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DirectionType[] | ListEnumDirectionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDirectionTypeWithAggregatesFilter<$PrismaModel> | $Enums.DirectionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDirectionTypeFilter<$PrismaModel>
    _max?: NestedEnumDirectionTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPortfolioTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PortfolioType | EnumPortfolioTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PortfolioType[] | ListEnumPortfolioTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PortfolioType[] | ListEnumPortfolioTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPortfolioTypeFilter<$PrismaModel> | $Enums.PortfolioType
  }

  export type NestedEnumPortfolioTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PortfolioType | EnumPortfolioTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PortfolioType[] | ListEnumPortfolioTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PortfolioType[] | ListEnumPortfolioTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPortfolioTypeWithAggregatesFilter<$PrismaModel> | $Enums.PortfolioType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPortfolioTypeFilter<$PrismaModel>
    _max?: NestedEnumPortfolioTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumSignalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalType | EnumSignalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalTypeFilter<$PrismaModel> | $Enums.SignalType
  }

  export type NestedEnumSignalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignalType | EnumSignalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SignalType[] | ListEnumSignalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSignalTypeWithAggregatesFilter<$PrismaModel> | $Enums.SignalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignalTypeFilter<$PrismaModel>
    _max?: NestedEnumSignalTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PriceDataCreateWithoutTickerInput = {
    id?: string
    date: Date | string
    open: Decimal | DecimalJsLike | number | string
    high: Decimal | DecimalJsLike | number | string
    low: Decimal | DecimalJsLike | number | string
    close: Decimal | DecimalJsLike | number | string
    volume?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type PriceDataUncheckedCreateWithoutTickerInput = {
    id?: string
    date: Date | string
    open: Decimal | DecimalJsLike | number | string
    high: Decimal | DecimalJsLike | number | string
    low: Decimal | DecimalJsLike | number | string
    close: Decimal | DecimalJsLike | number | string
    volume?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type PriceDataCreateOrConnectWithoutTickerInput = {
    where: PriceDataWhereUniqueInput
    create: XOR<PriceDataCreateWithoutTickerInput, PriceDataUncheckedCreateWithoutTickerInput>
  }

  export type PriceDataCreateManyTickerInputEnvelope = {
    data: PriceDataCreateManyTickerInput | PriceDataCreateManyTickerInput[]
    skipDuplicates?: boolean
  }

  export type StrategyConfigurationCreateWithoutTickerInput = {
    id?: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategy: StrategyCreateNestedOneWithoutConfigurationsInput
    backtestResults?: BacktestResultCreateNestedManyWithoutStrategyConfigInput
    portfolioItems?: PortfolioStrategyCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationUncheckedCreateWithoutTickerInput = {
    id?: string
    strategyId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    backtestResults?: BacktestResultUncheckedCreateNestedManyWithoutStrategyConfigInput
    portfolioItems?: PortfolioStrategyUncheckedCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalUncheckedCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationCreateOrConnectWithoutTickerInput = {
    where: StrategyConfigurationWhereUniqueInput
    create: XOR<StrategyConfigurationCreateWithoutTickerInput, StrategyConfigurationUncheckedCreateWithoutTickerInput>
  }

  export type StrategyConfigurationCreateManyTickerInputEnvelope = {
    data: StrategyConfigurationCreateManyTickerInput | StrategyConfigurationCreateManyTickerInput[]
    skipDuplicates?: boolean
  }

  export type PriceDataUpsertWithWhereUniqueWithoutTickerInput = {
    where: PriceDataWhereUniqueInput
    update: XOR<PriceDataUpdateWithoutTickerInput, PriceDataUncheckedUpdateWithoutTickerInput>
    create: XOR<PriceDataCreateWithoutTickerInput, PriceDataUncheckedCreateWithoutTickerInput>
  }

  export type PriceDataUpdateWithWhereUniqueWithoutTickerInput = {
    where: PriceDataWhereUniqueInput
    data: XOR<PriceDataUpdateWithoutTickerInput, PriceDataUncheckedUpdateWithoutTickerInput>
  }

  export type PriceDataUpdateManyWithWhereWithoutTickerInput = {
    where: PriceDataScalarWhereInput
    data: XOR<PriceDataUpdateManyMutationInput, PriceDataUncheckedUpdateManyWithoutTickerInput>
  }

  export type PriceDataScalarWhereInput = {
    AND?: PriceDataScalarWhereInput | PriceDataScalarWhereInput[]
    OR?: PriceDataScalarWhereInput[]
    NOT?: PriceDataScalarWhereInput | PriceDataScalarWhereInput[]
    id?: StringFilter<"PriceData"> | string
    tickerId?: StringFilter<"PriceData"> | string
    date?: DateTimeFilter<"PriceData"> | Date | string
    open?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    high?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    low?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    close?: DecimalFilter<"PriceData"> | Decimal | DecimalJsLike | number | string
    volume?: DecimalNullableFilter<"PriceData"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"PriceData"> | Date | string
  }

  export type StrategyConfigurationUpsertWithWhereUniqueWithoutTickerInput = {
    where: StrategyConfigurationWhereUniqueInput
    update: XOR<StrategyConfigurationUpdateWithoutTickerInput, StrategyConfigurationUncheckedUpdateWithoutTickerInput>
    create: XOR<StrategyConfigurationCreateWithoutTickerInput, StrategyConfigurationUncheckedCreateWithoutTickerInput>
  }

  export type StrategyConfigurationUpdateWithWhereUniqueWithoutTickerInput = {
    where: StrategyConfigurationWhereUniqueInput
    data: XOR<StrategyConfigurationUpdateWithoutTickerInput, StrategyConfigurationUncheckedUpdateWithoutTickerInput>
  }

  export type StrategyConfigurationUpdateManyWithWhereWithoutTickerInput = {
    where: StrategyConfigurationScalarWhereInput
    data: XOR<StrategyConfigurationUpdateManyMutationInput, StrategyConfigurationUncheckedUpdateManyWithoutTickerInput>
  }

  export type StrategyConfigurationScalarWhereInput = {
    AND?: StrategyConfigurationScalarWhereInput | StrategyConfigurationScalarWhereInput[]
    OR?: StrategyConfigurationScalarWhereInput[]
    NOT?: StrategyConfigurationScalarWhereInput | StrategyConfigurationScalarWhereInput[]
    id?: StringFilter<"StrategyConfiguration"> | string
    strategyId?: StringFilter<"StrategyConfiguration"> | string
    tickerId?: StringFilter<"StrategyConfiguration"> | string
    timeframe?: EnumTimeframeTypeFilter<"StrategyConfiguration"> | $Enums.TimeframeType
    shortWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    longWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    signalWindow?: IntNullableFilter<"StrategyConfiguration"> | number | null
    stopLossPct?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: IntNullableFilter<"StrategyConfiguration"> | number | null
    rsiThreshold?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    signalEntry?: StringNullableFilter<"StrategyConfiguration"> | string | null
    signalExit?: StringNullableFilter<"StrategyConfiguration"> | string | null
    direction?: EnumDirectionTypeFilter<"StrategyConfiguration"> | $Enums.DirectionType
    allocationPct?: DecimalNullableFilter<"StrategyConfiguration"> | Decimal | DecimalJsLike | number | string | null
    parameters?: JsonNullableFilter<"StrategyConfiguration">
    createdAt?: DateTimeFilter<"StrategyConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"StrategyConfiguration"> | Date | string
  }

  export type TickerCreateWithoutPriceDataInput = {
    id?: string
    symbol: string
    name?: string | null
    assetClass: $Enums.AssetClass
    exchange?: string | null
    sector?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    strategyConfigs?: StrategyConfigurationCreateNestedManyWithoutTickerInput
  }

  export type TickerUncheckedCreateWithoutPriceDataInput = {
    id?: string
    symbol: string
    name?: string | null
    assetClass: $Enums.AssetClass
    exchange?: string | null
    sector?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    strategyConfigs?: StrategyConfigurationUncheckedCreateNestedManyWithoutTickerInput
  }

  export type TickerCreateOrConnectWithoutPriceDataInput = {
    where: TickerWhereUniqueInput
    create: XOR<TickerCreateWithoutPriceDataInput, TickerUncheckedCreateWithoutPriceDataInput>
  }

  export type TickerUpsertWithoutPriceDataInput = {
    update: XOR<TickerUpdateWithoutPriceDataInput, TickerUncheckedUpdateWithoutPriceDataInput>
    create: XOR<TickerCreateWithoutPriceDataInput, TickerUncheckedCreateWithoutPriceDataInput>
    where?: TickerWhereInput
  }

  export type TickerUpdateToOneWithWhereWithoutPriceDataInput = {
    where?: TickerWhereInput
    data: XOR<TickerUpdateWithoutPriceDataInput, TickerUncheckedUpdateWithoutPriceDataInput>
  }

  export type TickerUpdateWithoutPriceDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    assetClass?: EnumAssetClassFieldUpdateOperationsInput | $Enums.AssetClass
    exchange?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategyConfigs?: StrategyConfigurationUpdateManyWithoutTickerNestedInput
  }

  export type TickerUncheckedUpdateWithoutPriceDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    assetClass?: EnumAssetClassFieldUpdateOperationsInput | $Enums.AssetClass
    exchange?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategyConfigs?: StrategyConfigurationUncheckedUpdateManyWithoutTickerNestedInput
  }

  export type StrategyConfigurationCreateWithoutStrategyInput = {
    id?: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    ticker: TickerCreateNestedOneWithoutStrategyConfigsInput
    backtestResults?: BacktestResultCreateNestedManyWithoutStrategyConfigInput
    portfolioItems?: PortfolioStrategyCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationUncheckedCreateWithoutStrategyInput = {
    id?: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    backtestResults?: BacktestResultUncheckedCreateNestedManyWithoutStrategyConfigInput
    portfolioItems?: PortfolioStrategyUncheckedCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalUncheckedCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationCreateOrConnectWithoutStrategyInput = {
    where: StrategyConfigurationWhereUniqueInput
    create: XOR<StrategyConfigurationCreateWithoutStrategyInput, StrategyConfigurationUncheckedCreateWithoutStrategyInput>
  }

  export type StrategyConfigurationCreateManyStrategyInputEnvelope = {
    data: StrategyConfigurationCreateManyStrategyInput | StrategyConfigurationCreateManyStrategyInput[]
    skipDuplicates?: boolean
  }

  export type StrategyConfigurationUpsertWithWhereUniqueWithoutStrategyInput = {
    where: StrategyConfigurationWhereUniqueInput
    update: XOR<StrategyConfigurationUpdateWithoutStrategyInput, StrategyConfigurationUncheckedUpdateWithoutStrategyInput>
    create: XOR<StrategyConfigurationCreateWithoutStrategyInput, StrategyConfigurationUncheckedCreateWithoutStrategyInput>
  }

  export type StrategyConfigurationUpdateWithWhereUniqueWithoutStrategyInput = {
    where: StrategyConfigurationWhereUniqueInput
    data: XOR<StrategyConfigurationUpdateWithoutStrategyInput, StrategyConfigurationUncheckedUpdateWithoutStrategyInput>
  }

  export type StrategyConfigurationUpdateManyWithWhereWithoutStrategyInput = {
    where: StrategyConfigurationScalarWhereInput
    data: XOR<StrategyConfigurationUpdateManyMutationInput, StrategyConfigurationUncheckedUpdateManyWithoutStrategyInput>
  }

  export type StrategyCreateWithoutConfigurationsInput = {
    id?: string
    name: string
    type: $Enums.StrategyType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StrategyUncheckedCreateWithoutConfigurationsInput = {
    id?: string
    name: string
    type: $Enums.StrategyType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StrategyCreateOrConnectWithoutConfigurationsInput = {
    where: StrategyWhereUniqueInput
    create: XOR<StrategyCreateWithoutConfigurationsInput, StrategyUncheckedCreateWithoutConfigurationsInput>
  }

  export type TickerCreateWithoutStrategyConfigsInput = {
    id?: string
    symbol: string
    name?: string | null
    assetClass: $Enums.AssetClass
    exchange?: string | null
    sector?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    priceData?: PriceDataCreateNestedManyWithoutTickerInput
  }

  export type TickerUncheckedCreateWithoutStrategyConfigsInput = {
    id?: string
    symbol: string
    name?: string | null
    assetClass: $Enums.AssetClass
    exchange?: string | null
    sector?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    priceData?: PriceDataUncheckedCreateNestedManyWithoutTickerInput
  }

  export type TickerCreateOrConnectWithoutStrategyConfigsInput = {
    where: TickerWhereUniqueInput
    create: XOR<TickerCreateWithoutStrategyConfigsInput, TickerUncheckedCreateWithoutStrategyConfigsInput>
  }

  export type BacktestResultCreateWithoutStrategyConfigInput = {
    id?: string
    runDate: Date | string
    startDate: Date | string
    endDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    annualReturnPct?: Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    calmarRatio?: Decimal | DecimalJsLike | number | string | null
    totalTrades: number
    winningTrades?: number | null
    losingTrades?: number | null
    winRatePct?: Decimal | DecimalJsLike | number | string | null
    profitFactor?: Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: Decimal | DecimalJsLike | number | string | null
    beta?: Decimal | DecimalJsLike | number | string | null
    alpha?: Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: Decimal | DecimalJsLike | number | string | null
    outperformancePct?: Decimal | DecimalJsLike | number | string | null
    trackingError?: Decimal | DecimalJsLike | number | string | null
    informationRatio?: Decimal | DecimalJsLike | number | string | null
    score?: Decimal | DecimalJsLike | number | string | null
    openTrades?: number | null
    tradesPerDay?: Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BacktestResultUncheckedCreateWithoutStrategyConfigInput = {
    id?: string
    runDate: Date | string
    startDate: Date | string
    endDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    annualReturnPct?: Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    calmarRatio?: Decimal | DecimalJsLike | number | string | null
    totalTrades: number
    winningTrades?: number | null
    losingTrades?: number | null
    winRatePct?: Decimal | DecimalJsLike | number | string | null
    profitFactor?: Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: Decimal | DecimalJsLike | number | string | null
    beta?: Decimal | DecimalJsLike | number | string | null
    alpha?: Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: Decimal | DecimalJsLike | number | string | null
    outperformancePct?: Decimal | DecimalJsLike | number | string | null
    trackingError?: Decimal | DecimalJsLike | number | string | null
    informationRatio?: Decimal | DecimalJsLike | number | string | null
    score?: Decimal | DecimalJsLike | number | string | null
    openTrades?: number | null
    tradesPerDay?: Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BacktestResultCreateOrConnectWithoutStrategyConfigInput = {
    where: BacktestResultWhereUniqueInput
    create: XOR<BacktestResultCreateWithoutStrategyConfigInput, BacktestResultUncheckedCreateWithoutStrategyConfigInput>
  }

  export type BacktestResultCreateManyStrategyConfigInputEnvelope = {
    data: BacktestResultCreateManyStrategyConfigInput | BacktestResultCreateManyStrategyConfigInput[]
    skipDuplicates?: boolean
  }

  export type PortfolioStrategyCreateWithoutStrategyConfigInput = {
    id?: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
    portfolio: PortfolioCreateNestedOneWithoutStrategiesInput
  }

  export type PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput = {
    id?: string
    portfolioId: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PortfolioStrategyCreateOrConnectWithoutStrategyConfigInput = {
    where: PortfolioStrategyWhereUniqueInput
    create: XOR<PortfolioStrategyCreateWithoutStrategyConfigInput, PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput>
  }

  export type PortfolioStrategyCreateManyStrategyConfigInputEnvelope = {
    data: PortfolioStrategyCreateManyStrategyConfigInput | PortfolioStrategyCreateManyStrategyConfigInput[]
    skipDuplicates?: boolean
  }

  export type SignalCreateWithoutStrategyConfigInput = {
    id?: string
    signalType: $Enums.SignalType
    signalDate: Date | string
    price: Decimal | DecimalJsLike | number | string
    quantity?: Decimal | DecimalJsLike | number | string | null
    confidence?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SignalUncheckedCreateWithoutStrategyConfigInput = {
    id?: string
    signalType: $Enums.SignalType
    signalDate: Date | string
    price: Decimal | DecimalJsLike | number | string
    quantity?: Decimal | DecimalJsLike | number | string | null
    confidence?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SignalCreateOrConnectWithoutStrategyConfigInput = {
    where: SignalWhereUniqueInput
    create: XOR<SignalCreateWithoutStrategyConfigInput, SignalUncheckedCreateWithoutStrategyConfigInput>
  }

  export type SignalCreateManyStrategyConfigInputEnvelope = {
    data: SignalCreateManyStrategyConfigInput | SignalCreateManyStrategyConfigInput[]
    skipDuplicates?: boolean
  }

  export type StrategyUpsertWithoutConfigurationsInput = {
    update: XOR<StrategyUpdateWithoutConfigurationsInput, StrategyUncheckedUpdateWithoutConfigurationsInput>
    create: XOR<StrategyCreateWithoutConfigurationsInput, StrategyUncheckedCreateWithoutConfigurationsInput>
    where?: StrategyWhereInput
  }

  export type StrategyUpdateToOneWithWhereWithoutConfigurationsInput = {
    where?: StrategyWhereInput
    data: XOR<StrategyUpdateWithoutConfigurationsInput, StrategyUncheckedUpdateWithoutConfigurationsInput>
  }

  export type StrategyUpdateWithoutConfigurationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStrategyTypeFieldUpdateOperationsInput | $Enums.StrategyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StrategyUncheckedUpdateWithoutConfigurationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStrategyTypeFieldUpdateOperationsInput | $Enums.StrategyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TickerUpsertWithoutStrategyConfigsInput = {
    update: XOR<TickerUpdateWithoutStrategyConfigsInput, TickerUncheckedUpdateWithoutStrategyConfigsInput>
    create: XOR<TickerCreateWithoutStrategyConfigsInput, TickerUncheckedCreateWithoutStrategyConfigsInput>
    where?: TickerWhereInput
  }

  export type TickerUpdateToOneWithWhereWithoutStrategyConfigsInput = {
    where?: TickerWhereInput
    data: XOR<TickerUpdateWithoutStrategyConfigsInput, TickerUncheckedUpdateWithoutStrategyConfigsInput>
  }

  export type TickerUpdateWithoutStrategyConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    assetClass?: EnumAssetClassFieldUpdateOperationsInput | $Enums.AssetClass
    exchange?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceData?: PriceDataUpdateManyWithoutTickerNestedInput
  }

  export type TickerUncheckedUpdateWithoutStrategyConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    assetClass?: EnumAssetClassFieldUpdateOperationsInput | $Enums.AssetClass
    exchange?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceData?: PriceDataUncheckedUpdateManyWithoutTickerNestedInput
  }

  export type BacktestResultUpsertWithWhereUniqueWithoutStrategyConfigInput = {
    where: BacktestResultWhereUniqueInput
    update: XOR<BacktestResultUpdateWithoutStrategyConfigInput, BacktestResultUncheckedUpdateWithoutStrategyConfigInput>
    create: XOR<BacktestResultCreateWithoutStrategyConfigInput, BacktestResultUncheckedCreateWithoutStrategyConfigInput>
  }

  export type BacktestResultUpdateWithWhereUniqueWithoutStrategyConfigInput = {
    where: BacktestResultWhereUniqueInput
    data: XOR<BacktestResultUpdateWithoutStrategyConfigInput, BacktestResultUncheckedUpdateWithoutStrategyConfigInput>
  }

  export type BacktestResultUpdateManyWithWhereWithoutStrategyConfigInput = {
    where: BacktestResultScalarWhereInput
    data: XOR<BacktestResultUpdateManyMutationInput, BacktestResultUncheckedUpdateManyWithoutStrategyConfigInput>
  }

  export type BacktestResultScalarWhereInput = {
    AND?: BacktestResultScalarWhereInput | BacktestResultScalarWhereInput[]
    OR?: BacktestResultScalarWhereInput[]
    NOT?: BacktestResultScalarWhereInput | BacktestResultScalarWhereInput[]
    id?: StringFilter<"BacktestResult"> | string
    strategyConfigId?: StringFilter<"BacktestResult"> | string
    runDate?: DateTimeFilter<"BacktestResult"> | Date | string
    startDate?: DateTimeFilter<"BacktestResult"> | Date | string
    endDate?: DateTimeFilter<"BacktestResult"> | Date | string
    totalReturnPct?: DecimalFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string
    annualReturnPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFilter<"BacktestResult"> | number
    winningTrades?: IntNullableFilter<"BacktestResult"> | number | null
    losingTrades?: IntNullableFilter<"BacktestResult"> | number | null
    winRatePct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    profitFactor?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    beta?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    alpha?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    trackingError?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    informationRatio?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    score?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    openTrades?: IntNullableFilter<"BacktestResult"> | number | null
    tradesPerDay?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: DecimalNullableFilter<"BacktestResult"> | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: JsonNullableFilter<"BacktestResult">
    createdAt?: DateTimeFilter<"BacktestResult"> | Date | string
  }

  export type PortfolioStrategyUpsertWithWhereUniqueWithoutStrategyConfigInput = {
    where: PortfolioStrategyWhereUniqueInput
    update: XOR<PortfolioStrategyUpdateWithoutStrategyConfigInput, PortfolioStrategyUncheckedUpdateWithoutStrategyConfigInput>
    create: XOR<PortfolioStrategyCreateWithoutStrategyConfigInput, PortfolioStrategyUncheckedCreateWithoutStrategyConfigInput>
  }

  export type PortfolioStrategyUpdateWithWhereUniqueWithoutStrategyConfigInput = {
    where: PortfolioStrategyWhereUniqueInput
    data: XOR<PortfolioStrategyUpdateWithoutStrategyConfigInput, PortfolioStrategyUncheckedUpdateWithoutStrategyConfigInput>
  }

  export type PortfolioStrategyUpdateManyWithWhereWithoutStrategyConfigInput = {
    where: PortfolioStrategyScalarWhereInput
    data: XOR<PortfolioStrategyUpdateManyMutationInput, PortfolioStrategyUncheckedUpdateManyWithoutStrategyConfigInput>
  }

  export type PortfolioStrategyScalarWhereInput = {
    AND?: PortfolioStrategyScalarWhereInput | PortfolioStrategyScalarWhereInput[]
    OR?: PortfolioStrategyScalarWhereInput[]
    NOT?: PortfolioStrategyScalarWhereInput | PortfolioStrategyScalarWhereInput[]
    id?: StringFilter<"PortfolioStrategy"> | string
    portfolioId?: StringFilter<"PortfolioStrategy"> | string
    strategyConfigId?: StringFilter<"PortfolioStrategy"> | string
    allocationPct?: DecimalFilter<"PortfolioStrategy"> | Decimal | DecimalJsLike | number | string
    position?: IntFilter<"PortfolioStrategy"> | number
    isActive?: BoolFilter<"PortfolioStrategy"> | boolean
    createdAt?: DateTimeFilter<"PortfolioStrategy"> | Date | string
  }

  export type SignalUpsertWithWhereUniqueWithoutStrategyConfigInput = {
    where: SignalWhereUniqueInput
    update: XOR<SignalUpdateWithoutStrategyConfigInput, SignalUncheckedUpdateWithoutStrategyConfigInput>
    create: XOR<SignalCreateWithoutStrategyConfigInput, SignalUncheckedCreateWithoutStrategyConfigInput>
  }

  export type SignalUpdateWithWhereUniqueWithoutStrategyConfigInput = {
    where: SignalWhereUniqueInput
    data: XOR<SignalUpdateWithoutStrategyConfigInput, SignalUncheckedUpdateWithoutStrategyConfigInput>
  }

  export type SignalUpdateManyWithWhereWithoutStrategyConfigInput = {
    where: SignalScalarWhereInput
    data: XOR<SignalUpdateManyMutationInput, SignalUncheckedUpdateManyWithoutStrategyConfigInput>
  }

  export type SignalScalarWhereInput = {
    AND?: SignalScalarWhereInput | SignalScalarWhereInput[]
    OR?: SignalScalarWhereInput[]
    NOT?: SignalScalarWhereInput | SignalScalarWhereInput[]
    id?: StringFilter<"Signal"> | string
    strategyConfigId?: StringFilter<"Signal"> | string
    signalType?: EnumSignalTypeFilter<"Signal"> | $Enums.SignalType
    signalDate?: DateTimeFilter<"Signal"> | Date | string
    price?: DecimalFilter<"Signal"> | Decimal | DecimalJsLike | number | string
    quantity?: DecimalNullableFilter<"Signal"> | Decimal | DecimalJsLike | number | string | null
    confidence?: DecimalNullableFilter<"Signal"> | Decimal | DecimalJsLike | number | string | null
    metadata?: JsonNullableFilter<"Signal">
    createdAt?: DateTimeFilter<"Signal"> | Date | string
  }

  export type StrategyConfigurationCreateWithoutBacktestResultsInput = {
    id?: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategy: StrategyCreateNestedOneWithoutConfigurationsInput
    ticker: TickerCreateNestedOneWithoutStrategyConfigsInput
    portfolioItems?: PortfolioStrategyCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationUncheckedCreateWithoutBacktestResultsInput = {
    id?: string
    strategyId: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolioItems?: PortfolioStrategyUncheckedCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalUncheckedCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationCreateOrConnectWithoutBacktestResultsInput = {
    where: StrategyConfigurationWhereUniqueInput
    create: XOR<StrategyConfigurationCreateWithoutBacktestResultsInput, StrategyConfigurationUncheckedCreateWithoutBacktestResultsInput>
  }

  export type StrategyConfigurationUpsertWithoutBacktestResultsInput = {
    update: XOR<StrategyConfigurationUpdateWithoutBacktestResultsInput, StrategyConfigurationUncheckedUpdateWithoutBacktestResultsInput>
    create: XOR<StrategyConfigurationCreateWithoutBacktestResultsInput, StrategyConfigurationUncheckedCreateWithoutBacktestResultsInput>
    where?: StrategyConfigurationWhereInput
  }

  export type StrategyConfigurationUpdateToOneWithWhereWithoutBacktestResultsInput = {
    where?: StrategyConfigurationWhereInput
    data: XOR<StrategyConfigurationUpdateWithoutBacktestResultsInput, StrategyConfigurationUncheckedUpdateWithoutBacktestResultsInput>
  }

  export type StrategyConfigurationUpdateWithoutBacktestResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategy?: StrategyUpdateOneRequiredWithoutConfigurationsNestedInput
    ticker?: TickerUpdateOneRequiredWithoutStrategyConfigsNestedInput
    portfolioItems?: PortfolioStrategyUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationUncheckedUpdateWithoutBacktestResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolioItems?: PortfolioStrategyUncheckedUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUncheckedUpdateManyWithoutStrategyConfigNestedInput
  }

  export type PortfolioStrategyCreateWithoutPortfolioInput = {
    id?: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
    strategyConfig: StrategyConfigurationCreateNestedOneWithoutPortfolioItemsInput
  }

  export type PortfolioStrategyUncheckedCreateWithoutPortfolioInput = {
    id?: string
    strategyConfigId: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PortfolioStrategyCreateOrConnectWithoutPortfolioInput = {
    where: PortfolioStrategyWhereUniqueInput
    create: XOR<PortfolioStrategyCreateWithoutPortfolioInput, PortfolioStrategyUncheckedCreateWithoutPortfolioInput>
  }

  export type PortfolioStrategyCreateManyPortfolioInputEnvelope = {
    data: PortfolioStrategyCreateManyPortfolioInput | PortfolioStrategyCreateManyPortfolioInput[]
    skipDuplicates?: boolean
  }

  export type PortfolioMetricCreateWithoutPortfolioInput = {
    id?: string
    metricDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: number | null
    avgConcurrentStrategies?: Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PortfolioMetricUncheckedCreateWithoutPortfolioInput = {
    id?: string
    metricDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: number | null
    avgConcurrentStrategies?: Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PortfolioMetricCreateOrConnectWithoutPortfolioInput = {
    where: PortfolioMetricWhereUniqueInput
    create: XOR<PortfolioMetricCreateWithoutPortfolioInput, PortfolioMetricUncheckedCreateWithoutPortfolioInput>
  }

  export type PortfolioMetricCreateManyPortfolioInputEnvelope = {
    data: PortfolioMetricCreateManyPortfolioInput | PortfolioMetricCreateManyPortfolioInput[]
    skipDuplicates?: boolean
  }

  export type PortfolioStrategyUpsertWithWhereUniqueWithoutPortfolioInput = {
    where: PortfolioStrategyWhereUniqueInput
    update: XOR<PortfolioStrategyUpdateWithoutPortfolioInput, PortfolioStrategyUncheckedUpdateWithoutPortfolioInput>
    create: XOR<PortfolioStrategyCreateWithoutPortfolioInput, PortfolioStrategyUncheckedCreateWithoutPortfolioInput>
  }

  export type PortfolioStrategyUpdateWithWhereUniqueWithoutPortfolioInput = {
    where: PortfolioStrategyWhereUniqueInput
    data: XOR<PortfolioStrategyUpdateWithoutPortfolioInput, PortfolioStrategyUncheckedUpdateWithoutPortfolioInput>
  }

  export type PortfolioStrategyUpdateManyWithWhereWithoutPortfolioInput = {
    where: PortfolioStrategyScalarWhereInput
    data: XOR<PortfolioStrategyUpdateManyMutationInput, PortfolioStrategyUncheckedUpdateManyWithoutPortfolioInput>
  }

  export type PortfolioMetricUpsertWithWhereUniqueWithoutPortfolioInput = {
    where: PortfolioMetricWhereUniqueInput
    update: XOR<PortfolioMetricUpdateWithoutPortfolioInput, PortfolioMetricUncheckedUpdateWithoutPortfolioInput>
    create: XOR<PortfolioMetricCreateWithoutPortfolioInput, PortfolioMetricUncheckedCreateWithoutPortfolioInput>
  }

  export type PortfolioMetricUpdateWithWhereUniqueWithoutPortfolioInput = {
    where: PortfolioMetricWhereUniqueInput
    data: XOR<PortfolioMetricUpdateWithoutPortfolioInput, PortfolioMetricUncheckedUpdateWithoutPortfolioInput>
  }

  export type PortfolioMetricUpdateManyWithWhereWithoutPortfolioInput = {
    where: PortfolioMetricScalarWhereInput
    data: XOR<PortfolioMetricUpdateManyMutationInput, PortfolioMetricUncheckedUpdateManyWithoutPortfolioInput>
  }

  export type PortfolioMetricScalarWhereInput = {
    AND?: PortfolioMetricScalarWhereInput | PortfolioMetricScalarWhereInput[]
    OR?: PortfolioMetricScalarWhereInput[]
    NOT?: PortfolioMetricScalarWhereInput | PortfolioMetricScalarWhereInput[]
    id?: StringFilter<"PortfolioMetric"> | string
    portfolioId?: StringFilter<"PortfolioMetric"> | string
    metricDate?: DateTimeFilter<"PortfolioMetric"> | Date | string
    totalReturnPct?: DecimalFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string
    sharpeRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: IntNullableFilter<"PortfolioMetric"> | number | null
    avgConcurrentStrategies?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: DecimalNullableFilter<"PortfolioMetric"> | Decimal | DecimalJsLike | number | string | null
    riskContribution?: JsonNullableFilter<"PortfolioMetric">
    correlationMatrix?: JsonNullableFilter<"PortfolioMetric">
    strategyWeights?: JsonNullableFilter<"PortfolioMetric">
    performanceAttribution?: JsonNullableFilter<"PortfolioMetric">
    createdAt?: DateTimeFilter<"PortfolioMetric"> | Date | string
  }

  export type PortfolioCreateWithoutStrategiesInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: PortfolioMetricCreateNestedManyWithoutPortfolioInput
  }

  export type PortfolioUncheckedCreateWithoutStrategiesInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    metrics?: PortfolioMetricUncheckedCreateNestedManyWithoutPortfolioInput
  }

  export type PortfolioCreateOrConnectWithoutStrategiesInput = {
    where: PortfolioWhereUniqueInput
    create: XOR<PortfolioCreateWithoutStrategiesInput, PortfolioUncheckedCreateWithoutStrategiesInput>
  }

  export type StrategyConfigurationCreateWithoutPortfolioItemsInput = {
    id?: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategy: StrategyCreateNestedOneWithoutConfigurationsInput
    ticker: TickerCreateNestedOneWithoutStrategyConfigsInput
    backtestResults?: BacktestResultCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationUncheckedCreateWithoutPortfolioItemsInput = {
    id?: string
    strategyId: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    backtestResults?: BacktestResultUncheckedCreateNestedManyWithoutStrategyConfigInput
    signals?: SignalUncheckedCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationCreateOrConnectWithoutPortfolioItemsInput = {
    where: StrategyConfigurationWhereUniqueInput
    create: XOR<StrategyConfigurationCreateWithoutPortfolioItemsInput, StrategyConfigurationUncheckedCreateWithoutPortfolioItemsInput>
  }

  export type PortfolioUpsertWithoutStrategiesInput = {
    update: XOR<PortfolioUpdateWithoutStrategiesInput, PortfolioUncheckedUpdateWithoutStrategiesInput>
    create: XOR<PortfolioCreateWithoutStrategiesInput, PortfolioUncheckedCreateWithoutStrategiesInput>
    where?: PortfolioWhereInput
  }

  export type PortfolioUpdateToOneWithWhereWithoutStrategiesInput = {
    where?: PortfolioWhereInput
    data: XOR<PortfolioUpdateWithoutStrategiesInput, PortfolioUncheckedUpdateWithoutStrategiesInput>
  }

  export type PortfolioUpdateWithoutStrategiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumPortfolioTypeFieldUpdateOperationsInput | $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: PortfolioMetricUpdateManyWithoutPortfolioNestedInput
  }

  export type PortfolioUncheckedUpdateWithoutStrategiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumPortfolioTypeFieldUpdateOperationsInput | $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metrics?: PortfolioMetricUncheckedUpdateManyWithoutPortfolioNestedInput
  }

  export type StrategyConfigurationUpsertWithoutPortfolioItemsInput = {
    update: XOR<StrategyConfigurationUpdateWithoutPortfolioItemsInput, StrategyConfigurationUncheckedUpdateWithoutPortfolioItemsInput>
    create: XOR<StrategyConfigurationCreateWithoutPortfolioItemsInput, StrategyConfigurationUncheckedCreateWithoutPortfolioItemsInput>
    where?: StrategyConfigurationWhereInput
  }

  export type StrategyConfigurationUpdateToOneWithWhereWithoutPortfolioItemsInput = {
    where?: StrategyConfigurationWhereInput
    data: XOR<StrategyConfigurationUpdateWithoutPortfolioItemsInput, StrategyConfigurationUncheckedUpdateWithoutPortfolioItemsInput>
  }

  export type StrategyConfigurationUpdateWithoutPortfolioItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategy?: StrategyUpdateOneRequiredWithoutConfigurationsNestedInput
    ticker?: TickerUpdateOneRequiredWithoutStrategyConfigsNestedInput
    backtestResults?: BacktestResultUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationUncheckedUpdateWithoutPortfolioItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    backtestResults?: BacktestResultUncheckedUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUncheckedUpdateManyWithoutStrategyConfigNestedInput
  }

  export type PortfolioCreateWithoutMetricsInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategies?: PortfolioStrategyCreateNestedManyWithoutPortfolioInput
  }

  export type PortfolioUncheckedCreateWithoutMetricsInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategies?: PortfolioStrategyUncheckedCreateNestedManyWithoutPortfolioInput
  }

  export type PortfolioCreateOrConnectWithoutMetricsInput = {
    where: PortfolioWhereUniqueInput
    create: XOR<PortfolioCreateWithoutMetricsInput, PortfolioUncheckedCreateWithoutMetricsInput>
  }

  export type PortfolioUpsertWithoutMetricsInput = {
    update: XOR<PortfolioUpdateWithoutMetricsInput, PortfolioUncheckedUpdateWithoutMetricsInput>
    create: XOR<PortfolioCreateWithoutMetricsInput, PortfolioUncheckedCreateWithoutMetricsInput>
    where?: PortfolioWhereInput
  }

  export type PortfolioUpdateToOneWithWhereWithoutMetricsInput = {
    where?: PortfolioWhereInput
    data: XOR<PortfolioUpdateWithoutMetricsInput, PortfolioUncheckedUpdateWithoutMetricsInput>
  }

  export type PortfolioUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumPortfolioTypeFieldUpdateOperationsInput | $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategies?: PortfolioStrategyUpdateManyWithoutPortfolioNestedInput
  }

  export type PortfolioUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumPortfolioTypeFieldUpdateOperationsInput | $Enums.PortfolioType
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategies?: PortfolioStrategyUncheckedUpdateManyWithoutPortfolioNestedInput
  }

  export type StrategyConfigurationCreateWithoutSignalsInput = {
    id?: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    strategy: StrategyCreateNestedOneWithoutConfigurationsInput
    ticker: TickerCreateNestedOneWithoutStrategyConfigsInput
    backtestResults?: BacktestResultCreateNestedManyWithoutStrategyConfigInput
    portfolioItems?: PortfolioStrategyCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationUncheckedCreateWithoutSignalsInput = {
    id?: string
    strategyId: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    backtestResults?: BacktestResultUncheckedCreateNestedManyWithoutStrategyConfigInput
    portfolioItems?: PortfolioStrategyUncheckedCreateNestedManyWithoutStrategyConfigInput
  }

  export type StrategyConfigurationCreateOrConnectWithoutSignalsInput = {
    where: StrategyConfigurationWhereUniqueInput
    create: XOR<StrategyConfigurationCreateWithoutSignalsInput, StrategyConfigurationUncheckedCreateWithoutSignalsInput>
  }

  export type StrategyConfigurationUpsertWithoutSignalsInput = {
    update: XOR<StrategyConfigurationUpdateWithoutSignalsInput, StrategyConfigurationUncheckedUpdateWithoutSignalsInput>
    create: XOR<StrategyConfigurationCreateWithoutSignalsInput, StrategyConfigurationUncheckedCreateWithoutSignalsInput>
    where?: StrategyConfigurationWhereInput
  }

  export type StrategyConfigurationUpdateToOneWithWhereWithoutSignalsInput = {
    where?: StrategyConfigurationWhereInput
    data: XOR<StrategyConfigurationUpdateWithoutSignalsInput, StrategyConfigurationUncheckedUpdateWithoutSignalsInput>
  }

  export type StrategyConfigurationUpdateWithoutSignalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategy?: StrategyUpdateOneRequiredWithoutConfigurationsNestedInput
    ticker?: TickerUpdateOneRequiredWithoutStrategyConfigsNestedInput
    backtestResults?: BacktestResultUpdateManyWithoutStrategyConfigNestedInput
    portfolioItems?: PortfolioStrategyUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationUncheckedUpdateWithoutSignalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    backtestResults?: BacktestResultUncheckedUpdateManyWithoutStrategyConfigNestedInput
    portfolioItems?: PortfolioStrategyUncheckedUpdateManyWithoutStrategyConfigNestedInput
  }

  export type PriceDataCreateManyTickerInput = {
    id?: string
    date: Date | string
    open: Decimal | DecimalJsLike | number | string
    high: Decimal | DecimalJsLike | number | string
    low: Decimal | DecimalJsLike | number | string
    close: Decimal | DecimalJsLike | number | string
    volume?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type StrategyConfigurationCreateManyTickerInput = {
    id?: string
    strategyId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PriceDataUpdateWithoutTickerInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    open?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    high?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    low?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    close?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    volume?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceDataUncheckedUpdateWithoutTickerInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    open?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    high?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    low?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    close?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    volume?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceDataUncheckedUpdateManyWithoutTickerInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    open?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    high?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    low?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    close?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    volume?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StrategyConfigurationUpdateWithoutTickerInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategy?: StrategyUpdateOneRequiredWithoutConfigurationsNestedInput
    backtestResults?: BacktestResultUpdateManyWithoutStrategyConfigNestedInput
    portfolioItems?: PortfolioStrategyUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationUncheckedUpdateWithoutTickerInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    backtestResults?: BacktestResultUncheckedUpdateManyWithoutStrategyConfigNestedInput
    portfolioItems?: PortfolioStrategyUncheckedUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUncheckedUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationUncheckedUpdateManyWithoutTickerInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StrategyConfigurationCreateManyStrategyInput = {
    id?: string
    tickerId: string
    timeframe: $Enums.TimeframeType
    shortWindow?: number | null
    longWindow?: number | null
    signalWindow?: number | null
    stopLossPct?: Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: number | null
    rsiThreshold?: Decimal | DecimalJsLike | number | string | null
    signalEntry?: string | null
    signalExit?: string | null
    direction?: $Enums.DirectionType
    allocationPct?: Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StrategyConfigurationUpdateWithoutStrategyInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticker?: TickerUpdateOneRequiredWithoutStrategyConfigsNestedInput
    backtestResults?: BacktestResultUpdateManyWithoutStrategyConfigNestedInput
    portfolioItems?: PortfolioStrategyUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationUncheckedUpdateWithoutStrategyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    backtestResults?: BacktestResultUncheckedUpdateManyWithoutStrategyConfigNestedInput
    portfolioItems?: PortfolioStrategyUncheckedUpdateManyWithoutStrategyConfigNestedInput
    signals?: SignalUncheckedUpdateManyWithoutStrategyConfigNestedInput
  }

  export type StrategyConfigurationUncheckedUpdateManyWithoutStrategyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tickerId?: StringFieldUpdateOperationsInput | string
    timeframe?: EnumTimeframeTypeFieldUpdateOperationsInput | $Enums.TimeframeType
    shortWindow?: NullableIntFieldUpdateOperationsInput | number | null
    longWindow?: NullableIntFieldUpdateOperationsInput | number | null
    signalWindow?: NullableIntFieldUpdateOperationsInput | number | null
    stopLossPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rsiPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    rsiThreshold?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    signalEntry?: NullableStringFieldUpdateOperationsInput | string | null
    signalExit?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: EnumDirectionTypeFieldUpdateOperationsInput | $Enums.DirectionType
    allocationPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BacktestResultCreateManyStrategyConfigInput = {
    id?: string
    runDate: Date | string
    startDate: Date | string
    endDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    annualReturnPct?: Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    calmarRatio?: Decimal | DecimalJsLike | number | string | null
    totalTrades: number
    winningTrades?: number | null
    losingTrades?: number | null
    winRatePct?: Decimal | DecimalJsLike | number | string | null
    profitFactor?: Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: Decimal | DecimalJsLike | number | string | null
    beta?: Decimal | DecimalJsLike | number | string | null
    alpha?: Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: Decimal | DecimalJsLike | number | string | null
    outperformancePct?: Decimal | DecimalJsLike | number | string | null
    trackingError?: Decimal | DecimalJsLike | number | string | null
    informationRatio?: Decimal | DecimalJsLike | number | string | null
    score?: Decimal | DecimalJsLike | number | string | null
    openTrades?: number | null
    tradesPerDay?: Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PortfolioStrategyCreateManyStrategyConfigInput = {
    id?: string
    portfolioId: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type SignalCreateManyStrategyConfigInput = {
    id?: string
    signalType: $Enums.SignalType
    signalDate: Date | string
    price: Decimal | DecimalJsLike | number | string
    quantity?: Decimal | DecimalJsLike | number | string | null
    confidence?: Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BacktestResultUpdateWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    runDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    annualReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFieldUpdateOperationsInput | number
    winningTrades?: NullableIntFieldUpdateOperationsInput | number | null
    losingTrades?: NullableIntFieldUpdateOperationsInput | number | null
    winRatePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    profitFactor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    beta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    alpha?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    trackingError?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    informationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    openTrades?: NullableIntFieldUpdateOperationsInput | number | null
    tradesPerDay?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BacktestResultUncheckedUpdateWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    runDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    annualReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFieldUpdateOperationsInput | number
    winningTrades?: NullableIntFieldUpdateOperationsInput | number | null
    losingTrades?: NullableIntFieldUpdateOperationsInput | number | null
    winRatePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    profitFactor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    beta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    alpha?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    trackingError?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    informationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    openTrades?: NullableIntFieldUpdateOperationsInput | number | null
    tradesPerDay?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BacktestResultUncheckedUpdateManyWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    runDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    annualReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    calmarRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalTrades?: IntFieldUpdateOperationsInput | number
    winningTrades?: NullableIntFieldUpdateOperationsInput | number | null
    losingTrades?: NullableIntFieldUpdateOperationsInput | number | null
    winRatePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    profitFactor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    expectancyPerTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgTradeDuration?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgWinningTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgLosingTrade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    valueAtRisk95?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    conditionalValueAtRisk?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    beta?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    alpha?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    benchmarkReturnPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    outperformancePct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    trackingError?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    informationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    score?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    openTrades?: NullableIntFieldUpdateOperationsInput | number | null
    tradesPerDay?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tradesPerMonth?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rawMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioStrategyUpdateWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolio?: PortfolioUpdateOneRequiredWithoutStrategiesNestedInput
  }

  export type PortfolioStrategyUncheckedUpdateWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    portfolioId?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioStrategyUncheckedUpdateManyWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    portfolioId?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignalUpdateWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    signalType?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    signalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    confidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignalUncheckedUpdateWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    signalType?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    signalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    confidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignalUncheckedUpdateManyWithoutStrategyConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    signalType?: EnumSignalTypeFieldUpdateOperationsInput | $Enums.SignalType
    signalDate?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    confidence?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioStrategyCreateManyPortfolioInput = {
    id?: string
    strategyConfigId: string
    allocationPct: Decimal | DecimalJsLike | number | string
    position?: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type PortfolioMetricCreateManyPortfolioInput = {
    id?: string
    metricDate: Date | string
    totalReturnPct: Decimal | DecimalJsLike | number | string
    sharpeRatio?: Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: number | null
    avgConcurrentStrategies?: Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PortfolioStrategyUpdateWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strategyConfig?: StrategyConfigurationUpdateOneRequiredWithoutPortfolioItemsNestedInput
  }

  export type PortfolioStrategyUncheckedUpdateWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyConfigId?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioStrategyUncheckedUpdateManyWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    strategyConfigId?: StringFieldUpdateOperationsInput | string
    allocationPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    position?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioMetricUpdateWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: NullableIntFieldUpdateOperationsInput | number | null
    avgConcurrentStrategies?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioMetricUncheckedUpdateWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: NullableIntFieldUpdateOperationsInput | number | null
    avgConcurrentStrategies?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioMetricUncheckedUpdateManyWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalReturnPct?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    sharpeRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sortinoRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxDrawdownPct?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxConcurrentStrategies?: NullableIntFieldUpdateOperationsInput | number | null
    avgConcurrentStrategies?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    concurrencyRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    efficiencyScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    portfolioVaR?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    diversificationRatio?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    riskContribution?: NullableJsonNullValueInput | InputJsonValue
    correlationMatrix?: NullableJsonNullValueInput | InputJsonValue
    strategyWeights?: NullableJsonNullValueInput | InputJsonValue
    performanceAttribution?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TickerCountOutputTypeDefaultArgs instead
     */
    export type TickerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TickerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StrategyCountOutputTypeDefaultArgs instead
     */
    export type StrategyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StrategyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StrategyConfigurationCountOutputTypeDefaultArgs instead
     */
    export type StrategyConfigurationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StrategyConfigurationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PortfolioCountOutputTypeDefaultArgs instead
     */
    export type PortfolioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PortfolioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TickerDefaultArgs instead
     */
    export type TickerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TickerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PriceDataDefaultArgs instead
     */
    export type PriceDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PriceDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StrategyDefaultArgs instead
     */
    export type StrategyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StrategyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StrategyConfigurationDefaultArgs instead
     */
    export type StrategyConfigurationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StrategyConfigurationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BacktestResultDefaultArgs instead
     */
    export type BacktestResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BacktestResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PortfolioDefaultArgs instead
     */
    export type PortfolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PortfolioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PortfolioStrategyDefaultArgs instead
     */
    export type PortfolioStrategyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PortfolioStrategyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PortfolioMetricDefaultArgs instead
     */
    export type PortfolioMetricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PortfolioMetricDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SignalDefaultArgs instead
     */
    export type SignalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SignalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConfigurationDefaultArgs instead
     */
    export type ConfigurationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConfigurationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}