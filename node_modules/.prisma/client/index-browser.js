
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.4.2
 * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
 */
Prisma.prismaVersion = {
  client: "5.4.2",
  engine: "ac9d7041ed77bcc8a8dbd2ab6616b39013829574"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TickerScalarFieldEnum = {
  id: 'id',
  symbol: 'symbol',
  name: 'name',
  assetClass: 'assetClass',
  exchange: 'exchange',
  sector: 'sector',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceDataScalarFieldEnum = {
  id: 'id',
  tickerId: 'tickerId',
  date: 'date',
  open: 'open',
  high: 'high',
  low: 'low',
  close: 'close',
  volume: 'volume',
  createdAt: 'createdAt'
};

exports.Prisma.StrategyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StrategyConfigurationScalarFieldEnum = {
  id: 'id',
  strategyId: 'strategyId',
  tickerId: 'tickerId',
  timeframe: 'timeframe',
  shortWindow: 'shortWindow',
  longWindow: 'longWindow',
  signalWindow: 'signalWindow',
  stopLossPct: 'stopLossPct',
  rsiPeriod: 'rsiPeriod',
  rsiThreshold: 'rsiThreshold',
  signalEntry: 'signalEntry',
  signalExit: 'signalExit',
  direction: 'direction',
  allocationPct: 'allocationPct',
  parameters: 'parameters',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BacktestResultScalarFieldEnum = {
  id: 'id',
  strategyConfigId: 'strategyConfigId',
  runDate: 'runDate',
  startDate: 'startDate',
  endDate: 'endDate',
  totalReturnPct: 'totalReturnPct',
  annualReturnPct: 'annualReturnPct',
  sharpeRatio: 'sharpeRatio',
  sortinoRatio: 'sortinoRatio',
  maxDrawdownPct: 'maxDrawdownPct',
  calmarRatio: 'calmarRatio',
  totalTrades: 'totalTrades',
  winningTrades: 'winningTrades',
  losingTrades: 'losingTrades',
  winRatePct: 'winRatePct',
  profitFactor: 'profitFactor',
  expectancyPerTrade: 'expectancyPerTrade',
  avgTradeDuration: 'avgTradeDuration',
  avgWinningTrade: 'avgWinningTrade',
  avgLosingTrade: 'avgLosingTrade',
  valueAtRisk95: 'valueAtRisk95',
  conditionalValueAtRisk: 'conditionalValueAtRisk',
  beta: 'beta',
  alpha: 'alpha',
  benchmarkReturnPct: 'benchmarkReturnPct',
  outperformancePct: 'outperformancePct',
  trackingError: 'trackingError',
  informationRatio: 'informationRatio',
  score: 'score',
  openTrades: 'openTrades',
  tradesPerDay: 'tradesPerDay',
  tradesPerMonth: 'tradesPerMonth',
  rawMetrics: 'rawMetrics',
  createdAt: 'createdAt'
};

exports.Prisma.PortfolioScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  parameters: 'parameters',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PortfolioStrategyScalarFieldEnum = {
  id: 'id',
  portfolioId: 'portfolioId',
  strategyConfigId: 'strategyConfigId',
  allocationPct: 'allocationPct',
  position: 'position',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.PortfolioMetricScalarFieldEnum = {
  id: 'id',
  portfolioId: 'portfolioId',
  metricDate: 'metricDate',
  totalReturnPct: 'totalReturnPct',
  sharpeRatio: 'sharpeRatio',
  sortinoRatio: 'sortinoRatio',
  maxDrawdownPct: 'maxDrawdownPct',
  maxConcurrentStrategies: 'maxConcurrentStrategies',
  avgConcurrentStrategies: 'avgConcurrentStrategies',
  concurrencyRatio: 'concurrencyRatio',
  efficiencyScore: 'efficiencyScore',
  portfolioVaR: 'portfolioVaR',
  diversificationRatio: 'diversificationRatio',
  riskContribution: 'riskContribution',
  correlationMatrix: 'correlationMatrix',
  strategyWeights: 'strategyWeights',
  performanceAttribution: 'performanceAttribution',
  createdAt: 'createdAt'
};

exports.Prisma.SignalScalarFieldEnum = {
  id: 'id',
  strategyConfigId: 'strategyConfigId',
  signalType: 'signalType',
  signalDate: 'signalDate',
  price: 'price',
  quantity: 'quantity',
  confidence: 'confidence',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ConfigurationScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AssetClass = exports.$Enums.AssetClass = {
  STOCK: 'STOCK',
  CRYPTO: 'CRYPTO',
  ETF: 'ETF',
  INDEX: 'INDEX',
  COMMODITY: 'COMMODITY',
  FOREX: 'FOREX',
  BOND: 'BOND'
};

exports.StrategyType = exports.$Enums.StrategyType = {
  MA_CROSS: 'MA_CROSS',
  MACD: 'MACD',
  MEAN_REVERSION: 'MEAN_REVERSION',
  RSI: 'RSI',
  ATR: 'ATR',
  RANGE: 'RANGE',
  BOLLINGER_BANDS: 'BOLLINGER_BANDS',
  CUSTOM: 'CUSTOM'
};

exports.TimeframeType = exports.$Enums.TimeframeType = {
  ONE_MINUTE: 'ONE_MINUTE',
  FIVE_MINUTES: 'FIVE_MINUTES',
  FIFTEEN_MINUTES: 'FIFTEEN_MINUTES',
  THIRTY_MINUTES: 'THIRTY_MINUTES',
  ONE_HOUR: 'ONE_HOUR',
  TWO_HOURS: 'TWO_HOURS',
  FOUR_HOURS: 'FOUR_HOURS',
  SIX_HOURS: 'SIX_HOURS',
  EIGHT_HOURS: 'EIGHT_HOURS',
  TWELVE_HOURS: 'TWELVE_HOURS',
  ONE_DAY: 'ONE_DAY',
  THREE_DAYS: 'THREE_DAYS',
  ONE_WEEK: 'ONE_WEEK',
  ONE_MONTH: 'ONE_MONTH'
};

exports.DirectionType = exports.$Enums.DirectionType = {
  LONG: 'LONG',
  SHORT: 'SHORT',
  BOTH: 'BOTH'
};

exports.PortfolioType = exports.$Enums.PortfolioType = {
  STANDARD: 'STANDARD',
  BEST: 'BEST',
  FILTERED: 'FILTERED'
};

exports.SignalType = exports.$Enums.SignalType = {
  BUY: 'BUY',
  SELL: 'SELL',
  HOLD: 'HOLD'
};

exports.Prisma.ModelName = {
  Ticker: 'Ticker',
  PriceData: 'PriceData',
  Strategy: 'Strategy',
  StrategyConfiguration: 'StrategyConfiguration',
  BacktestResult: 'BacktestResult',
  Portfolio: 'Portfolio',
  PortfolioStrategy: 'PortfolioStrategy',
  PortfolioMetric: 'PortfolioMetric',
  Signal: 'Signal',
  Configuration: 'Configuration'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
